<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project activeEnvironment="Default" name="3.1.2_SunnyDay-SOAP_DB_Validations" resourceRoot="${projectDir}" soapui-version="5.2.1" abortOnError="false" runType="SEQUENTIAL" id="c69d17d9-8a76-4230-ac09-05b6029fb035" xmlns:con="http://eviware.com/soapui/config">
  <con:settings>
    <con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.TestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="B2 Sunny Day-SOAP state transitions"/>
  <con:entry key="Password" value=""/>
  <con:entry key="TestRunner Path" value="C:\Program Files\SmartBear\SoapUI-5.1.3\bin"/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="user-settings.xml Password" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="false"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Export JUnit Results" value="false"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Export All" value="false"/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="&lt;all>"/>
  <con:entry key="Print Report" value="false"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value=""/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="Endpoint" value=""/>
  <con:entry key="Select Report Type" value=""/>
</xml-fragment>]]></con:setting>
    <con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.LoadTestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="B2 Sunny Day-SOAP state transitions"/>
  <con:entry key="Report to Generate" value=""/>
  <con:entry key="Password" value=""/>
  <con:entry key="TestRunner Path" value="/home/hemasundar/SmartBear/SoapUI-5.1.3/bin"/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="LoadTest" value="&lt;all>"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="user-settings.xml Password" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="false"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Print Report Statistics" value="false"/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="&lt;all>"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value=""/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Endpoint" value=""/>
  <con:entry key="ThreadCount" value=""/>
  <con:entry key="Limit" value=""/>
</xml-fragment>]]></con:setting>
  </con:settings>
  <con:interface xsi:type="con:WsdlInterface" wsaVersion="NONE" name="CompWebserviceSoap11" type="wsdl" bindingName="{http://coin.nl/ws/definitions}CompWebserviceSoap11" soapVersion="1_1" anonymous="optional" definition="${#Project#SoapUrl}" id="8a537fab-845e-48f0-a37f-a40e9d723dce" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:settings>
      <con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.tcpmon.TcpMonAction@values-local">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Local Port" value=""/>
  &lt;con:entry key="Add local endpoint" value="false"/>
  &lt;con:entry key="Endpoint" value=""/>
&lt;/xml-fragment></con:setting>
    </con:settings>
    <con:definitionCache type="TEXT" rootPart="http://192.168.100.28:8080/compv3/compmessage.wsdl">
      <con:part>
        <con:url>http://192.168.100.28:8080/compv3/compmessage.wsdl</con:url>
        <con:content><![CDATA[<wsdl:definitions targetNamespace="http://coin.nl/ws/definitions" xmlns:sch="http://coin.nl/ws/schema" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="http://coin.nl/ws/definitions" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
  <wsdl:types>
    <xsd:schema elementFormDefault="qualified" targetNamespace="http://coin.nl/ws/schema" xmlns:ws-msg="http://coin.nl/ws/schema" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
      <!--Simple Types-->
      <xsd:simpleType name="TransactionId">
        <xsd:restriction base="xsd:string">
          <xsd:maxLength value="60"/>
        </xsd:restriction>
      </xsd:simpleType>
      <!--Grouped Elements-->
      <xsd:group name="Message">
        <xsd:annotation>
          <xsd:documentation/>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element name="Text" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Mandatory field containing the message text.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:group>
      <!--Complex Types-->
      <xsd:complexType name="Message">
        <xsd:sequence>
          <xsd:group ref="ws-msg:Message"/>
        </xsd:sequence>
      </xsd:complexType>
      <!--Request - Response Interface(s)-->
      <xsd:element name="SendMessagesRequest">
        <xsd:annotation>
          <xsd:appinfo>Request interface for SendMessages.</xsd:appinfo>
          <xsd:documentation>Generic interface for sending one or more (xml
						based) messages.
						When successfully received, the receiver of the
						request will respond
						with a TransactionId,
						uniquely identifying
						reception of the request and all the messages in it.</xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="Sender" type="xsd:string"/>
            <xsd:element name="Messages">
              <xsd:complexType>
                <xsd:sequence maxOccurs="unbounded" minOccurs="1">
                  <xsd:element name="Message" type="ws-msg:Message"/>
                </xsd:sequence>
              </xsd:complexType>
            </xsd:element>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="SendMessagesResponse">
        <xsd:annotation>
          <xsd:appinfo>Response interface for SendMessages.</xsd:appinfo>
          <xsd:documentation/>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="TransactionId" type="ws-msg:TransactionId"/>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
    </xsd:schema>
  </wsdl:types>
  <wsdl:message name="SendMessagesRequest">
    <wsdl:part element="sch:SendMessagesRequest" name="SendMessagesRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="SendMessagesResponse">
    <wsdl:part element="sch:SendMessagesResponse" name="SendMessagesResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:portType name="CompWebservice">
    <wsdl:operation name="SendMessages">
      <wsdl:input message="tns:SendMessagesRequest" name="SendMessagesRequest"></wsdl:input>
      <wsdl:output message="tns:SendMessagesResponse" name="SendMessagesResponse"></wsdl:output>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="CompWebserviceSoap11" type="tns:CompWebservice">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="SendMessages">
      <soap:operation soapAction="http://coin.nl/SendMessages"/>
      <wsdl:input name="SendMessagesRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="SendMessagesResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="CompWebserviceService">
    <wsdl:port binding="tns:CompWebserviceSoap11" name="CompWebserviceSoap11">
      <soap:address location="http://192.168.100.28:8080/compv3/MessageService"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content>
        <con:type>http://schemas.xmlsoap.org/wsdl/</con:type>
      </con:part>
    </con:definitionCache>
    <con:endpoints>
      <con:endpoint>${#Project#SoapUrl}</con:endpoint>
    </con:endpoints>
    <con:operation isOneWay="false" action="http://coin.nl/SendMessages" name="SendMessages" bindingOperationName="SendMessages" type="Request-Response" outputName="SendMessagesResponse" inputName="SendMessagesRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="8c3829e4-5325-42d3-82e4-242fad1e423c">
      <con:settings/>
      <con:call name="Contract Termination Request" outgoingWss="" incomingWss="" id="8915428a-63eb-41b1-989c-749c2e2f0cce" wssPasswordType="PasswordText">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>${#Project#SoapUrl}</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="http://coin.nl/ws/schema">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:SendMessagesRequest>
         <sch:Sender>TP10</sch:Sender>
         <sch:Messages>
            <sch:Message>
               <sch:Text><![CDATA[<?xml version="1.0"?>
<over:message xmlns:over="http://www.coin.nl/Overstappen_MESSAGES">
<over:header>
<over:receiver>
<!--Optional:-->
<over:networkoperator>TP14</over:networkoperator>
<!--Optional:-->
<over:serviceprovider>TP14</over:serviceprovider>
</over:receiver>
<over:sender>
<!--Optional:-->
<over:networkoperator>TP10</over:networkoperator>
<!--Optional:-->
<over:serviceprovider>TP10</over:serviceprovider>
</over:sender>
<!--Optional:-->
<over:messageid>TP10-TP14-TESTING-01</over:messageid>
<over:timestamp></over:timestamp>
</over:header>
<over:body>
<over:contractterminationrequest>
<over:v1>
<over:dossierid>TP10-TP14-TESTING-01</over:dossierid>
<!--Optional:-->
<over:recipientserviceprovider>TP10</over:recipientserviceprovider>
<!--Optional:-->
<over:recipientnetworkoperator>TP10</over:recipientnetworkoperator>
<!--Optional:-->
<over:donornetworkoperator>TP14</over:donornetworkoperator>
<!--Optional:-->
<over:donorserviceprovider>TP14</over:donorserviceprovider>
<over:customerinfo>
<!--Optional:-->
<over:initials>Ms</over:initials>
<!--Optional:-->
<over:prefix>Priyanka</over:prefix>
<!--Optional:-->
<over:lastname>Taneja</over:lastname>
<!--Optional:-->
<over:telephonecontact>0886086375</over:telephonecontact>
<!--Optional:-->
<over:emailaddresscontact>f@xebia.com</over:emailaddresscontact>
<!--Optional:-->
<over:companyname>XEBIA PVT LTD</over:companyname>
<!--Optional:-->
<over:customerid>ABCDEFGH1234</over:customerid>
<!--Optional:-->
<over:contractid>SOAP3EMAIL</over:contractid>
<over:contractaddress>
<!--Optional:-->
<over:address>HARINAGAR</over:address>
<over:housenr>123</over:housenr>
<!--Optional:-->
<over:housenr_ext>123</over:housenr_ext>
<over:postcode>1234AS</over:postcode>
<!--Optional:-->
<over:city>DELHI</over:city>
<!--Optional:-->
<over:country>IND</over:country>
</over:contractaddress>
<over:connectionaddress>
<!--Optional:-->
<over:address>HARINAGAR</over:address>
<over:housenr>123</over:housenr>
<!--Optional:-->
<over:housenr_ext>123</over:housenr_ext>
<over:postcode>1234AS</over:postcode>
<!--Optional:-->
<over:city>DELHI</over:city>
<!--Optional:-->
<over:country>IND</over:country>
</over:connectionaddress>
</over:customerinfo>
<over:wishdatetime>2014-01-14</over:wishdatetime>
<!--Optional:-->
<over:note>TEST</over:note>
</over:v1>
</over:contractterminationrequest>
</over:body>
</over:message>]]]]>><![CDATA[</sch:Text>
            </sch:Message>
         </sch:Messages>
      </sch:SendMessagesRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:credentials>
          <con:username>COINTP10</con:username>
          <con:password>COINTP10</con:password>
          <con:domain xsi:nil="true"/>
          <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
          <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
          <con:preemptive>true</con:preemptive>
          <con:authType>Preemptive</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://coin.nl/SendMessages"/>
        <con:wsrmConfig version="1.2"/>
      </con:call>
      <con:call name="Contract Termination Request Answer" outgoingWss="" incomingWss="" id="73af3a6a-ca5e-4560-819c-8035caf9acee">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>${#Project#SoapUrl}</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="http://coin.nl/ws/schema">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:SendMessagesRequest>
         <sch:Sender>KPN</sch:Sender>
         <sch:Messages>
            <sch:Message>
               <sch:Text><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<message xmlns="http://www.coin.nl/Overstappen_MESSAGES">
  <header>
    <receiver>
      <networkoperator>ZIGGO</networkoperator>
      <serviceprovider>ZIGGO</serviceprovider>
    </receiver>
    <sender>
      <networkoperator>KPN</networkoperator>
      <serviceprovider>KPN</serviceprovider>
    </sender>
    <messageid>ZIGGO-KPN-GUI2SOAP1-01</messageid>
    <timestamp>2014-01-08T12:56:45</timestamp>
  </header>
  <body>
    <contractterminationrequestanswer>
      <v1>
        <dossierid>ZIGGO-KPN-GUI2SOAP1-01</dossierid>
        <blocking>N</blocking>
        <wishdatetime>2014-01-17</wishdatetime>
        <blockingcode>0</blockingcode>
        <note>TEST-ANSWER</note>
      </v1>
    </contractterminationrequestanswer>
  </body>
</message>]]]]>><![CDATA[</sch:Text>
            </sch:Message>
         </sch:Messages>
      </sch:SendMessagesRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:credentials>
          <con:username>Bert</con:username>
          <con:password>Ernie</con:password>
          <con:domain xsi:nil="true"/>
          <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
          <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
          <con:preemptive>true</con:preemptive>
          <con:authType>Preemptive</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://coin.nl/SendMessages"/>
        <con:wsrmConfig version="1.2"/>
      </con:call>
      <con:call name="Multiple Contract Termination Requests" outgoingWss="" incomingWss="" id="ad0bd36e-cbfe-4f7c-bf73-cd36950c1291" wssPasswordType="PasswordText">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>${#Project#SoapUrl}</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="http://coin.nl/ws/schema">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:SendMessagesRequest>
         <sch:Sender>CRY</sch:Sender>
         <sch:Messages>
            <sch:Message>
               <sch:Text><![CDATA[<?xml version="1.0"?>
<message xmlns="http://www.coin.nl/Overstappen_MESSAGES">
<header>
<receiver>
<networkoperator>FARI</networkoperator>
<serviceprovider>FARI</serviceprovider>
</receiver>
<sender>
<networkoperator>CRY</networkoperator>
<serviceprovider>CRY</serviceprovider>
</sender>
<messageid>CRY-FARI-CryFari01-01</messageid>
<timestamp>2014-01-22T13:40:45</timestamp>
</header>
<body>
<contractterminationrequest>
<v1>
<dossierid>CRY-FARI-CryFari01-01</dossierid>
<recipientserviceprovider>CRY</recipientserviceprovider>
<recipientnetworkoperator>CRY</recipientnetworkoperator>
<donornetworkoperator>FARI</donornetworkoperator>
<donorserviceprovider>FARI</donorserviceprovider>
<customerinfo>
<initials>Ms</initials>
<prefix>Priyanka</prefix>
<lastname>Tanjea</lastname>
<telephonecontact>0886086375</telephonecontact>
<emailaddresscontact>f@xebia.com</emailaddresscontact>
<companyname>XEBIA PVT LTD</companyname>
<customerid>ABCDEFGH1234</customerid>
<contractid>CryFari01</contractid>
<contractaddress>
<address>HARINAGAR</address>
<housenr>123</housenr>
<housenr_ext>123</housenr_ext>
<postcode>1234AS</postcode>
<city>DELHI</city>
<country>IND</country>
</contractaddress>
<connectionaddress>
<address>HARINAGAR</address>
<housenr>123</housenr>
<housenr_ext>123</housenr_ext>
<postcode>1234AS</postcode>
<city>DELHI</city>
<country>IND</country>
</connectionaddress>
</customerinfo>
<wishdatetime>2014-02-10</wishdatetime>
<note></note>
</v1>
</contractterminationrequest>
</body>
</message>]]]]>><![CDATA[</sch:Text>
            </sch:Message>
            <sch:Message>
               <sch:Text><![CDATA[<?xml version="1.0"?>
<message xmlns="http://www.coin.nl/Overstappen_MESSAGES">
<header>
<receiver>
<networkoperator>UPC</networkoperator>
<serviceprovider>UPC</serviceprovider>
</receiver>
<sender>
<networkoperator>CRY</networkoperator>
<serviceprovider>CRY</serviceprovider>
</sender>
<messageid>CRY-UPC-CryUpc01-01</messageid>
<timestamp>2014-01-22T13:40:45</timestamp>
</header>
<body>
<contractterminationrequest>
<v1>
<dossierid>CRY-UPC-CryUpc01-01</dossierid>
<recipientserviceprovider>CRY</recipientserviceprovider>
<recipientnetworkoperator>CRY</recipientnetworkoperator>
<donornetworkoperator>UPC</donornetworkoperator>
<donorserviceprovider>UPC</donorserviceprovider>
<customerinfo>
<initials>Ms</initials>
<prefix>Priyanka</prefix>
<lastname>Tanjea</lastname>
<telephonecontact>0886086375</telephonecontact>
<emailaddresscontact>f@xebia.com</emailaddresscontact>
<companyname>XEBIA PVT LTD</companyname>
<customerid>ABCDEFGH1234</customerid>
<contractid>CryUpc01</contractid>
<contractaddress>
<address>HARINAGAR</address>
<housenr>123</housenr>
<housenr_ext>123</housenr_ext>
<postcode>1234AS</postcode>
<city>DELHI</city>
<country>IND</country>
</contractaddress>
<connectionaddress>
<address>HARINAGAR</address>
<housenr>123</housenr>
<housenr_ext>123</housenr_ext>
<postcode>1234AS</postcode>
<city>DELHI</city>
<country>IND</country>
</connectionaddress>
</customerinfo>
<wishdatetime>2014-02-11</wishdatetime>
<note></note>
</v1>
</contractterminationrequest>
</body>
</message>]]]]>><![CDATA[</sch:Text>
            </sch:Message>
            <sch:Message>
               <sch:Text><![CDATA[<?xml version="1.0"?>
<message xmlns="http://www.coin.nl/Overstappen_MESSAGES">
<header>
<receiver>
<networkoperator>TEL2</networkoperator>
<serviceprovider>TEL2</serviceprovider>
</receiver>
<sender>
<networkoperator>CRY</networkoperator>
<serviceprovider>CRY</serviceprovider>
</sender>
<messageid>CRY-TEL2-CryTel201-01</messageid>
<timestamp>2014-01-22T13:40:45</timestamp>
</header>
<body>
<contractterminationrequest>
<v1>
<dossierid>CRY-TEL2-CryTel201-01</dossierid>
<recipientserviceprovider>CRY</recipientserviceprovider>
<recipientnetworkoperator>CRY</recipientnetworkoperator>
<donornetworkoperator>TEL2</donornetworkoperator>
<donorserviceprovider>TEL2</donorserviceprovider>
<customerinfo>
<initials>Ms</initials>
<prefix>Priyanka</prefix>
<lastname>Tanjea</lastname>
<telephonecontact>0886086375</telephonecontact>
<emailaddresscontact>f@xebia.com</emailaddresscontact>
<companyname>XEBIA PVT LTD</companyname>
<customerid>ABCDEFGH1234</customerid>
<contractid>CryTel201</contractid>
<contractaddress>
<address>HARINAGAR</address>
<housenr>123</housenr>
<housenr_ext>123</housenr_ext>
<postcode>1234AS</postcode>
<city>DELHI</city>
<country>IND</country>
</contractaddress>
<connectionaddress>
<address>HARINAGAR</address>
<housenr>123</housenr>
<housenr_ext>123</housenr_ext>
<postcode>1234AS</postcode>
<city>DELHI</city>
<country>IND</country>
</connectionaddress>
</customerinfo>
<wishdatetime>2014-02-12</wishdatetime>
<note></note>
</v1>
</contractterminationrequest>
</body>
</message>]]]]>><![CDATA[</sch:Text>
            </sch:Message>
         </sch:Messages>
      </sch:SendMessagesRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:credentials>
          <con:username>Bert</con:username>
          <con:password>Ernie</con:password>
          <con:domain xsi:nil="true"/>
          <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
          <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
          <con:preemptive>true</con:preemptive>
          <con:authType>Preemptive</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://coin.nl/SendMessages"/>
        <con:wsrmConfig version="1.2"/>
      </con:call>
      <con:call name="Contract Termination Performed" id="6e6b212c-9d53-4340-bc3a-cadf2fccdbe8" outgoingWss="" incomingWss="">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>${#Project#SoapUrl}</con:endpoint>
        <con:request><![CDATA[<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/">
   <SOAP-ENV:Header/>
   <SOAP-ENV:Body>
      <SendMessagesRequest xmlns="http://coin.nl/ws/schema">
         <Sender>CRY</Sender>
         <Messages>
            <Message>
               <Text><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<message xmlns="http://www.coin.nl/Overstappen_MESSAGES">
   <header>
      <receiver>
                  <networkoperator>FARI</networkoperator>
         	              <serviceprovider>FARI</serviceprovider>
               </receiver>
      <sender>
                  <networkoperator>CRY</networkoperator>
         		          <serviceprovider>CRY</serviceprovider>
               </sender>
            <messageid>CRY-FARI-EndFlow01-01</messageid>
            <timestamp>2014-01-23T14:11:18</timestamp>
   </header>
   <body>
      <contractterminationperformed>
         <v1>
         <dossierid>CRY-FARI-EndFlow01-01</dossierid>
                        <recipientserviceprovider>CRY</recipientserviceprovider>
                                    <recipientnetworkoperator>CRY</recipientnetworkoperator>
            			            <donornetworkoperator>FARI</donornetworkoperator>
            			            <donorserviceprovider>FARI</donorserviceprovider>
                        <actualdatetime>2014-01-23T14:11:18</actualdatetime>
                        <note>Endflow_Performed</note>
                     </v1>
      </contractterminationperformed>
   </body>
</message>]]]]>><![CDATA[</Text>
            </Message>
         </Messages>
      </SendMessagesRequest>
   </SOAP-ENV:Body>
</SOAP-ENV:Envelope>]]></con:request>
        <con:credentials>
          <con:username>Bert</con:username>
          <con:password>Ernie</con:password>
          <con:domain xsi:nil="true"/>
          <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
          <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
          <con:authType>Global HTTP Settings</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://coin.nl/SendMessages"/>
        <con:wsrmConfig version="1.2"/>
      </con:call>
      <con:call name="Contract Termination Change" id="b4f976a0-cc99-45df-a7f1-d2aa1fa00928" outgoingWss="" incomingWss="">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>${#Project#SoapUrl}</con:endpoint>
        <con:request><![CDATA[<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/">
   <SOAP-ENV:Header/>
   <SOAP-ENV:Body>
      <SendMessagesRequest xmlns="http://coin.nl/ws/schema">
         <Sender>CRY</Sender>
         <Messages>
            <Message>
               <Text><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<message xmlns="http://www.coin.nl/Overstappen_MESSAGES">
   <header>
      <receiver>
                  <networkoperator>FARI</networkoperator>
         	              <serviceprovider>FARI</serviceprovider>
               </receiver>
      <sender>
                  <networkoperator>CRY</networkoperator>
         		          <serviceprovider>CRY</serviceprovider>
               </sender>
            <messageid>CRY-FARI-EndFlow01-01</messageid>
            <timestamp>2014-01-23T13:19:15</timestamp>
   </header>
   <body>
      <change>
         <v1>
         	<dossierid>CRY-FARI-EndFlow01-01</dossierid>
            <wishdatetime>2014-02-18T15:00:34</wishdatetime>
                        <note>endflow</note>
                     </v1>
      </change>
   </body>
</message>]]]]>><![CDATA[</Text>
            </Message>
         </Messages>
      </SendMessagesRequest>
   </SOAP-ENV:Body>
</SOAP-ENV:Envelope>]]></con:request>
        <con:credentials>
          <con:username>Bert</con:username>
          <con:password>Ernie</con:password>
          <con:domain xsi:nil="true"/>
          <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
          <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
          <con:authType>Global HTTP Settings</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://coin.nl/SendMessages"/>
        <con:wsrmConfig version="1.2"/>
      </con:call>
      <con:call name="Contract Termination Change Answer" id="7ecf7d3b-76e3-4e36-a0a6-bed12f91e92e" outgoingWss="" incomingWss="" timeout="" wssPasswordType="PasswordText">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>${#Project#SoapUrl}</con:endpoint>
        <con:request><![CDATA[<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/">
   <SOAP-ENV:Header/>
   <SOAP-ENV:Body>
      <SendMessagesRequest xmlns="http://coin.nl/ws/schema">
         <Sender>TP10</Sender>
         <Messages>
            <Message>
               <Text><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<message xmlns="http://www.coin.nl/Overstappen_MESSAGES">
   <header>
      <receiver>
                  <networkoperator>TP14</networkoperator>
         	              <serviceprovider>TP14</serviceprovider>
               </receiver>
      <sender>
                  <networkoperator>TP10</networkoperator>
         		          <serviceprovider>TP10</serviceprovider>
               </sender>
            <messageid>TP14-TP10-ALSBVNZRI-06</messageid>
            <timestamp>${=String.format('%tFT%<tT', new Date())}</timestamp>
   </header>
   <body>
      <changeanswer>
         <v2>
         	<dossierid>TP14-TP10-ALSBVNZRI-01</dossierid>
         	<blocking>N</blocking>
         	            <wishdatetime>2016-02-27T13:32:16</wishdatetime>
                      <proposeddatetime>2016-02-27T13:32:16</proposeddatetime>
                      <note>TESTWITHCHTCHAOK AFter blocking</note>
                     </v2>
      </changeanswer>
   </body>
</message>]]]]>><![CDATA[</Text>
            </Message>
         </Messages>
      </SendMessagesRequest>
   </SOAP-ENV:Body>
</SOAP-ENV:Envelope>]]></con:request>
        <con:credentials>
          <con:username>COINTP10</con:username>
          <con:password>COINTP10</con:password>
          <con:domain xsi:nil="true"/>
          <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
          <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
          <con:authType>Global HTTP Settings</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://coin.nl/SendMessages"/>
        <con:wsrmConfig version="1.2"/>
      </con:call>
      <con:call name="Contract Termination Cancel" id="fed57306-8fb5-4471-85e0-47e2f5a6d1d8" outgoingWss="" incomingWss="">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>${#Project#SoapUrl}</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="http://coin.nl/ws/schema">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:SendMessagesRequest>
         <sch:Sender>ZIGGO</sch:Sender>
         <sch:Messages>
            <sch:Message>
               <sch:Text><![CDATA[<?xml version="1.0"?>
<message xmlns="http://www.coin.nl/Overstappen_MESSAGES">
<header>
<receiver>
<!--Optional:-->
<networkoperator>KPN</networkoperator>
<!--Optional:-->
<serviceprovider>KPN</serviceprovider>
</receiver>
<sender>
<!--Optional:-->
<networkoperator>ZIGGO</networkoperator>
<!--Optional:-->
<serviceprovider>ZIGGO</serviceprovider>
</sender>
<!--Optional:-->
<messageid>ZIGGO-KPN-EndFlow01-01</messageid>
<timestamp>2014-01-28T14:30:00</timestamp>
</header>
<body>
    <cancel>
      <v1>
        <dossierid>ZIGGO-KPN-EndFlow01-01</dossierid>
        <note>Endflow_Cancel</note>
      </v1>
    </cancel>
</body>
</message>]]]]>><![CDATA[</sch:Text>
            </sch:Message>
         </sch:Messages>
      </sch:SendMessagesRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:credentials>
          <con:username>Bert</con:username>
          <con:password>Ernie</con:password>
          <con:domain xsi:nil="true"/>
          <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
          <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
          <con:authType>Global HTTP Settings</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://coin.nl/SendMessages"/>
        <con:wsrmConfig version="1.2"/>
      </con:call>
    </con:operation>
  </con:interface>
  <con:testSuite name="3.1.2_SunnyDay-SOAP_DB_Validations" id="ac8a230e-495c-4202-a75c-c2585b7cd3d1">
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CTR-CTRA ok-CTCH-CTCHA-CTC" searchProperties="true" id="511e76c3-4e7f-452e-ba98-325502afa438" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:description>CDV-655 - Disabled Xpath: assertMSL_MAIL_FROM_ADDRESS from all message logging steps
XPath: assertSXM_XML_MESSAGE---- Need to implement this assertion in all SXM steps</con:description>
      <con:settings>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">1000</con:setting>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting>
      </con:settings>
      <con:testStep type="request" name="CTR-Sunny Day" id="0b0e7832-0b7f-489a-9f25-0a3babcea96c">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>CompWebserviceSoap11</con:interface>
          <con:operation>SendMessages</con:operation>
          <con:request name="CTR-Sunny Day" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordText" id="3aa22f8f-37c1-4ea2-ba88-b80068a3761f">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#SoapUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="http://coin.nl/ws/schema">\r
   <soapenv:Header/>
   <soapenv:Body>
      <sch:SendMessagesRequest>
         <sch:Sender>${#TestSuite#recipient}</sch:Sender>
         <sch:Messages>
            <sch:Message>
               <sch:Text><![CDATA[<?xml version="1.0"?>
<message xmlns="http://www.coin.nl/Overstappen_MESSAGES">
<header>
<receiver>
<!--Optional:-->
<networkoperator>${#TestSuite#donor}</networkoperator>
<!--Optional:-->
<serviceprovider>${#TestSuite#donor}</serviceprovider>
</receiver>
<sender>
<!--Optional:-->
<networkoperator>${#TestSuite#recipient}</networkoperator>
<!--Optional:-->
<serviceprovider>${#TestSuite#recipient}</serviceprovider>
</sender>
<!--Optional:-->
<messageid>${#TestSuite#recipient}-${#TestCase#contractId}-01</messageid>
<timestamp>${#TestSuite#TimestampNOW}</timestamp>
</header>
<body>
<contractterminationrequest>
<${#TestSuite#soapVersion}>
<dossierid>${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01</dossierid>
<!--Optional:-->
<recipientserviceprovider>${#TestSuite#recipient}</recipientserviceprovider>
<!--Optional:-->
<recipientnetworkoperator>${#TestSuite#recipient}</recipientnetworkoperator>
<!--Optional:-->
<donornetworkoperator>${#TestSuite#donor}</donornetworkoperator>
<!--Optional:-->
<donorserviceprovider>${#TestSuite#donor}</donorserviceprovider>
<wishdatetime>${#TestCase#wishdate}</wishdatetime>
${#TestSuite#dossierType}
${#TestSuite#compensationOK}
<name>COIN</name>
<addressblock>
 	<postcode>1389SS</postcode>
	<housenr>99999</housenr>
</addressblock>
<numberseries>
     <start>0173112233</start>
     <end>0173112233</end>
</numberseries>
<validationblock>
    <name>contractid</name>
    <value>2-${#TestCase#contractID}</value>
 </validationblock>
<note>Sunny day-sent ${#TestSuite#soapVersion} expect ${#TestSuite#donorSoapVersion}-linenr. ${#TestSuite#lineNumber}</note>
</${#TestSuite#soapVersion}>
</contractterminationrequest>
</body>
</message>]]]]>><![CDATA[</sch:Text>
            </sch:Message>
         </sch:Messages>
      </sch:SendMessagesRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="XPath Match" name="Match content of [ns2:TransactionId] using RegEx" id="1c471417-807a-4012-a734-b2dd5be94c8f">
              <con:configuration>
                <path>declare namespace ns2='http://coin.nl/ws/schema';
//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]/text()</path>
                <content>*</content>
                <allowWildcards>true</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" name="Check count of [ns2:TransactionId]" id="345c96a3-89a0-476e-9875-b0c18e04ef5b">
              <con:configuration>
                <path>declare namespace ns2='http://coin.nl/ws/schema';
count( //ns2:SendMessagesResponse/ns2:TransactionId)</path>
                <content>1</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert node [ns2:TransactionId]" id="63f77b9d-d209-4d74-ad56-a26982ab75c5">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
//def groovyUtilsPro = new com.eviware.soapui.support.GroovyUtilsPro( context )

def holder = new XmlHolder( messageExchange.responseContentAsXml )
holder.namespaces["ns2"] = "http://coin.nl/ws/schema"
def transactionId = holder.getNodeValue( "//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]" )
messageExchange.modelItem.testStep.testCase.setPropertyValue("transactionId",transactionId)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="3067bafd-90b4-487d-afcb-66f0d1d4f45a" name="Groovy: SaveCtrCreateTime">
              <con:configuration>
                <scriptText><![CDATA[import com.eviware.soapui.support.XmlHolder
import java.util.Date;
import java.text.SimpleDateFormat;
def str = messageExchange.getRequestContentAsXml()
log.info str
def holder = new XmlHolder(str)

def ctrSentMessage = str.substring(str.lastIndexOf("<soapenv:Body>")+14, str.lastIndexOf("</soapenv:Body>"))
ctrSentMessage = ctrSentMessage.replace("<sch:SendMessagesRequest>", "<?xml version=\"1.0\" encoding=\"UTF-8\"?><sch:SendMessagesRequest xmlns:sch=\"http://coin.nl/ws/schema\">")
messageExchange.modelItem.testStep.testCase.setPropertyValue("ctrSentMessage",ctrSentMessage.trim())
log.info ctrSentMessage

def mainMessage = holder.getNodeValue("//sch:Text")
messageExchange.modelItem.testStep.testCase.setPropertyValue("ctrMainMessage",mainMessage)

def createTime = mainMessage.substring(mainMessage.lastIndexOf("<timestamp>")+11, mainMessage.lastIndexOf("</timestamp>"))
def time = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").parse(createTime)
def Id = time.format("yyyy-MM-dd HH:mm:ss")
messageExchange.modelItem.testStep.testCase.setPropertyValue("ctrCreateTime",Id)]]></scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#TestSuite#recipientUserName}</con:username>
              <con:password>${#TestSuite#recipientPassWord}</con:password>
              <con:domain xsi:nil="true"/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://coin.nl/SendMessages"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_ST Table-CTR" id="6376f1c2-d17d-45d2-8d34-913ab4d86413">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_transactions 
where st_transaction_id = '${#TestCase#transactionId}'</con:query>
          <con:assertion type="JDBC Status" id="9cbb836e-9f7a-4281-b9f5-a9615f9ee803" name="JDBC Status"/>
          <con:assertion type="GroovyScriptAssertion" id="77af631e-a991-48c5-b7c6-43b4c54de0ad" name="Script: store SoapTransaction.id">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "Id");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify ST_SEND_RECEIVED" id="9db0e630-c611-4fc1-b0bc-fb6028a6a7c3">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_SEND_RECEIVED[1]</path>
              <content>received</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="dadbc5da-a584-42c6-8a0c-81209ad1d2a0" name="Xpath: assert ST_SENDER">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_SENDER[1]</path>
              <content>${#TestSuite#Recipient}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="d2fb6ceb-f46e-41fb-8cfd-fa27e17aff7e" name="Xpath: asseretST_RECEIVER">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_RECEIVER[1]</path>
              <content>COIN</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="7b648e4f-7909-400c-b3d4-811062a73dbc" name="Script: assert ST_MESSAGE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.compareMessageString(holder, messageExchange, "ctrSentMessage", "//Results[1]/ResultSet[1]/Row[1]/ST_MESSAGE[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="f61b627d-10c9-4900-94d4-2e5659d70dfc" name="Script: assert ST_MESSAGE_DATETIME">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/ST_MESSAGE_DATETIME[1]/text()", 1);
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="d2c7ca97-d41e-4686-9ab5-f4be017d8f55" name="Xpath: assert ST_STATUS">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_STATUS/text()</path>
              <content>Done</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="3adc817c-ca54-48c5-8a44-3ee683e5b54d" name="Script: assert ST_STATUS_DATETIME">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/ST_STATUS_DATETIME[1]/text()", 1);
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="befe94fa-90f9-4f84-96d3-ba20e39f5ce2" name="Script: assert CREATEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/CREATEDDATE[1]/text()", 1);
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d953429f-d92b-4ebd-a854-da1e2c0c005b" name="Script: assert MODIFIEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/MODIFIEDDATE[1]/text()", 1);
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="9605588d-6ac7-40a4-95dc-b9297e4fed60" name="Xpath: Verify ST_TECHNICAL_SENDER">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_TECHNICAL_SENDER[1]</path>
              <content>${#TestSuite#Recipient}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="3bd0d603-4049-4c91-be6d-a9cf32abd044" name="Xpath: assert ST_USER_NAME">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_NAME/text()</path>
              <content>${#TestSuite#recipientUserName}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="aa455118-bfc1-4653-969e-bf0bc1a97b04" name="Xpath: assert ST_USER_IP" disabled="true">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_IP/text()</path>
              <content>${#Project#UserIP}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Wait For Poller" id="bf47898a-68c5-46c2-bc07-5f74eafc556d">
        <con:settings/>
        <con:config>
          <delay>${#TestSuite#PollTime}</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_RSXM Table_CTR" id="106514ae-9d13-4437-a4b1-017151661085">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.raw_soap_xml_messages where rsxm_st_id = '${#TestCase#Id}'</con:query>
          <con:assertion type="JDBC Status" id="93200de3-311a-45e4-9354-8786e5f8cb4b" name="JDBC Status"/>
          <con:assertion type="XPath Match" name="Xpath: assert RSXM_XML_MESSAGE" id="14d90270-6f91-4150-993a-d24f2adbd507">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/RSXM_XML_MESSAGE[1]/text()</path>
              <content>${#TestCase#ctrMainMessage}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert RSXM_STATUS" id="14d90270-6f91-4150-993a-d24f2adbd507">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/RSXM_STATUS[1]</path>
              <content>Done</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="a71e9107-d908-4e98-8bdc-c33775015ef6" name="Script: SaveRSXM_DM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/RSXM_DM_ID[1]", "ctrDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="77940cfd-635d-4d4d-8fb6-b1e722ea02df" name="Script: assert CREATEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/CREATEDDATE[1]/text()", 1);
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="ffeaa661-dd52-4035-9c1d-4eb90eb44d66" name="Script: assert MODIFIEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/MODIFIEDDATE[1]/text()", 1);
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert PROCESS_DATETIME" id="14d90270-6f91-4150-993a-d24f2adbd507">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/PROCESS_DATETIME[1]</path>
              <content>&lt;PROCESS_DATETIME/></content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert ACTIVE" id="14d90270-6f91-4150-993a-d24f2adbd507">
            <con:configuration>
              <path>//Results/ResultSet/Row[1]/ACTIVE/text()</path>
              <content>t</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="89fb7a13-1101-4c03-bf67-f2b361815f18" name="Script: SaveRSXM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctrRSXMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table_CTR" id="9680464e-044a-4a9a-9d35-efa3cd8ef52e">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier where 
ctd_switchid = '${#TestSuite#Recipient}-${#TestSuite#Donor}-${#TestCase#ContractId}-01'</con:query>
          <con:assertion type="JDBC Status" id="1841841d-972a-4bf0-bc88-c1ad0b5ede11" name="JDBC Status"/>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: assert CTD_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def ctdid = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctdId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="5cd23510-e4af-441e-8075-a585f89691fb" name="Xpath: assert CTD_SPR_RECIPIENT_ID">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_SPR_RECIPIENT_ID[1]/text()</path>
              <content>${#TestSuite#recipientId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="796567b6-e3ec-4dc0-a183-0fa21a9b4ee1" name="Xpath: assert CTD_SPR_DONOR_ID">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_SPR_DONOR_ID[1]/text()</path>
              <content>${#TestSuite#donorId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="af76937d-74c4-4027-b279-71130cbec99e" name="Xpath: Xpath : assert CTD_PRV_ID">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_PRV_ID[1]/text()</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_EBC_ID">
            <con:configuration>
              <token>&lt;CTD_EBC_ID/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert CTD_DOSSIER_STATUS" id="ac17d9f6-9653-435c-bd0c-9af6917f2aa6">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_DOSSIER_STATUS[1]/text()</path>
              <content>Pending</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert CTD_PROCESS_STATUS" id="ede8cc08-99ab-46ca-baf4-97e9f0895428">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_PROCESS_STATUS[1]/text()</path>
              <content>Request</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="0f11b543-a937-43a8-a6e6-5fa3f92e784f" name="Xpath: assert CTD_CONTRACTID">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CONTRACTID[1]/text()</path>
              <content>2-${#TestCase#contractID}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="5cd23510-e4af-441e-8075-a585f89691fb" name="Xpath: assert CTD_REQUESTEDDATETIME">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_REQUESTEDDATETIME[1]/text()</path>
              <content>${#TestCase#wishDateWithoutT}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="5cd23510-e4af-441e-8075-a585f89691fb" name="Xpath: assert CTD_CTR_WISHDATETIME">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CTR_WISHDATETIME[1]/text()</path>
              <content>${#TestCase#wishDateWithoutT}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CTRA_PROPOSEDDATETIME">
            <con:configuration>
              <token>&lt;CTD_CTRA_PROPOSEDDATETIME/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_EMAILADDRESSCONTACT">
            <con:configuration>
              <token>&lt;CTD_EMAILADDRESSCONTACT/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_TELEPHONECONTACT">
            <con:configuration>
              <token>&lt;CTD_TELEPHONECONTACT/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="5cd23510-e4af-441e-8075-a585f89691fb" name="Xpath: assert CTD_CONTRACTINITIALS">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CONTRACTINITIALS[1]/text()</path>
              <content>A</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CONTRACTPREFIX">
            <con:configuration>
              <token>&lt;CTD_CONTRACTPREFIX/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="5cd23510-e4af-441e-8075-a585f89691fb" name="Xpath: assert CTD_CONTRACTLASTNAME">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CONTRACTLASTNAME[1]/text()</path>
              <content>COIN</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="5cd23510-e4af-441e-8075-a585f89691fb" name="Xpath: assert CTD_CONTRACTZIPCODE">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CONTRACTZIPCODE[1]/text()</path>
              <content>1389SS</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="5cd23510-e4af-441e-8075-a585f89691fb" name="Xpath: assert CTD_CONTRACTHOUSENUMBER">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CONTRACTHOUSENUMBER[1]/text()</path>
              <content>99999</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="5cd23510-e4af-441e-8075-a585f89691fb" name="Xpath: assert CTD_NOTE">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_NOTE[1]/text()</path>
              <content>Sunny day-sent ${#TestSuite#soapVersion} expect ${#TestSuite#donorSoapVersion}-linenr. ${#TestSuite#lineNumber}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="5cd23510-e4af-441e-8075-a585f89691fb" name="Xpath: assert CTD_CTP_MIGRATION">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CTP_MIGRATION[1]/text()</path>
              <content>f</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="5cd23510-e4af-441e-8075-a585f89691fb" name="Xpath: assert ACTIVE">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ACTIVE[1]/text()</path>
              <content>t</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="61f553a7-28ef-45c3-a740-e8509a83fd72" name="Script: assert CREATEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/CREATEDDATE[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="61f553a7-28ef-45c3-a740-e8509a83fd72" name="Script: assert MODIFIEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/MODIFIEDDATE[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="61f553a7-28ef-45c3-a740-e8509a83fd72" name="Script: assert CTD_DM_LAST_MSGDATETIME">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/CTD_DM_LAST_MSGDATETIME[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CTP_ACTUALDATETIME">
            <con:configuration>
              <token>&lt;CTD_CTP_ACTUALDATETIME/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CUSTOMERID">
            <con:configuration>
              <token>&lt;CTD_CUSTOMERID/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CONTRACTCOMPANYNAME">
            <con:configuration>
              <token>&lt;CTD_CONTRACTCOMPANYNAME/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CONTRACTSTREET">
            <con:configuration>
              <token>&lt;CTD_CONTRACTSTREET/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CONTRACTCITY">
            <con:configuration>
              <token>&lt;CTD_CONTRACTCITY/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CONTRACTCOUNTRY">
            <con:configuration>
              <token>&lt;CTD_CONTRACTCOUNTRY/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CONNECTIONSTREET">
            <con:configuration>
              <token>&lt;CTD_CONNECTIONSTREET/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CONNECTIONCITY">
            <con:configuration>
              <token>&lt;CTD_CONNECTIONCITY/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CONNECTIONCOUNTRY">
            <con:configuration>
              <token>&lt;CTD_CONNECTIONCOUNTRY/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="5cd23510-e4af-441e-8075-a585f89691fb" name="Xpath: assert CTD_CTP_BUFFERING">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CTP_BUFFERING[1]/text()</path>
              <content>${#TestSuite#par_ctp_buffering}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_NPR_ID">
            <con:configuration>
              <token>&lt;CTD_NPR_ID/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_IFT_ID">
            <con:configuration>
              <token>&lt;CTD_IFT_ID/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CTCH_WISHDATETIME">
            <con:configuration>
              <token>&lt;CTD_CTCH_WISHDATETIME/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CTCHA_PROPOSEDDATETIME">
            <con:configuration>
              <token>&lt;CTD_CTCHA_PROPOSEDDATETIME/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="8024a1e9-de83-489d-9150-905863ad0ef2" name="Xpath: assert CTD_CONTRACT_EARLYTERMINATION">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CONTRACT_EARLYTERMINATION[1]/text()</path>
              <content>f</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CONTRACTADDRESS">
            <con:configuration>
              <token>&lt;CTD_CONTRACTADDRESS/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CONNECTIONADDRESS">
            <con:configuration>
              <token>&lt;CTD_CONNECTIONADDRESS/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_INFRA_ID">
            <con:configuration>
              <token>&lt;CTD_INFRA_ID/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="61f553a7-28ef-45c3-a740-e8509a83fd72" name="Script: assert CTD_VERSION">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/CTD_VERSION[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="f36a5fdb-2755-403f-8a87-492c9edeef39" name="Xpath: assert CTD_CONTRACTHOUSENUMBEREXT">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CONTRACTHOUSENUMBEREXT</path>
              <content>&lt;CTD_CONTRACTHOUSENUMBEREXT/></content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="f36a5fdb-2755-403f-8a87-492c9edeef39" name="Xpath: assert CTD_CONNECTIONZIPCODE">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CONNECTIONZIPCODE[1]/text()</path>
              <content>1389SS</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="f36a5fdb-2755-403f-8a87-492c9edeef39" name="Xpath: assert CTD_CONNECTIONHOUSENUMBER">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CONNECTIONHOUSENUMBER[1]/text()</path>
              <content>99999</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="f36a5fdb-2755-403f-8a87-492c9edeef39" name="Xpath: assert CTD_CONNECTIONHOUSENUMBEREXT">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CONNECTIONHOUSENUMBEREXT</path>
              <content>&lt;CTD_CONNECTIONHOUSENUMBEREXT/></content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="f36a5fdb-2755-403f-8a87-492c9edeef39" name="Xpath: assert CTD_CTR_DT_ID">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CTR_DT_ID[1]/text()</path>
              <content>${#TestSuite#ctd_ctr_dt_id}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="f36a5fdb-2755-403f-8a87-492c9edeef39" name="Xpath: assert CTD_CTRA_DT_ID">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CTRA_DT_ID[1]</path>
              <content>&lt;CTD_CTRA_DT_ID/></content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="f36a5fdb-2755-403f-8a87-492c9edeef39" name="Xpath: assert CTD_CONTRACT_EARLYTERMINATION">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CONTRACT_EARLYTERMINATION[1]/text()</path>
              <content>${#TestSuite#ctd_contract_earlytermination}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTR" id="9679ec52-b3a7-4ed8-806c-9d5969407db4">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where DM.id=${#TestCase#ctrDMId} 
order by createddate desc</con:query>
          <con:assertion type="JDBC Status" id="0270de28-900d-4d60-920c-4ca5f131013f" name="JDBC Status"/>
          <con:assertion type="XPath Match" name="Xpath: assert DM_CTD_ID" id="ac17d9f6-9653-435c-bd0c-9af6917f2aa6">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/DM_CTD_ID/text()</path>
              <content>${#TestCase#ctdId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e13d4d4f-30f6-4c9c-9b09-26cbc1d409e3" name="Contains: assert DM_EBC_ID">
            <con:configuration>
              <token>&lt;DM_EBC_ID/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b1ecf376-5d04-44ad-b5ff-2f3471c1c8f6" name="Xpath: assert DM_MST_ID">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/DM_MST_ID/text()</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b1ecf376-5d04-44ad-b5ff-2f3471c1c8f6" name="Xpath: assert DM_IT_ID">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/DM_IT_ID/text()</path>
              <content>${#TestSuite#recipient_soap_interface_id}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert DM_MESSAGE_STATUS" id="ac17d9f6-9653-435c-bd0c-9af6917f2aa6">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/DM_MESSAGE_STATUS/text()</path>
              <content>0</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert DM_MSGIDENTFIER" id="ac17d9f6-9653-435c-bd0c-9af6917f2aa6">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/DM_MSGIDENTFIER/text()</path>
              <content>${#TestSuite#recipient}-${#TestCase#contractId}-01</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="464c0c26-2264-46e1-84cd-16df6b706adb" name="Script: assert DM_MSGDATETIME">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/DM_MSGDATETIME[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert DM_DATETIME" id="ac17d9f6-9653-435c-bd0c-9af6917f2aa6">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/DM_DATETIME/text()</path>
              <content>${#TestCase#wishDateWithoutT}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert DM_NOTE" id="ac17d9f6-9653-435c-bd0c-9af6917f2aa6">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/DM_NOTE/text()</path>
              <content>Sunny day-sent ${#TestSuite#soapVersion} expect ${#TestSuite#donorSoapVersion}-linenr. ${#TestSuite#lineNumber}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert DM_ITERATION_COUNT" id="ac17d9f6-9653-435c-bd0c-9af6917f2aa6">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/DM_ITERATION_COUNT/text()</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert ACTIVE" id="ac17d9f6-9653-435c-bd0c-9af6917f2aa6">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ACTIVE/text()</path>
              <content>t</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="464c0c26-2264-46e1-84cd-16df6b706adb" name="Script: assert CREATEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/CREATEDDATE[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="464c0c26-2264-46e1-84cd-16df6b706adb" name="Script: assert MODIFIEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/MODIFIEDDATE[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="52130445-47ca-4d09-989c-f8a7f53f9ff7" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctrDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DP Table_CTR" id="13519ece-fd2c-482f-8d25-5be2546d3820">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select dossier_phonenumbers.dp_ctd_id, dossier_phonenumbers.dp_numberserie_start,dossier_phonenumbers.dp_numberserie_start,dossier_phonenumbers.dp_numberserie_end,
dossier_phonenumbers.active,dossier_phonenumbers.createddate,dossier_phonenumbers.modifieddate
from overstappen.dossier_phonenumbers left join overstappen.contract_termination_dossier on dossier_phonenumbers.dp_ctd_id = contract_termination_dossier.id
where dp_ctd_id = cast('${#TestCase#ctdId}' as integer)</con:query>
          <con:assertion type="JDBC Status" id="0270de28-900d-4d60-920c-4ca5f131013f" name="JDBC Status"/>
          <con:assertion type="XPath Match" name="Xpath: assert DP_CTD_ID" id="ac17d9f6-9653-435c-bd0c-9af6917f2aa6">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/DP_CTD_ID/text()</path>
              <content>${#TestCase#ctdId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert DP_NUMBERSERIE_START" id="ac17d9f6-9653-435c-bd0c-9af6917f2aa6">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/DP_NUMBERSERIE_START/text()</path>
              <content>0173112233</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert DP_NUMBERSERIE_END" id="ac17d9f6-9653-435c-bd0c-9af6917f2aa6">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/DP_NUMBERSERIE_END/text()</path>
              <content>0173112233</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert ACTIVE" id="ac17d9f6-9653-435c-bd0c-9af6917f2aa6">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ACTIVE/text()</path>
              <content>t</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="55185d04-4a14-42b5-ac20-92446d7c7bd2" name="Script: assert CREATEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/CREATEDDATE[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="55185d04-4a14-42b5-ac20-92446d7c7bd2" name="Script: assert MODIFIEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/MODIFIEDDATE[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DV Table_CTR" id="8b237192-9fa4-48dd-912c-c6dffe3aee57">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select dossier_validations.dv_ctd_id,dossier_validations.dv_name, dossier_validations.dv_value,dossier_validations.active,
dossier_validations.createddate,dossier_validations.modifieddate from overstappen.dossier_validations
left join overstappen.contract_termination_dossier on dossier_validations.dv_ctd_id = contract_termination_dossier.id
where dv_ctd_id = cast('${#TestCase#ctdId}' as integer)</con:query>
          <con:assertion type="JDBC Status" id="0270de28-900d-4d60-920c-4ca5f131013f" name="JDBC Status"/>
          <con:assertion type="XPath Match" name="Xpath: assert DV_CTD_ID" id="ac17d9f6-9653-435c-bd0c-9af6917f2aa6">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/DV_CTD_ID/text()</path>
              <content>${#TestCase#ctdId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert DV_NAME" id="ac17d9f6-9653-435c-bd0c-9af6917f2aa6">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/DV_NAME/text()</path>
              <content>contractid</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert DV_VALUE" id="ac17d9f6-9653-435c-bd0c-9af6917f2aa6">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/DV_VALUE/text()</path>
              <content>2-${#TestCase#contractID}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert ACTIVE" id="ac17d9f6-9653-435c-bd0c-9af6917f2aa6">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ACTIVE/text()</path>
              <content>t</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="7a25f600-0aaa-4afb-8893-55c763ec3f17" name="Script: assert CREATEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/CREATEDDATE[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="7a25f600-0aaa-4afb-8893-55c763ec3f17" name="Script: assert MODIFIEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/MODIFIEDDATE[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_MSL Table_CTR" id="c64f11d5-fa69-4c1b-bcc7-4b42bb88e3c4">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>Select * from overstappen.message_logging where 
msl_soap_transaction_id = '${#TestCase#transactionId}'</con:query>
          <con:assertion type="JDBC Status" id="e095441a-3cf8-4288-8e40-4300718feece" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="90de6c58-ce01-40f7-8601-320c181b4c6a" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6f97994c-fe88-4225-a5fe-6b03e5f2f4df" name="Xpath: assert MSL_MSGIDENTIFIER">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_MSGIDENTIFIER/text()</path>
              <content>${#TestSuite#recipient}-${#TestCase#contractId}-01</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d64191b1-b311-474b-8343-c036a85b7506" name="Script: assert TIMESTAMP">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/MSL_TIMESTAMP[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="600e79cd-a35e-4f1a-8285-d8ffbfca6a9c" name="Contains: assert MSL_MAIL_SUBJECT">
            <con:configuration>
              <token>&lt;MSL_MAIL_SUBJECT/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6f97994c-fe88-4225-a5fe-6b03e5f2f4df" name="Xpath: assert MSL_MAIL_FROM_ADDRESS">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_MAIL_FROM_ADDRESS</path>
              <content>&lt;MSL_MAIL_FROM_ADDRESS/></content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="600e79cd-a35e-4f1a-8285-d8ffbfca6a9c" name="Contains: assert MSL_MAIL_TO_ADDRESS">
            <con:configuration>
              <token>&lt;MSL_MAIL_TO_ADDRESS/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6f97994c-fe88-4225-a5fe-6b03e5f2f4df" name="Xpath: assert MSL_CTD_ID">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_CTD_ID/text()</path>
              <content>${#TestCase#ctdId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6f97994c-fe88-4225-a5fe-6b03e5f2f4df" name="Xpath: assert MSL_DM_ID">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_DM_ID/text()</path>
              <content>${#TestCase#ctrDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6f97994c-fe88-4225-a5fe-6b03e5f2f4df" name="Xpath: assert MSL_IT_ID">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_IT_ID/text()</path>
              <content>${#TestSuite#recipient_ctr_interface_id}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert MSL_CLC_ID]" id="e99eef8e-047f-4dff-930b-7b92f2348249">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/MSL_CLC_ID[1]/text()</path>
              <content>57</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="600e79cd-a35e-4f1a-8285-d8ffbfca6a9c" name="Contains: assert MSL_MAIL_MESSAGE_ID">
            <con:configuration>
              <token>&lt;MSL_MAIL_MESSAGE_ID/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="af9e3913-4e23-4232-9d26-e5b4f37f31f5" name="Contains: assert MSL_LOG">
            <con:configuration>
              <token>&lt;MSL_LOG>503 - Marking message as commit success - Dossier Message Saved successfully</token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="31361619-e64f-4ff3-b185-786e5879ac46" name="Contains: assert MSL_MAIL_MESSAGE_BLOB">
            <con:configuration>
              <token>&lt;MSL_MAIL_MESSAGE_BLOB/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6f97994c-fe88-4225-a5fe-6b03e5f2f4df" name="Xpath: assert MSL_SOAP_MESSAGE_BLOB">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_SOAP_MESSAGE_BLOB/text()</path>
              <content>${#TestCase#ctrMainMessage}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6f97994c-fe88-4225-a5fe-6b03e5f2f4df" name="Xpath: assert ACTIVE">
            <con:configuration>
              <path>/Results/ResultSet/Row/ACTIVE/text()</path>
              <content>t</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d64191b1-b311-474b-8343-c036a85b7506" name="Script: assert CREATEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/CREATEDDATE[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d64191b1-b311-474b-8343-c036a85b7506" name="Script: assert MODIFIEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/MODIFIEDDATE[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6f97994c-fe88-4225-a5fe-6b03e5f2f4df" name="Xpath: assert MSL_FROM_SPR_CODE">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_FROM_SPR_CODE/text()</path>
              <content>${#TestSuite#recipient}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6f97994c-fe88-4225-a5fe-6b03e5f2f4df" name="Xpath: assert MSL_TO_SPR_CODE">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_TO_SPR_CODE/text()</path>
              <content>${#TestSuite#DONOR}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6f97994c-fe88-4225-a5fe-6b03e5f2f4df" name="Xpath: assert MSL_ADMIN">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_ADMIN/text()</path>
              <content>f</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6f97994c-fe88-4225-a5fe-6b03e5f2f4df" name="Xpath: assert MSL_ST_ID">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_ST_ID/text()</path>
              <content>${#TestCase#Id}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_CheckOutGoingMsgType" id="34ab46bb-a137-4a1e-8d45-66ed0c773810">
        <con:settings/>
        <con:config>
          <script>def outtype = testRunner.testCase.testSuite.getPropertyValue("recipientOutMsg")

if (outtype == 'EMAIL') {
    	  testRunner.gotoStepByName( "JDBC_SXM Table_NoRecord_CTR")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Wait For Send Poller" id="29193a65-5296-4c96-93b8-4ca503a2b0e6">
        <con:settings/>
        <con:config>
          <delay>${#TestSuite#PollTime}</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_ST Table_Send_CTR" id="001c4e09-8400-4c14-a049-66094a4421e4">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_transactions 
where st_sender='${#TestSuite#recipient}' 
and st_receiver='${#TestSuite#donor}' 
and st_send_received='SEND' 
and st_message like '%${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01%'
and id>${#TestCase#Id}</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [ST_TRANSACTION_ID]" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//ST_TRANSACTION_ID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify SEND Status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//ST_SEND_RECEIVED</path>
              <content>SEND</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" name="Contains: Contains" id="a1e1b0ed-fff7-4f8c-9eba-dee62ae7b198">
            <con:configuration>
              <token>contractterminationrequest</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="40fa4a9b-34bc-47c5-a651-8b225e523334" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="d61de3ac-475a-43e4-aaf5-8b421c411464" name="Xpath: Verify Sender">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_SENDER[1]</path>
              <content>${#TestSuite#Recipient}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="96350074-db6f-467f-9402-f351c4e3eb1e" name="Xpath: Verify Receiver">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_RECEIVER[1]</path>
              <content>${#TestSuite#donor}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple NotContains" id="d4f7f14c-500e-4519-ad2b-89ff5e57a404" name="NotContains: Technical Sender">
            <con:configuration>
              <token>&lt;ST_TECHNICAL_SENDER></token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple NotContains" id="d4f7f14c-500e-4519-ad2b-89ff5e57a404" name="NotContains: User_Name">
            <con:configuration>
              <token>&lt;ST_USER_NAME></token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple NotContains" id="d4f7f14c-500e-4519-ad2b-89ff5e57a404" name="NotContains: USER_IP">
            <con:configuration>
              <token>&lt;ST_USER_IP></token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="b0785e66-97d6-48d3-93b8-52bf2e298f3b" name="Script: Verify Message_DATETIME">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/ST_MESSAGE_DATETIME[1]/text()", 1);
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify Status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//ST_STATUS</path>
              <content>Done</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="0cd1ca74-fcf1-46d9-974c-fe9be6b2d13b" name="Script: Verify ST_STATUS_DATETIME">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/ST_STATUS_DATETIME[1]/text()", 1);
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_CTR" id="e00318c5-c48c-4770-bc4c-916ae2ed86cf">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where sxm_dm_id=${#TestCase#ctrDMId}</con:query>
          <con:assertion type="JDBC Status" id="cdeae0b1-5642-4ec0-840c-0a705c7b1cd5" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="0c3bcb6d-1881-4b8e-beef-cccc4b6464cb" name="Xpath: assert SXM_SENDER">
            <con:configuration>
              <path>/Results/ResultSet/Row/SXM_SENDER/text()</path>
              <content>${#TestSuite#recipient}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="ab6a2cb2-f76e-4cd5-9122-d9d25f50d4e6" name="Xpath: assert SXM_RECEIVER">
            <con:configuration>
              <path>/Results/ResultSet/Row/SXM_RECEIVER/text()</path>
              <content>${#TestSuite#donor}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="0556b0e2-dbbc-4407-aae9-71a1337500f5" name="Xpath: assert SXM_XML_MESSAGE_TYPE">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/SXM_XML_MESSAGE_TYPE[1]</path>
              <content>Request</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="1d758de8-13c5-4a3c-94a0-914b3b7ed6a9" name="Xpath: assert SXM_XML_MESSAGE" disabled="true">
            <con:configuration>
              <path/>
              <content/>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="e31eb762-26ba-4058-b8dc-b5c75f834730" name="Script: Xpath: assert SXM_XML_MESSAGE_DATETIME">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/SXM_XML_MESSAGE_DATETIME[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="f7a96af5-e0ab-44e5-b2bb-d0a3cb09c255" name="Xpath: assert SXM_STATUS">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/SXM_STATUS[1]</path>
              <content>Done</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="e31eb762-26ba-4058-b8dc-b5c75f834730" name="Script: Xpath: assert SXM_STATUS_DATETIME">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/SXM_STATUS_DATETIME[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="f7a96af5-e0ab-44e5-b2bb-d0a3cb09c255" name="Xpath: assert SXM_RETRY_COUNT">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/SXM_RETRY_COUNT[1]</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="0556b0e2-dbbc-4407-aae9-71a1337500f5" name="Xpath: assert ACTIVE">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ACTIVE[1]</path>
              <content>t</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="e31eb762-26ba-4058-b8dc-b5c75f834730" name="Script: Xpath: assert CREATEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/CREATEDDATE[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="e31eb762-26ba-4058-b8dc-b5c75f834730" name="Script: Xpath: assert MODIFIEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/MODIFIEDDATE[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="9639cf12-5b40-4748-bcbc-695104e22830" name="Xpath: assert SXM_IT_ID">
            <con:configuration>
              <path>/Results/ResultSet/Row/SXM_IT_ID/text()</path>
              <content>${#TestSuite#recipient_soap_interface_id}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="7edf2914-7a03-410d-a3a2-0546f79472dd" name="Xpath: assert SXM_DT_ID">
            <con:configuration>
              <path>/Results/ResultSet/Row/SXM_DT_ID/text()</path>
              <content>${#TestSuite#ctd_ctr_dt_id}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_CheckOutGoingMsgType1" id="91ab6e86-2528-4f53-90fc-237ea55f16e7">
        <con:settings/>
        <con:config>
          <script>def outtype = testRunner.testCase.testSuite.getPropertyValue("recipientOutMsg")

if (outtype == 'SOAP') {
    	  testRunner.gotoStepByName( "CTRA-ok")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_NoRecord_CTR" id="0b529de2-f764-46b3-842e-68162ad21c2d">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where
sxm_xml_message like '%${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01%'
and sxm_xml_message_type = 'Request'
and sxm_sender = '${#TestSuite#recipient}'
and sxm_receiver = '${#TestSuite#donor}'</con:query>
          <con:assertion type="JDBC Status" id="d7a0bef0-7c62-4087-af1c-bfc1d44f39a3" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="08bd5f22-f7c6-4526-b6a4-a146ecc9803e" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>0</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="CTRA-ok" id="1ed623a6-a00f-4951-b8a4-9fd6c93bcc86">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>CompWebserviceSoap11</con:interface>
          <con:operation>SendMessages</con:operation>
          <con:request name="CTRA-ok" id="83d7229a-676a-4c41-81cc-3429f324fea1" wssPasswordType="PasswordText">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#SoapUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="http://coin.nl/ws/schema">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:SendMessagesRequest>
         <sch:Sender>${#TestSuite#donor}</sch:Sender>
         <sch:Messages>
            <sch:Message>
               <sch:Text><![CDATA[<?xml version="1.0"?>
<message xmlns="http://www.coin.nl/Overstappen_MESSAGES">
<header>
<receiver>
<!--Optional:-->
<networkoperator>${#TestSuite#recipient}</networkoperator>
<!--Optional:-->
<serviceprovider>${#TestSuite#recipient}</serviceprovider>
</receiver>
<sender>
<!--Optional:-->
<networkoperator>${#TestSuite#donor}</networkoperator>
<!--Optional:-->
<serviceprovider>${#TestSuite#donor}</serviceprovider>
</sender>
<!--Optional:-->
<messageid>${#TestSuite#recipient}-${#TestCase#contractId}-01</messageid>
<timestamp>${#TestSuite#TimestampNOW}</timestamp>
</header>
<body>
<contractterminationrequestanswer>
<${#TestSuite#donorSoapVersion}>
<dossierid>${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01</dossierid>
${#TestSuite#donorDossierType}
<blocking>N</blocking>
<wishdatetime>${#TestCase#wishdate}</wishdatetime>
<blockingcode>0</blockingcode>
<note>Request Answer ok ${#TestSuite#soapVersion} sent ${#TestSuite#donorSoapVersion} expected</note>
</${#TestSuite#donorSoapVersion}>
</contractterminationrequestanswer>
</body>
</message>]]]]>><![CDATA[</sch:Text>
            </sch:Message>
         </sch:Messages>
      </sch:SendMessagesRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="0408c23d-c32c-480c-b33e-7f633dc17c95"/>
            <con:assertion type="XPath Match" id="8131d7ae-9a5a-491b-aefe-ae2214c93e1b" name="XPath Match">
              <con:configuration>
                <path>declare namespace ns2='http://coin.nl/ws/schema';
//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]/text()</path>
                <content>*</content>
                <allowWildcards>true</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="8fd52b42-3f32-4928-9b32-f521197d004e" name="Script Assertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
//def groovyUtilsPro = new com.eviware.soapui.support.GroovyUtilsPro( context )

def holder = new XmlHolder( messageExchange.responseContentAsXml )
holder.namespaces["ns2"] = "http://coin.nl/ws/schema"
def transactionId = holder.getNodeValue( "//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]" )
messageExchange.modelItem.testStep.testCase.setPropertyValue("ctraTransactionId",transactionId)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="dc84dc49-5cc4-4f93-88fa-86eabc147bb8" name="Script: SaveCtraCreateTime">
              <con:configuration>
                <scriptText><![CDATA[import com.eviware.soapui.support.XmlHolder
import java.util.Date;
import java.text.SimpleDateFormat;
def str = messageExchange.getRequestContentAsXml()
log.info str
def holder = new XmlHolder(str)

def ctraSentMessage = str.substring(str.lastIndexOf("<soapenv:Body>")+14, str.lastIndexOf("</soapenv:Body>"))
ctraSentMessage = ctraSentMessage.replace("<sch:SendMessagesRequest>", "<?xml version=\"1.0\" encoding=\"UTF-8\"?><sch:SendMessagesRequest xmlns:sch=\"http://coin.nl/ws/schema\">")
messageExchange.modelItem.testStep.testCase.setPropertyValue("ctraSentMessage",ctraSentMessage.trim())

def mainMessage = holder.getNodeValue("//sch:Text")
messageExchange.modelItem.testStep.testCase.setPropertyValue("ctraMainMessage",mainMessage)

def createTime = mainMessage.substring(mainMessage.lastIndexOf("<timestamp>")+11, mainMessage.lastIndexOf("</timestamp>"))
def time = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").parse(createTime)
def Id = time.format("yyyy-MM-dd HH:mm:ss")
messageExchange.modelItem.testStep.testCase.setPropertyValue("ctraCreateTime",Id)]]></scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#TestSuite#donorUserName}</con:username>
              <con:password>${#TestSuite#donorPassWord}</con:password>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_ST Table CTRA" id="16d01047-da15-4855-b553-8930a5675486">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_transactions 
where st_transaction_id = '${#TestCase#ctraTransactionId}'</con:query>
          <con:assertion type="JDBC Status" id="6e78d7f5-cb66-4611-b2b5-343c1888664f" name="JDBC Status"/>
          <con:assertion type="GroovyScriptAssertion" name="Script: storeID" id="919aa515-934c-4b10-bd9d-dcd08c81b41c">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctraId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify ST_SEND_RECEIVED" id="9db0e630-c611-4fc1-b0bc-fb6028a6a7c3">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_SEND_RECEIVED[1]</path>
              <content>received</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="69732a85-3729-4b54-ab5c-5b454a1eb020" name="Xpath: assert ST_SENDER">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_SENDER[1]</path>
              <content>${#TestSuite#Donor}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="39e17793-bb79-4733-be7b-33716ec3cc4e" name="Xpath: assert ST_RECEIVER">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_RECEIVER[1]/text()</path>
              <content>COIN</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="9392f7e9-772b-45ef-8f08-6621c44235ec" name="Script: assert ST_MESSAGE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.compareMessageString(holder, messageExchange, "ctraSentMessage", "//Results[1]/ResultSet[1]/Row[1]/ST_MESSAGE[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="09610e9e-a84a-4018-91c8-86c4e70b6f80" name="Script: assert ST_MESSAGE_DATETIME">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/ST_MESSAGE_DATETIME[1]/text()", 1);
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="9262a76a-ecec-4307-8ec3-0110c8f09c9a" name="Xpath: assert ST_STATUS">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_STATUS/text()</path>
              <content>Done</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="ac61da24-2ec1-4ecc-b6c2-ae6c4d273e95" name="Script: assert ST_STATUS_DATETIME">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/ST_STATUS_DATETIME[1]/text()", 1);
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="978d65de-4bab-454e-b246-5cbd520d44b5" name="Script: assert CREATEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/CREATEDDATE[1]/text()", 1);
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="522cfab0-98bd-499d-ab0c-8fbbb01b0381" name="Script: assert MODIFIEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/MODIFIEDDATE[1]/text()", 1);
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="d80902a3-bfcb-4329-a8f6-ad3d0723f4a4" name="Xpath: assert TechSender">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_TECHNICAL_SENDER/text()</path>
              <content>${#TestSuite#donor}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="625877b0-2eca-4b41-8c89-2dba622b3710" name="Xpath: assert ST_USER_NAME">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_NAME/text()</path>
              <content>${#TestSuite#donorUserName}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="c8d52293-18eb-49c4-9ca9-ea3bd5d610d6" name="Xpath: assert UserIP" disabled="true">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_IP/text()</path>
              <content>${#Project#UserIP}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Wait For Poller 2" id="984198b8-4460-4857-9ff4-7ff34b553c72">
        <con:settings/>
        <con:config>
          <delay>${#TestSuite#PollTime}</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_RSXM Table_CTRA" id="b13ab6f8-9507-4af6-9cf8-0813ac0c2521">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.raw_soap_xml_messages where rsxm_st_id = '${#TestCase#ctraId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: XPath Match" id="14d90270-6f91-4150-993a-d24f2adbd507">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/RSXM_STATUS[1]</path>
              <content>Done</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="0b705d25-1791-4e89-8c59-80a7f06407d5" name="JDBC Status"/>
          <con:assertion type="GroovyScriptAssertion" id="69e4fbe2-e6a6-444c-9ba2-c8b47452d3f9" name="Script: SaveRSXM_DM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/RSXM_DM_ID[1]", "ctraDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="035c7e6c-cb85-4776-b7f1-63292115e0d9" name="Script: SaveRSXM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctraRSXMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table_CTRA" id="425694bb-a66c-4cdf-8e03-d2a281a419a1">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier 
where id='${#TestCase#ctdId}'</con:query>
          <con:assertion type="JDBC Status" id="651069e7-f341-4a0a-90da-a0530c7e6e68" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="b18330b0-cbb2-421f-a0e7-716d17e63071" name="Xpath: assert CTD_SPR_RECIPIENT_ID">
            <con:configuration>
              <path>/Results/ResultSet/Row/CTD_SPR_RECIPIENT_ID/text()</path>
              <content>${#TestSuite#recipientId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b18330b0-cbb2-421f-a0e7-716d17e63071" name="Xpath: assert CTD_SPR_DONOR_ID">
            <con:configuration>
              <path>/Results/ResultSet/Row/CTD_SPR_DONOR_ID/text()</path>
              <content>${#TestSuite#donorId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b18330b0-cbb2-421f-a0e7-716d17e63071" name="Xpath: assert CTD_PRV_ID">
            <con:configuration>
              <path>/Results/ResultSet/Row/CTD_PRV_ID/text()</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b18330b0-cbb2-421f-a0e7-716d17e63071" name="Xpath: assert CTD_EBC_ID">
            <con:configuration>
              <path>/Results/ResultSet/Row/CTD_EBC_ID/text()</path>
              <content>3</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b18330b0-cbb2-421f-a0e7-716d17e63071" name="Xpath: assert CTD_DOSSIER_STATUS">
            <con:configuration>
              <path>/Results/ResultSet/Row/CTD_DOSSIER_STATUS/text()</path>
              <content>Pending</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b18330b0-cbb2-421f-a0e7-716d17e63071" name="Xpath: assert CTD_PROCESS_STATUS">
            <con:configuration>
              <path>/Results/ResultSet/Row/CTD_PROCESS_STATUS/text()</path>
              <content>Request Answer OK</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b18330b0-cbb2-421f-a0e7-716d17e63071" name="Xpath: assert CTD_SWITCHID">
            <con:configuration>
              <path>/Results/ResultSet/Row/CTD_SWITCHID/text()</path>
              <content>${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b18330b0-cbb2-421f-a0e7-716d17e63071" name="Xpath: assert CTD_CONTRACTID">
            <con:configuration>
              <path>/Results/ResultSet/Row/CTD_CONTRACTID/text()</path>
              <content>2-${#TestCase#contractID}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b18330b0-cbb2-421f-a0e7-716d17e63071" name="Xpath: assert CTD_REQUESTEDDATETIME">
            <con:configuration>
              <path>/Results/ResultSet/Row/CTD_REQUESTEDDATETIME/text()</path>
              <content>${#TestCase#wishDateWithoutT}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b18330b0-cbb2-421f-a0e7-716d17e63071" name="Xpath: assert CTD_CTR_WISHDATETIME">
            <con:configuration>
              <path>/Results/ResultSet/Row/CTD_CTR_WISHDATETIME/text()</path>
              <content>${#TestCase#wishDateWithoutT}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b18330b0-cbb2-421f-a0e7-716d17e63071" name="Xpath: assert CTD_CTRA_PROPOSEDDATETIME">
            <con:configuration>
              <path>/Results/ResultSet/Row/CTD_CTRA_PROPOSEDDATETIME</path>
              <content>&lt;CTD_CTRA_PROPOSEDDATETIME/></content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b18330b0-cbb2-421f-a0e7-716d17e63071" name="Xpath: assert CTD_EMAILADDRESSCONTACT">
            <con:configuration>
              <path>/Results/ResultSet/Row/CTD_EMAILADDRESSCONTACT</path>
              <content>&lt;CTD_EMAILADDRESSCONTACT/></content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b18330b0-cbb2-421f-a0e7-716d17e63071" name="Xpath: assert CTD_TELEPHONECONTACT">
            <con:configuration>
              <path>/Results/ResultSet/Row/CTD_TELEPHONECONTACT</path>
              <content>&lt;CTD_TELEPHONECONTACT/></content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b18330b0-cbb2-421f-a0e7-716d17e63071" name="Xpath: assert CTD_CONTRACTINITIALS">
            <con:configuration>
              <path>/Results/ResultSet/Row/CTD_CONTRACTINITIALS/text()</path>
              <content>A</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b18330b0-cbb2-421f-a0e7-716d17e63071" name="Xpath: assert CTD_CONTRACTPREFIX">
            <con:configuration>
              <path>/Results/ResultSet/Row/CTD_CONTRACTPREFIX</path>
              <content>&lt;CTD_CONTRACTPREFIX/></content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b18330b0-cbb2-421f-a0e7-716d17e63071" name="Xpath: assert CTD_CONTRACTLASTNAME">
            <con:configuration>
              <path>/Results/ResultSet/Row/CTD_CONTRACTLASTNAME/text()</path>
              <content>COIN</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b18330b0-cbb2-421f-a0e7-716d17e63071" name="Xpath: assert CTD_CONTRACTZIPCODE">
            <con:configuration>
              <path>/Results/ResultSet/Row/CTD_CONTRACTZIPCODE/text()</path>
              <content>1389SS</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b18330b0-cbb2-421f-a0e7-716d17e63071" name="Xpath: assert CTD_CONTRACTHOUSENUMBER">
            <con:configuration>
              <path>/Results/ResultSet/Row/CTD_CONTRACTHOUSENUMBER/text()</path>
              <content>99999</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b18330b0-cbb2-421f-a0e7-716d17e63071" name="Xpath: assert CTD_CONTRACTHOUSENUMBEREXT">
            <con:configuration>
              <path>/Results/ResultSet/Row/CTD_CONTRACTHOUSENUMBEREXT</path>
              <content>&lt;CTD_CONTRACTHOUSENUMBEREXT/></content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b18330b0-cbb2-421f-a0e7-716d17e63071" name="Xpath: assert CTD_CONNECTIONZIPCODE">
            <con:configuration>
              <path>/Results/ResultSet/Row/CTD_CONNECTIONZIPCODE/text()</path>
              <content>1389SS</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b18330b0-cbb2-421f-a0e7-716d17e63071" name="Xpath: assert CTD_CONNECTIONHOUSENUMBER">
            <con:configuration>
              <path>/Results/ResultSet/Row/CTD_CONNECTIONHOUSENUMBER/text()</path>
              <content>99999</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b18330b0-cbb2-421f-a0e7-716d17e63071" name="Xpath: assert CTD_CONNECTIONHOUSENUMBEREXT">
            <con:configuration>
              <path>/Results/ResultSet/Row/CTD_CONNECTIONHOUSENUMBEREXT</path>
              <content>&lt;CTD_CONNECTIONHOUSENUMBEREXT/></content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b18330b0-cbb2-421f-a0e7-716d17e63071" name="Xpath: assert CTD_NOTE">
            <con:configuration>
              <path>/Results/ResultSet/Row/CTD_NOTE/text()</path>
              <content>Sunny day-sent ${#TestSuite#soapVersion} expect ${#TestSuite#donorSoapVersion}-linenr. ${#TestSuite#lineNumber}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b18330b0-cbb2-421f-a0e7-716d17e63071" name="Xpath: assert CTD_CTP_MIGRATION">
            <con:configuration>
              <path>/Results/ResultSet/Row/CTD_CTP_MIGRATION/text()</path>
              <content>f</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b18330b0-cbb2-421f-a0e7-716d17e63071" name="Xpath: assert ACTIVE">
            <con:configuration>
              <path>/Results/ResultSet/Row/ACTIVE/text()</path>
              <content>t</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b18330b0-cbb2-421f-a0e7-716d17e63071" name="Xpath: assert CTD_CTP_ACTUALDATETIME">
            <con:configuration>
              <path>/Results/ResultSet/Row/CTD_CTP_ACTUALDATETIME</path>
              <content>&lt;CTD_CTP_ACTUALDATETIME/></content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b18330b0-cbb2-421f-a0e7-716d17e63071" name="Xpath: assert CTD_CUSTOMERID">
            <con:configuration>
              <path>/Results/ResultSet/Row/CTD_CUSTOMERID</path>
              <content>&lt;CTD_CUSTOMERID/></content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b18330b0-cbb2-421f-a0e7-716d17e63071" name="Xpath: assert CTD_CONTRACTCOMPANYNAME">
            <con:configuration>
              <path>/Results/ResultSet/Row/CTD_CONTRACTCOMPANYNAME</path>
              <content>&lt;CTD_CONTRACTCOMPANYNAME/></content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b18330b0-cbb2-421f-a0e7-716d17e63071" name="Xpath: assert CTD_CONTRACTSTREET">
            <con:configuration>
              <path>/Results/ResultSet/Row/CTD_CONTRACTSTREET</path>
              <content>&lt;CTD_CONTRACTSTREET/></content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b18330b0-cbb2-421f-a0e7-716d17e63071" name="Xpath: assert CTD_CONTRACTCITY">
            <con:configuration>
              <path>/Results/ResultSet/Row/CTD_CONTRACTCITY</path>
              <content>&lt;CTD_CONTRACTCITY/></content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b18330b0-cbb2-421f-a0e7-716d17e63071" name="Xpath: assert CTD_CONTRACTCOUNTRY">
            <con:configuration>
              <path>/Results/ResultSet/Row/CTD_CONTRACTCOUNTRY</path>
              <content>&lt;CTD_CONTRACTCOUNTRY/></content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b18330b0-cbb2-421f-a0e7-716d17e63071" name="Xpath: assert CTD_CONNECTIONSTREET">
            <con:configuration>
              <path>/Results/ResultSet/Row/CTD_CONNECTIONSTREET</path>
              <content>&lt;CTD_CONNECTIONSTREET/></content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b18330b0-cbb2-421f-a0e7-716d17e63071" name="Xpath: assert CTD_CONNECTIONCITY">
            <con:configuration>
              <path>/Results/ResultSet/Row/CTD_CONNECTIONCITY</path>
              <content>&lt;CTD_CONNECTIONCITY/></content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b18330b0-cbb2-421f-a0e7-716d17e63071" name="Xpath: assert CTD_CONNECTIONCOUNTRY">
            <con:configuration>
              <path>/Results/ResultSet/Row/CTD_CONNECTIONCOUNTRY</path>
              <content>&lt;CTD_CONNECTIONCOUNTRY/></content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b18330b0-cbb2-421f-a0e7-716d17e63071" name="Xpath: assert CTD_CTP_BUFFERING">
            <con:configuration>
              <path>/Results/ResultSet/Row/CTD_CTP_BUFFERING/text()</path>
              <content>${#TestSuite#par_ctp_buffering}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b18330b0-cbb2-421f-a0e7-716d17e63071" name="Xpath: assert CTD_NPR_ID">
            <con:configuration>
              <path>/Results/ResultSet/Row/CTD_NPR_ID</path>
              <content>&lt;CTD_NPR_ID/></content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b18330b0-cbb2-421f-a0e7-716d17e63071" name="Xpath: assert CTD_IFT_ID">
            <con:configuration>
              <path>/Results/ResultSet/Row/CTD_IFT_ID</path>
              <content>&lt;CTD_IFT_ID/></content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b18330b0-cbb2-421f-a0e7-716d17e63071" name="Xpath: assert CTD_CTR_DT_ID">
            <con:configuration>
              <path>/Results/ResultSet/Row/CTD_CTR_DT_ID/text()</path>
              <content>${#TestSuite#ctd_ctr_dt_id}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b18330b0-cbb2-421f-a0e7-716d17e63071" name="Xpath: assert CTD_CTRA_DT_ID">
            <con:configuration>
              <path>/Results/ResultSet/Row/CTD_CTRA_DT_ID/text()</path>
              <content>${#TestSuite#ctd_ctra_dt_id}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b18330b0-cbb2-421f-a0e7-716d17e63071" name="Xpath: assert CTD_CTCH_WISHDATETIME">
            <con:configuration>
              <path>/Results/ResultSet/Row/CTD_CTCH_WISHDATETIME</path>
              <content>&lt;CTD_CTCH_WISHDATETIME/></content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b18330b0-cbb2-421f-a0e7-716d17e63071" name="Xpath: assert CTD_CTCHA_PROPOSEDDATETIME">
            <con:configuration>
              <path>/Results/ResultSet/Row/CTD_CTCHA_PROPOSEDDATETIME</path>
              <content>&lt;CTD_CTCHA_PROPOSEDDATETIME/></content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b18330b0-cbb2-421f-a0e7-716d17e63071" name="Xpath: assert CTD_CONTRACT_EARLYTERMINATION">
            <con:configuration>
              <path>/Results/ResultSet/Row/CTD_CONTRACT_EARLYTERMINATION/text()</path>
              <content>${#TestSuite#ctd_contract_earlytermination}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b18330b0-cbb2-421f-a0e7-716d17e63071" name="Xpath: assert CTD_CONTRACTADDRESS">
            <con:configuration>
              <path>/Results/ResultSet/Row/CTD_CONTRACTADDRESS</path>
              <content>&lt;CTD_CONTRACTADDRESS/></content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b18330b0-cbb2-421f-a0e7-716d17e63071" name="Xpath: assert CTD_CONNECTIONADDRESS">
            <con:configuration>
              <path>/Results/ResultSet/Row/CTD_CONNECTIONADDRESS</path>
              <content>&lt;CTD_CONNECTIONADDRESS/></content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b18330b0-cbb2-421f-a0e7-716d17e63071" name="Xpath: assert CTD_INFRA_ID">
            <con:configuration>
              <path>/Results/ResultSet/Row/CTD_INFRA_ID</path>
              <content>&lt;CTD_INFRA_ID/></content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="80753ded-a89c-4627-b7a6-6cb1001e2e04" name="Script: assert CREATEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "ctraCreateTime", "//Results[1]/ResultSet[1]/Row[1]/CREATEDDATE[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="6f281bb4-102f-4db1-b1d4-4c62e42e7a02" name="Script: assert MODIFIEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "ctraCreateTime", "//Results[1]/ResultSet[1]/Row[1]/MODIFIEDDATE[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="9981420d-1934-41ac-8fc2-18ada9a594ff" name="Script: assert CTD_DM_LAST_MSGDATETIME">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "ctraCreateTime", "//Results[1]/ResultSet[1]/Row[1]/CTD_DM_LAST_MSGDATETIME[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="e80bd454-f882-459f-97b7-e091a7aa519b" name="Script: assert CTD_VERSION">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "ctraCreateTime", "//Results[1]/ResultSet[1]/Row[1]/CTD_VERSION[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_MSL Table_CTRA" id="4228015e-cd7e-4ec6-822f-2848ac51e988">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>Select * from overstappen.message_logging where 
msl_soap_transaction_id = '${#TestCase#ctraTransactionId}'</con:query>
          <con:assertion type="JDBC Status" id="e095441a-3cf8-4288-8e40-4300718feece" name="JDBC Status"/>
          <con:assertion type="XPath Match" name="Xpath: assert MSL_CLC_ID]" id="e99eef8e-047f-4dff-930b-7b92f2348249">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/MSL_CLC_ID[1]/text()</path>
              <content>57</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="e95b881a-2ca1-4cc8-97c3-ba99a4a0eabd" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="2117dfe7-8c2d-40b0-8738-125e08ea8dbd" name="Xpath: assert MSL_MSGIDENTIFIER">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_MSGIDENTIFIER/text()</path>
              <content>${#TestSuite#recipient}-${#TestCase#contractId}-01</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6db6df17-5954-4346-8c3d-7606826de891" name="Xpath: assert MSL_MAIL_SUBJECT">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_MAIL_SUBJECT</path>
              <content>&lt;MSL_MAIL_SUBJECT/></content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="8754c3b8-bbb2-48e0-8ed1-e6d9d42653b3" name="Xpath: assert MSL_MAIL_FROM_ADDRESS">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_MAIL_FROM_ADDRESS</path>
              <content>&lt;MSL_MAIL_FROM_ADDRESS/></content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="dfe94e24-c168-45fb-a984-9215b8cd5332" name="Xpath: assert MSL_MAIL_TO_ADDRESS">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_MAIL_TO_ADDRESS</path>
              <content>&lt;MSL_MAIL_TO_ADDRESS/></content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="09c89c31-8ef5-48bb-96ef-0282811848d4" name="Xpath: assert MSL_CTD_ID">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_CTD_ID/text()</path>
              <content>${#TestCase#ctdId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="ffea84d7-146e-4fb3-b1d8-54387b17466e" name="Xpath: assert MSL_DM_ID">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_DM_ID/text()</path>
              <content>${#TestCase#ctraDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6d7b43d8-c56b-4fb8-8962-4782d41fcb54" name="Xpath: assert MSL_IT_ID">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_IT_ID/text()</path>
              <content>${#TestSuite#donor_ctra_interface_id}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b6da7f90-1452-4385-bd0f-ff74c24a2516" name="Xpath: assert MSL_CLC_ID">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_CLC_ID/text()</path>
              <content>57</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="5c1195e9-4807-4fc2-bb39-e42edc692791" name="Xpath: assert MSL_MAIL_MESSAGE_ID">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_MAIL_MESSAGE_ID</path>
              <content>&lt;MSL_MAIL_MESSAGE_ID/></content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="36e359a5-49a7-4c29-8834-f78e1a9d8101" name="Xpath: assert MSL_LOG">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_LOG/text()</path>
              <content>503 - Marking message as commit success - Dossier Message Saved successfully*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="a178e992-5c54-4cd5-a3fb-c11275c29dfd" name="Xpath: assert MSL_MAIL_MESSAGE_BLOB">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_MAIL_MESSAGE_BLOB</path>
              <content>&lt;MSL_MAIL_MESSAGE_BLOB/></content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="187befdb-659c-4505-afbd-66804eee4657" name="Xpath: assert MSL_SOAP_MESSAGE_BLOB">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_SOAP_MESSAGE_BLOB/text()</path>
              <content>${#TestCase#ctraMainMessage}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="24a1b185-de36-43d4-a904-b18c787487de" name="Xpath: assert ACTIVE">
            <con:configuration>
              <path>/Results/ResultSet/Row/ACTIVE/text()</path>
              <content>t</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="a56de43b-a3b9-42e7-9031-040559bec8d3" name="Xpath: assert MSL_FROM_SPR_CODE">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_FROM_SPR_CODE/text()</path>
              <content>${#TestSuite#donor}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b3b847e1-3112-4248-adfb-0a8dc9c6cdd8" name="Xpath: assert MSL_TO_SPR_CODE">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_TO_SPR_CODE/text()</path>
              <content>${#TestSuite#recipient}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="e3234d67-a34d-4451-aafe-7597e5a708fc" name="Xpath: assert MSL_ADMIN">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_ADMIN/text()</path>
              <content>f</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="0c3c66bd-d040-47e0-9955-074c56c3e764" name="Xpath: assert MSL_ST_ID">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_ST_ID/text()</path>
              <content>${#TestCase#ctraId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="2f60a343-a1a2-4dd4-a9a2-8908502dead9" name="Script: assert MSL_TIMESTAMP">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "ctraCreateTime", "//Results[1]/ResultSet[1]/Row[1]/MSL_TIMESTAMP[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d32c4ba6-0a7a-4169-a15f-55ee2d5797fe" name="Script: assert CREATEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "ctraCreateTime", "//Results[1]/ResultSet[1]/Row[1]/CREATEDDATE[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="732968c7-b064-4641-b825-ea4b7c3e5635" name="Script: assert MODIFIEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "ctraCreateTime", "//Results[1]/ResultSet[1]/Row[1]/MODIFIEDDATE[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTRA" id="f05bf014-6c0a-4d41-b76d-7b023353872a">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where DM.id=${#TestCase#ctraDMId} 
order by createddate desc</con:query>
          <con:assertion type="JDBC Status" id="2310f440-1122-4767-93cc-598cd58ff8ef" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="1ea9053c-f9e1-4b31-89f9-cb2ee323986a" name="Xpath: assert DM_CTD_ID">
            <con:configuration>
              <path>/Results/ResultSet/Row/DM_CTD_ID/text()</path>
              <content>${#TestCase#ctdId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="0cb12085-0d80-41c9-a8b4-4e7091cc0d1a" name="Xpath: assert DM_EBC_ID">
            <con:configuration>
              <path>/Results/ResultSet/Row/DM_EBC_ID/text()</path>
              <content>3</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="e8d3ad33-375e-4900-992c-9cc99409196f" name="Xpath: assert DM_MST_ID">
            <con:configuration>
              <path>/Results/ResultSet/Row/DM_MST_ID/text()</path>
              <content>3</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="ee562cfa-af8e-40d5-be51-5463f4b5f218" name="Xpath: assert DM_IT_ID">
            <con:configuration>
              <path>/Results/ResultSet/Row/DM_IT_ID/text()</path>
              <content>${#TestSuite#donor_soap_interface_id}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="0cd5dc12-162e-48cd-9248-b411b5b1814f" name="Xpath: assert DM_MESSAGE_STATUS">
            <con:configuration>
              <path>/Results/ResultSet/Row/DM_MESSAGE_STATUS/text()</path>
              <content>0</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="d05dccd5-f112-4cd3-8ced-7fbe76e0e06a" name="Xpath: assert DM_MSGIDENTFIER">
            <con:configuration>
              <path>/Results/ResultSet/Row/DM_MSGIDENTFIER/text()</path>
              <content>${#TestSuite#recipient}-${#TestCase#contractId}-01</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="5624737a-c3b7-4974-bb3d-5273e8e45352" name="Xpath: assert DM_DATETIME">
            <con:configuration>
              <path>/Results/ResultSet/Row/DM_DATETIME/text()</path>
              <content>${#TestCase#wishDateWithoutT}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="4ae98ed1-7881-43fe-96f4-d2a0571daeb7" name="Xpath: assert DM_NOTE">
            <con:configuration>
              <path>/Results/ResultSet/Row/DM_NOTE/text()</path>
              <content>Request Answer ok ${#TestSuite#soapVersion} sent ${#TestSuite#donorSoapVersion} expected</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="c9505fcb-938e-4139-9e28-b37a56f16738" name="Xpath: assert DM_ITERATION_COUNT">
            <con:configuration>
              <path>/Results/ResultSet/Row/DM_ITERATION_COUNT/text()</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="fc5ce309-1de5-42ed-a552-40b361020f97" name="Xpath: assert ACTIVE">
            <con:configuration>
              <path>/Results/ResultSet/Row/ACTIVE/text()</path>
              <content>t</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="0848c8f5-8877-470c-bfab-67764dbfe0d9" name="Script: assert DM_MSGDATETIME">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "ctraCreateTime", "//Results[1]/ResultSet[1]/Row[1]/DM_MSGDATETIME[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="beba1af9-ff3a-4d95-b4a9-b4ce758ab7fd" name="Script: assert CREATEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "ctraCreateTime", "//Results[1]/ResultSet[1]/Row[1]/CREATEDDATE[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="da8b1e4d-d9c5-48e1-b397-5e4ee527a74d" name="Script: assert MODIFIEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "ctraCreateTime", "//Results[1]/ResultSet[1]/Row[1]/MODIFIEDDATE[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="db314dd8-643e-44c2-832e-059f90a590e5" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctraDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_ST Table_Send_CTRA" id="4c66f44d-03d0-4aad-a2e2-80d98c3dd988">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_transactions 
where st_sender='${#TestSuite#donor}' 
and st_receiver='${#TestSuite#recipient}' 
and st_send_received='SEND' 
and st_message like '%${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01%'
and id>${#TestCase#Id}</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [ST_TRANSACTION_ID]" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//ST_TRANSACTION_ID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify SEND Status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//ST_SEND_RECEIVED</path>
              <content>SEND</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" name="Contains: Contains" id="a1e1b0ed-fff7-4f8c-9eba-dee62ae7b198">
            <con:configuration>
              <token>contractterminationrequest</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="40fa4a9b-34bc-47c5-a651-8b225e523334" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="d61de3ac-475a-43e4-aaf5-8b421c411464" name="Xpath: Verify Sender">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_SENDER[1]</path>
              <content>${#TestSuite#donor}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="96350074-db6f-467f-9402-f351c4e3eb1e" name="Xpath: Verify Receiver">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_RECEIVER[1]</path>
              <content>${#TestSuite#recipient}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple NotContains" id="d4f7f14c-500e-4519-ad2b-89ff5e57a404" name="NotContains: Technical Sender">
            <con:configuration>
              <token>&lt;ST_TECHNICAL_SENDER></token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple NotContains" id="d4f7f14c-500e-4519-ad2b-89ff5e57a404" name="NotContains: User_Name">
            <con:configuration>
              <token>&lt;ST_USER_NAME></token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple NotContains" id="d4f7f14c-500e-4519-ad2b-89ff5e57a404" name="NotContains: USER_IP">
            <con:configuration>
              <token>&lt;ST_USER_IP></token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="b0785e66-97d6-48d3-93b8-52bf2e298f3b" name="Script: Verify Message_DATETIME">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "ctraCreateTime", "//Results[1]/ResultSet[1]/Row[1]/ST_MESSAGE_DATETIME[1]/text()", 1);
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify Status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//ST_STATUS</path>
              <content>Done</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="0cd1ca74-fcf1-46d9-974c-fe9be6b2d13b" name="Script: Verify ST_STATUS_DATETIME">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "ctraCreateTime", "//Results[1]/ResultSet[1]/Row[1]/ST_STATUS_DATETIME[1]/text()", 1);
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_CTRA" id="4985f6e9-bf5d-4cdb-b2dd-1a6981c74248">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages 
where sxm_dm_id=${#TestCase#ctraDMId}</con:query>
          <con:assertion type="JDBC Status" id="89423fb8-e10b-4dc0-8acc-c6b50e05ba16" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="0db3e35c-a9d2-4e5a-80cd-6734d14d0c1a" name="Xpath: assert SXM_SENDER">
            <con:configuration>
              <path>/Results/ResultSet/Row/SXM_SENDER/text()</path>
              <content>${#TestSuite#donor}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="9d86a353-4ffa-46d5-8723-82cda34cb581" name="Xpath: assert SXM_RECEIVER">
            <con:configuration>
              <path>/Results/ResultSet/Row/SXM_RECEIVER/text()</path>
              <content>${#TestSuite#recipient}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="205f04bf-a437-4c3b-88df-fcba9984d673" name="Xpath: assert SXM_XML_MESSAGE_TYPE">
            <con:configuration>
              <path>/Results/ResultSet/Row/SXM_XML_MESSAGE_TYPE/text()</path>
              <content>Request answer</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="3c85a2e3-0779-4717-88a4-c2840d9617a9" name="Script: assert SXM_XML_MESSAGE_DATETIME">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "ctraCreateTime", "//Results[1]/ResultSet[1]/Row[1]/SXM_XML_MESSAGE_DATETIME[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="dc9ac5bf-24dc-4c94-9cb1-9dd91d9a0289" name="Xpath: assert SXM_STATUS">
            <con:configuration>
              <path>/Results/ResultSet/Row/SXM_STATUS/text()</path>
              <content>Done</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="7fea8207-cbbf-4cb1-9deb-ed8d4d47429b" name="Xpath: assert SXM_STATUS_DATETIME" disabled="true">
            <con:configuration>
              <path>/Results/ResultSet/Row/SXM_STATUS_DATETIME/text()</path>
              <content/>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="2e855a96-6e54-4d79-90f7-5395f3e81be9" name="Xpath: assert SXM_RETRY_COUNT">
            <con:configuration>
              <path>/Results/ResultSet/Row/SXM_RETRY_COUNT/text()</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="0c69fb15-8de8-405f-967a-8d0c41f58d94" name="Xpath: assert ACTIVE">
            <con:configuration>
              <path>/Results/ResultSet/Row/ACTIVE/text()</path>
              <content>t</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="9fe20117-79a6-435a-942a-60fa6f93c04c" name="Script: assert CREATEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "ctraCreateTime", "//Results[1]/ResultSet[1]/Row[1]/CREATEDDATE[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="c117ca14-2b5c-4d2b-820a-021682b4b7e2" name="Script: assert MODIFIEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "ctraCreateTime", "//Results[1]/ResultSet[1]/Row[1]/MODIFIEDDATE[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="7dee7345-673f-4f90-a364-5bcea16f3a2f" name="Xpath: assert SXM_IT_ID">
            <con:configuration>
              <path>/Results/ResultSet/Row/SXM_IT_ID/text()</path>
              <content>${#TestSuite#donor_soap_interface_id}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="8443ea56-ab70-4acf-bb93-ad64f90351f2" name="Xpath: assert SXM_DT_ID">
            <con:configuration>
              <path>/Results/ResultSet/Row/SXM_DT_ID/text()</path>
              <content>${#TestSuite#ctd_ctra_dt_id}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="436a011f-0a1e-48c3-803e-71e302bade08" name="Xpath: assert SXM_DM_ID">
            <con:configuration>
              <path>/Results/ResultSet/Row/SXM_DM_ID/text()</path>
              <content>${#TestCase#ctraDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="CTCH" id="b0216c05-3ced-436e-ba79-e798803a86df">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>CompWebserviceSoap11</con:interface>
          <con:operation>SendMessages</con:operation>
          <con:request name="CTCH" id="83d7229a-676a-4c41-81cc-3429f324fea1" wssPasswordType="PasswordText">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#SoapUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="http://coin.nl/ws/schema">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:SendMessagesRequest>
         <sch:Sender>${#TestSuite#recipient}</sch:Sender>
         <sch:Messages>
            <sch:Message>
               <sch:Text><![CDATA[<?xml version="1.0"?>
<message xmlns="http://www.coin.nl/Overstappen_MESSAGES">
<header>
<receiver>
<serviceprovider>${#TestSuite#donor}</serviceprovider>
</receiver>
<sender>
<serviceprovider>${#TestSuite#recipient}</serviceprovider>
</sender>
<messageid>${#TestSuite#recipient}-${#TestCase#contractId}-03</messageid>
<timestamp>${#TestSuite#TimestampNOW}</timestamp>
</header>
<body>
<change>
<${#TestSuite#soapVersion}>
<dossierid>${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01</dossierid>
<wishdatetime>${#TestCase#proposedDate}</wishdatetime>
<note>Change ${#TestSuite#soapVersion} OK</note>
</${#TestSuite#soapVersion}>
</change>
</body>
</message>]]]]>><![CDATA[</sch:Text>
            </sch:Message>
         </sch:Messages>
      </sch:SendMessagesRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="0408c23d-c32c-480c-b33e-7f633dc17c95"/>
            <con:assertion type="XPath Match" id="611515f4-aa5a-44bb-9038-5efb4661d656" name="XPath Match">
              <con:configuration>
                <path>declare namespace ns2='http://coin.nl/ws/schema';
//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]/text()</path>
                <content>*</content>
                <allowWildcards>true</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="4c4aa14b-781b-4325-8f36-84e716be7574" name="Script Assertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
//def groovyUtilsPro = new com.eviware.soapui.support.GroovyUtilsPro( context )

def holder = new XmlHolder( messageExchange.responseContentAsXml )
holder.namespaces["ns2"] = "http://coin.nl/ws/schema"
def transactionId = holder.getNodeValue( "//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]" )
messageExchange.modelItem.testStep.testCase.setPropertyValue("ctchTransactionId",transactionId)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="7acdf1d5-19aa-436d-8765-7f8f785ed8ea" name="Script Assertion 1">
              <con:configuration>
                <scriptText><![CDATA[import com.eviware.soapui.support.XmlHolder
import java.util.Date;
import java.text.SimpleDateFormat;
def str = messageExchange.getRequestContentAsXml()
log.info str
def holder = new XmlHolder(str)

def ctchSentMessage = str.substring(str.lastIndexOf("<soapenv:Body>")+14, str.lastIndexOf("</soapenv:Body>"))
ctchSentMessage = ctchSentMessage.replace("<sch:SendMessagesRequest>", "<?xml version=\"1.0\" encoding=\"UTF-8\"?><sch:SendMessagesRequest xmlns:sch=\"http://coin.nl/ws/schema\">")
messageExchange.modelItem.testStep.testCase.setPropertyValue("ctchSentMessage",ctchSentMessage.trim())

def mainMessage = holder.getNodeValue("//sch:Text")
messageExchange.modelItem.testStep.testCase.setPropertyValue("ctchMainMessage",mainMessage)

def createTime = mainMessage.substring(mainMessage.lastIndexOf("<timestamp>")+11, mainMessage.lastIndexOf("</timestamp>"))
def time = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").parse(createTime)
def Id = time.format("yyyy-MM-dd HH:mm:ss")
messageExchange.modelItem.testStep.testCase.setPropertyValue("ctchCreateTime",Id)]]></scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#TestSuite#recipientUserName}</con:username>
              <con:password>${#TestSuite#recipientPassWord}</con:password>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_ST Table CTCH" id="04c7a0fd-04df-4fdd-acc8-b7241b9094fb">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_transactions 
where st_transaction_id = '${#TestCase#ctchTransactionId}'</con:query>
          <con:assertion type="JDBC Status" id="641fef79-8537-4dac-913e-c8d8222e36dd" name="JDBC Status"/>
          <con:assertion type="GroovyScriptAssertion" name="Script: saveTransactionId" id="919aa515-934c-4b10-bd9d-dcd08c81b41c">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctchId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert ST_SEND_RECEIVED" id="9db0e630-c611-4fc1-b0bc-fb6028a6a7c3">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_SEND_RECEIVED[1]</path>
              <content>received</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify Sender" id="0314e1fa-b1cb-4932-bba8-55dd87029a85">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_SENDER[1]</path>
              <content>${#TestSuite#Recipient}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify Receiver" id="0314e1fa-b1cb-4932-bba8-55dd87029a85">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_RECEIVER[1]</path>
              <content>COIN</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="4caca998-1e10-496e-9cc7-ff05ce7a1e39" name="Script: assert ST_MESSAGE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.compareMessageString(holder, messageExchange, "ctchSentMessage", "//Results[1]/ResultSet[1]/Row[1]/ST_MESSAGE[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="7c7146e4-cc78-48f3-8b0d-ac136fde6398" name="Script: assert ST_MESSAGE_DATETIME">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/ST_MESSAGE_DATETIME[1]/text()", 1);
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="3da87b4d-707d-4f04-a2f1-11f0ed5d7187" name="Xpath: assert ST_STATUS">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_STATUS/text()</path>
              <content>Done</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="7c7146e4-cc78-48f3-8b0d-ac136fde6398" name="Script: assert ST_STATUS_DATETIME">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/ST_STATUS_DATETIME[1]/text()", 1);
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="7c7146e4-cc78-48f3-8b0d-ac136fde6398" name="Script: assert CREATEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/CREATEDDATE[1]/text()", 1);
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="7c7146e4-cc78-48f3-8b0d-ac136fde6398" name="Script: assert MODIFIEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/MODIFIEDDATE[1]/text()", 1);
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="dce9fe5c-abd0-4667-88ff-f968eea029e9" name="Xpath: assert TechSender">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_TECHNICAL_SENDER/text()</path>
              <content>${#TestSuite#recipient}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="03a59075-52d6-48a4-aded-0d3f7b3a27ac" name="Xpath: assert UserName">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_NAME/text()</path>
              <content>${#TestSuite#recipientUserName}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="3da87b4d-707d-4f04-a2f1-11f0ed5d7187" name="Xpath: assert UserIP" disabled="true">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_IP/text()</path>
              <content>${#Project#UserIP}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Wait For Send Poller 3" id="cee65b80-09a3-4932-a91e-1d74fc2be07c">
        <con:settings/>
        <con:config>
          <delay>${#TestSuite#PollTime}</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_RSXM Table_CTCH" id="a1a32936-9d26-4412-a843-e6012cee2efb">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.raw_soap_xml_messages where rsxm_st_id = '${#TestCase#ctchId}'</con:query>
          <con:assertion type="JDBC Status" id="9c63fa23-a7ff-40e2-9cc8-631af4d4c692" name="JDBC Status"/>
          <con:assertion type="XPath Match" name="Xpath: assert RSXM_XML_MESSAGE" id="14d90270-6f91-4150-993a-d24f2adbd507">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/RSXM_XML_MESSAGE[1]/text()</path>
              <content>${#TestCase#ctchMainMessage}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert RSXM_STATUS" id="14d90270-6f91-4150-993a-d24f2adbd507">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/RSXM_STATUS[1]</path>
              <content>Done</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="e15bd5f1-6b04-457f-945d-266f0a0f597c" name="Script: assert CREATEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/CREATEDDATE[1]/text()", 1);
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="e15bd5f1-6b04-457f-945d-266f0a0f597c" name="Script: assert MODIFIEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/MODIFIEDDATE[1]/text()", 1);
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert PROCESS_DATETIME" id="14d90270-6f91-4150-993a-d24f2adbd507">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/PROCESS_DATETIME[1]</path>
              <content>&lt;PROCESS_DATETIME/></content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="e15bd5f1-6b04-457f-945d-266f0a0f597c" name="Script: SaveRSXM_DM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/RSXM_DM_ID[1]", "ctchDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert ACTIVE" id="14d90270-6f91-4150-993a-d24f2adbd507">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ACTIVE[1]/text()</path>
              <content>t</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="709e8357-5725-4f62-b36e-d6daa0522a48" name="Script: SaveRSXM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctchRSXMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_MSL Table_CTCH" id="132bd445-7545-4be4-84e3-8b68758a8db4">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>Select * from overstappen.message_logging where 
msl_soap_transaction_id = '${#TestCase#ctchTransactionId}'</con:query>
          <con:assertion type="JDBC Status" id="e095441a-3cf8-4288-8e40-4300718feece" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="90de6c58-ce01-40f7-8601-320c181b4c6a" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6f97994c-fe88-4225-a5fe-6b03e5f2f4df" name="Xpath: assert MSL_MSGIDENTIFIER">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_MSGIDENTIFIER/text()</path>
              <content>${#TestSuite#recipient}-${#TestCase#contractId}-03</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d64191b1-b311-474b-8343-c036a85b7506" name="Script: assert TIMESTAMP">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/MSL_TIMESTAMP[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="600e79cd-a35e-4f1a-8285-d8ffbfca6a9c" name="Contains: assert MSL_MAIL_SUBJECT">
            <con:configuration>
              <token>&lt;MSL_MAIL_SUBJECT/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6f97994c-fe88-4225-a5fe-6b03e5f2f4df" name="Xpath: assert MSL_MAIL_FROM_ADDRESS">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_MAIL_FROM_ADDRESS</path>
              <content>&lt;MSL_MAIL_FROM_ADDRESS/></content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="600e79cd-a35e-4f1a-8285-d8ffbfca6a9c" name="Contains: assert MSL_MAIL_TO_ADDRESS">
            <con:configuration>
              <token>&lt;MSL_MAIL_TO_ADDRESS/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6f97994c-fe88-4225-a5fe-6b03e5f2f4df" name="Xpath: assert MSL_CTD_ID">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_CTD_ID/text()</path>
              <content>${#TestCase#ctdId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6f97994c-fe88-4225-a5fe-6b03e5f2f4df" name="Xpath: assert MSL_DM_ID">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_DM_ID/text()</path>
              <content>${#TestCase#ctchDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6f97994c-fe88-4225-a5fe-6b03e5f2f4df" name="Xpath: assert MSL_IT_ID">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_IT_ID/text()</path>
              <content>${#TestSuite#recipient_ctr_interface_id}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert MSL_CLC_ID]" id="e99eef8e-047f-4dff-930b-7b92f2348249">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/MSL_CLC_ID[1]/text()</path>
              <content>57</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="600e79cd-a35e-4f1a-8285-d8ffbfca6a9c" name="Contains: assert MSL_MAIL_MESSAGE_ID">
            <con:configuration>
              <token>&lt;MSL_MAIL_MESSAGE_ID/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="af9e3913-4e23-4232-9d26-e5b4f37f31f5" name="Contains: assert MSL_LOG">
            <con:configuration>
              <token>&lt;MSL_LOG>503 - Marking message as commit success - Dossier Message Saved successfully</token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="31361619-e64f-4ff3-b185-786e5879ac46" name="Contains: assert MSL_MAIL_MESSAGE_BLOB">
            <con:configuration>
              <token>&lt;MSL_MAIL_MESSAGE_BLOB/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6f97994c-fe88-4225-a5fe-6b03e5f2f4df" name="Xpath: assert MSL_SOAP_MESSAGE_BLOB">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_SOAP_MESSAGE_BLOB/text()</path>
              <content>${#TestCase#ctchMainMessage}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6f97994c-fe88-4225-a5fe-6b03e5f2f4df" name="Xpath: assert ACTIVE">
            <con:configuration>
              <path>/Results/ResultSet/Row/ACTIVE/text()</path>
              <content>t</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d64191b1-b311-474b-8343-c036a85b7506" name="Script: assert CREATEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/CREATEDDATE[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d64191b1-b311-474b-8343-c036a85b7506" name="Script: assert MODIFIEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/MODIFIEDDATE[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6f97994c-fe88-4225-a5fe-6b03e5f2f4df" name="Xpath: assert MSL_FROM_SPR_CODE">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_FROM_SPR_CODE/text()</path>
              <content>${#TestSuite#recipient}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6f97994c-fe88-4225-a5fe-6b03e5f2f4df" name="Xpath: assert MSL_TO_SPR_CODE">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_TO_SPR_CODE/text()</path>
              <content>${#TestSuite#donor}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6f97994c-fe88-4225-a5fe-6b03e5f2f4df" name="Xpath: assert MSL_ADMIN">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_ADMIN/text()</path>
              <content>f</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6f97994c-fe88-4225-a5fe-6b03e5f2f4df" name="Xpath: assert MSL_ST_ID">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_ST_ID/text()</path>
              <content>${#TestCase#ctchId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table_CTCH" id="76f8b22b-39fa-464e-9403-63789a02b308">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier 
where id='${#TestCase#ctdId}'</con:query>
          <con:assertion type="JDBC Status" id="1841841d-972a-4bf0-bc88-c1ad0b5ede11" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="5cd23510-e4af-441e-8075-a585f89691fb" name="Xpath: assert CTD_SPR_RECIPIENT_ID">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_SPR_RECIPIENT_ID[1]/text()</path>
              <content>${#TestSuite#recipientId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="796567b6-e3ec-4dc0-a183-0fa21a9b4ee1" name="Xpath: assert CTD_SPR_DONOR_ID">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_SPR_DONOR_ID[1]/text()</path>
              <content>${#TestSuite#donorId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="af76937d-74c4-4027-b279-71130cbec99e" name="Xpath: Xpath : assert CTD_PRV_ID">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_PRV_ID[1]/text()</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_EBC_ID">
            <con:configuration>
              <token>&lt;CTD_EBC_ID></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert CTD_DOSSIER_STATUS" id="ac17d9f6-9653-435c-bd0c-9af6917f2aa6">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_DOSSIER_STATUS[1]/text()</path>
              <content>Pending</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert CTD_PROCESS_STATUS" id="ede8cc08-99ab-46ca-baf4-97e9f0895428">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_PROCESS_STATUS[1]/text()</path>
              <content>Change</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="0f11b543-a937-43a8-a6e6-5fa3f92e784f" name="Xpath: assert CTD_CONTRACTID">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CONTRACTID[1]/text()</path>
              <content>2-${#TestCase#contractID}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="5cd23510-e4af-441e-8075-a585f89691fb" name="Xpath: assert CTD_REQUESTEDDATETIME">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_REQUESTEDDATETIME[1]/text()</path>
              <content>${#TestCase#wishDateWithoutT}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="5cd23510-e4af-441e-8075-a585f89691fb" name="Xpath: assert CTD_CTR_WISHDATETIME">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CTR_WISHDATETIME[1]/text()</path>
              <content>${#TestCase#wishDateWithoutT}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CTRA_PROPOSEDDATETIME">
            <con:configuration>
              <token>&lt;CTD_CTRA_PROPOSEDDATETIME/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_EMAILADDRESSCONTACT">
            <con:configuration>
              <token>&lt;CTD_EMAILADDRESSCONTACT/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_TELEPHONECONTACT">
            <con:configuration>
              <token>&lt;CTD_TELEPHONECONTACT/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="5cd23510-e4af-441e-8075-a585f89691fb" name="Xpath: assert CTD_CONTRACTINITIALS">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CONTRACTINITIALS[1]/text()</path>
              <content>A</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CONTRACTPREFIX">
            <con:configuration>
              <token>&lt;CTD_CONTRACTPREFIX/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="5cd23510-e4af-441e-8075-a585f89691fb" name="Xpath: assert CTD_CONTRACTLASTNAME">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CONTRACTLASTNAME[1]/text()</path>
              <content>COIN</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="5cd23510-e4af-441e-8075-a585f89691fb" name="Xpath: assert CTD_CONTRACTZIPCODE">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CONTRACTZIPCODE[1]/text()</path>
              <content>1389SS</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="5cd23510-e4af-441e-8075-a585f89691fb" name="Xpath: assert CTD_CONTRACTHOUSENUMBER">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CONTRACTHOUSENUMBER[1]/text()</path>
              <content>99999</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="f36a5fdb-2755-403f-8a87-492c9edeef39" name="Xpath: assert CTD_CONTRACTHOUSENUMBEREXT">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CONTRACTHOUSENUMBEREXT</path>
              <content>&lt;CTD_CONTRACTHOUSENUMBEREXT/></content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="f36a5fdb-2755-403f-8a87-492c9edeef39" name="Xpath: assert CTD_CONNECTIONZIPCODE">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CONNECTIONZIPCODE[1]/text()</path>
              <content>1389SS</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="f36a5fdb-2755-403f-8a87-492c9edeef39" name="Xpath: assert CTD_CONNECTIONHOUSENUMBER">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CONNECTIONHOUSENUMBER[1]/text()</path>
              <content>99999</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="f36a5fdb-2755-403f-8a87-492c9edeef39" name="Xpath: assert CTD_CONNECTIONHOUSENUMBEREXT">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CONNECTIONHOUSENUMBEREXT</path>
              <content>&lt;CTD_CONNECTIONHOUSENUMBEREXT/></content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="5cd23510-e4af-441e-8075-a585f89691fb" name="Xpath: assert CTD_NOTE">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_NOTE[1]/text()</path>
              <content>Sunny day-sent ${#TestSuite#soapVersion} expect ${#TestSuite#donorSoapVersion}-linenr. ${#TestSuite#lineNumber}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="5cd23510-e4af-441e-8075-a585f89691fb" name="Xpath: assert CTD_CTP_MIGRATION">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CTP_MIGRATION[1]/text()</path>
              <content>f</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="5cd23510-e4af-441e-8075-a585f89691fb" name="Xpath: assert ACTIVE">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ACTIVE[1]/text()</path>
              <content>t</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="61f553a7-28ef-45c3-a740-e8509a83fd72" name="Script: assert CREATEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/CREATEDDATE[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="61f553a7-28ef-45c3-a740-e8509a83fd72" name="Script: assert MODIFIEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/MODIFIEDDATE[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="61f553a7-28ef-45c3-a740-e8509a83fd72" name="Script: assert CTD_DM_LAST_MSGDATETIME">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/CTD_DM_LAST_MSGDATETIME[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CTP_ACTUALDATETIME">
            <con:configuration>
              <token>&lt;CTD_CTP_ACTUALDATETIME/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CUSTOMERID">
            <con:configuration>
              <token>&lt;CTD_CUSTOMERID/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CONTRACTCOMPANYNAME">
            <con:configuration>
              <token>&lt;CTD_CONTRACTCOMPANYNAME/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CONTRACTSTREET">
            <con:configuration>
              <token>&lt;CTD_CONTRACTSTREET/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CONTRACTCITY">
            <con:configuration>
              <token>&lt;CTD_CONTRACTCITY/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CONTRACTCOUNTRY">
            <con:configuration>
              <token>&lt;CTD_CONTRACTCOUNTRY/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CONNECTIONSTREET">
            <con:configuration>
              <token>&lt;CTD_CONNECTIONSTREET/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CONNECTIONCITY">
            <con:configuration>
              <token>&lt;CTD_CONNECTIONCITY/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CONNECTIONCOUNTRY">
            <con:configuration>
              <token>&lt;CTD_CONNECTIONCOUNTRY/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="5cd23510-e4af-441e-8075-a585f89691fb" name="Xpath: assert CTD_CTP_BUFFERING">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CTP_BUFFERING[1]/text()</path>
              <content>${#TestSuite#par_ctp_buffering}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_NPR_ID">
            <con:configuration>
              <token>&lt;CTD_NPR_ID/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_IFT_ID">
            <con:configuration>
              <token>&lt;CTD_IFT_ID/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="f36a5fdb-2755-403f-8a87-492c9edeef39" name="Xpath: assert CTD_CTR_DT_ID">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CTR_DT_ID[1]/text()</path>
              <content>${#TestSuite#ctd_ctr_dt_id}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="f36a5fdb-2755-403f-8a87-492c9edeef39" name="Xpath: assert CTD_CTRA_DT_ID">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CTRA_DT_ID[1]</path>
              <content>${#TestSuite#ctd_ctra_dt_id}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CTCH_WISHDATETIME">
            <con:configuration>
              <token>&lt;CTD_CTCH_WISHDATETIME></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CTCHA_PROPOSEDDATETIME">
            <con:configuration>
              <token>&lt;CTD_CTCHA_PROPOSEDDATETIME/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CONTRACTADDRESS">
            <con:configuration>
              <token>&lt;CTD_CONTRACTADDRESS/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CONNECTIONADDRESS">
            <con:configuration>
              <token>&lt;CTD_CONNECTIONADDRESS/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_INFRA_ID">
            <con:configuration>
              <token>&lt;CTD_INFRA_ID/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="61f553a7-28ef-45c3-a740-e8509a83fd72" name="Script: assert CTD_VERSION">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/CTD_VERSION[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="f36a5fdb-2755-403f-8a87-492c9edeef39" name="Xpath: assert CTD_CONTRACT_EARLYTERMINATION">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CONTRACT_EARLYTERMINATION[1]/text()</path>
              <content>${#TestSuite#ctd_contract_earlytermination}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTCH" id="5a8d506a-9f19-49a4-ad14-8430f3b79c71">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where DM.id=${#TestCase#ctchDMId} 
order by createddate desc</con:query>
          <con:assertion type="JDBC Status" id="2310f440-1122-4767-93cc-598cd58ff8ef" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="1ea9053c-f9e1-4b31-89f9-cb2ee323986a" name="Xpath: assert DM_CTD_ID">
            <con:configuration>
              <path>/Results/ResultSet/Row/DM_CTD_ID/text()</path>
              <content>${#TestCase#ctdId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="665e9acf-d49a-48fb-92cc-468e9dee1711" name="Contains: assert DM_EBC_ID">
            <con:configuration>
              <token>&lt;DM_EBC_ID/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="e8d3ad33-375e-4900-992c-9cc99409196f" name="Xpath: assert DM_MST_ID">
            <con:configuration>
              <path>/Results/ResultSet/Row/DM_MST_ID/text()</path>
              <content>7</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="ee562cfa-af8e-40d5-be51-5463f4b5f218" name="Xpath: assert DM_IT_ID">
            <con:configuration>
              <path>/Results/ResultSet/Row/DM_IT_ID/text()</path>
              <content>${#TestSuite#recipient_soap_interface_id}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="0cd5dc12-162e-48cd-9248-b411b5b1814f" name="Xpath: assert DM_MESSAGE_STATUS">
            <con:configuration>
              <path>/Results/ResultSet/Row/DM_MESSAGE_STATUS/text()</path>
              <content>0</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="d05dccd5-f112-4cd3-8ced-7fbe76e0e06a" name="Xpath: assert DM_MSGIDENTFIER">
            <con:configuration>
              <path>/Results/ResultSet/Row/DM_MSGIDENTFIER/text()</path>
              <content>${#TestSuite#recipient}-${#TestCase#contractId}-03</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="0848c8f5-8877-470c-bfab-67764dbfe0d9" name="Script: assert DM_MSGDATETIME">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "ctraCreateTime", "//Results[1]/ResultSet[1]/Row[1]/DM_MSGDATETIME[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="5624737a-c3b7-4974-bb3d-5273e8e45352" name="Xpath: assert DM_DATETIME">
            <con:configuration>
              <path>/Results/ResultSet/Row/DM_DATETIME/text()</path>
              <content>${#TestCase#proposedDateWithoutT}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="4ae98ed1-7881-43fe-96f4-d2a0571daeb7" name="Xpath: assert DM_NOTE">
            <con:configuration>
              <path>/Results/ResultSet/Row/DM_NOTE/text()</path>
              <content>Change ${#TestSuite#soapVersion} OK</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="c9505fcb-938e-4139-9e28-b37a56f16738" name="Xpath: assert DM_ITERATION_COUNT">
            <con:configuration>
              <path>/Results/ResultSet/Row/DM_ITERATION_COUNT/text()</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="fc5ce309-1de5-42ed-a552-40b361020f97" name="Xpath: assert ACTIVE">
            <con:configuration>
              <path>/Results/ResultSet/Row/ACTIVE/text()</path>
              <content>t</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="beba1af9-ff3a-4d95-b4a9-b4ce758ab7fd" name="Script: assert CREATEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "ctraCreateTime", "//Results[1]/ResultSet[1]/Row[1]/CREATEDDATE[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="da8b1e4d-d9c5-48e1-b397-5e4ee527a74d" name="Script: assert MODIFIEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "ctraCreateTime", "//Results[1]/ResultSet[1]/Row[1]/MODIFIEDDATE[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="576559b4-bbd7-4bf5-97f2-8c951d824b32" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctchDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_CheckOutGoingMsgType" id="1cbe0662-cf4c-4967-963f-934f843783c7">
        <con:settings/>
        <con:config>
          <script>def outtype = testRunner.testCase.testSuite.getPropertyValue("recipientOutMsg")

if (outtype == 'EMAIL') {
    	  testRunner.gotoStepByName( "JDBC_SXM Table_NoRecord_CTCH")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_ST Table_Send_CTCH" id="0aeb988b-dffc-4bec-ab54-6c7ce320c015">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_transactions 
where st_sender='${#TestSuite#recipient}' 
and st_receiver='${#TestSuite#donor}' 
and st_send_received='SEND' 
and st_message like '%${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01%'
and st_message like '%change%'
and id>${#TestCase#Id}</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [ST_TRANSACTION_ID]" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//ST_TRANSACTION_ID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify SEND Status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//ST_SEND_RECEIVED</path>
              <content>SEND</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" name="Contains: Verify Change Request" id="a1e1b0ed-fff7-4f8c-9eba-dee62ae7b198">
            <con:configuration>
              <token>change</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="40fa4a9b-34bc-47c5-a651-8b225e523334" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="d61de3ac-475a-43e4-aaf5-8b421c411464" name="Xpath: Verify Sender">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_SENDER[1]</path>
              <content>${#TestSuite#recipient}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="96350074-db6f-467f-9402-f351c4e3eb1e" name="Xpath: Verify Receiver">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_RECEIVER[1]</path>
              <content>${#TestSuite#donor}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple NotContains" id="d4f7f14c-500e-4519-ad2b-89ff5e57a404" name="NotContains: Technical Sender">
            <con:configuration>
              <token>&lt;ST_TECHNICAL_SENDER></token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple NotContains" id="d4f7f14c-500e-4519-ad2b-89ff5e57a404" name="NotContains: User_Name">
            <con:configuration>
              <token>&lt;ST_USER_NAME></token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple NotContains" id="d4f7f14c-500e-4519-ad2b-89ff5e57a404" name="NotContains: USER_IP">
            <con:configuration>
              <token>&lt;ST_USER_IP></token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="b0785e66-97d6-48d3-93b8-52bf2e298f3b" name="Script: Verify Message_DATETIME">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "ctchCreateTime", "//Results[1]/ResultSet[1]/Row[1]/ST_MESSAGE_DATETIME[1]/text()", 1);
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify Status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//ST_STATUS</path>
              <content>Done</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="0cd1ca74-fcf1-46d9-974c-fe9be6b2d13b" name="Script: Verify ST_STATUS_DATETIME">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "ctchCreateTime", "//Results[1]/ResultSet[1]/Row[1]/ST_STATUS_DATETIME[1]/text()", 1);
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_CTCH" id="39e25f83-ab91-4a84-b9cc-821984a7a034">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where
sxm_xml_message like '%${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01%'
and sxm_xml_message like '%/${#TestSuite#donorSoapVersion}%'
and sxm_xml_message_type = 'Change'
and sxm_sender = '${#TestSuite#recipient}'
and sxm_receiver = '${#TestSuite#donor}'
--and sxm_retry_count &lt;=1</con:query>
          <con:assertion type="JDBC Status" id="cdeae0b1-5642-4ec0-840c-0a705c7b1cd5" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="0556b0e2-dbbc-4407-aae9-71a1337500f5" name="Xpath: assert SXM_XML_MESSAGE_TYPE">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/SXM_XML_MESSAGE_TYPE[1]</path>
              <content>Change</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="98267bf6-cb04-4f93-9c2d-7ee0bb9d9a14" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/SXM_DM_ID/text()</path>
              <content>${#TestCase#ctchDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="0556b0e2-dbbc-4407-aae9-71a1337500f5" name="Xpath: assert ACTIVE">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ACTIVE[1]</path>
              <content>t</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="f7a96af5-e0ab-44e5-b2bb-d0a3cb09c255" name="Xpath: assert SXM_STATUS">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/SXM_STATUS[1]</path>
              <content>Done</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="f7a96af5-e0ab-44e5-b2bb-d0a3cb09c255" name="Xpath: assert SXM_RETRY_COUNT">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/SXM_RETRY_COUNT[1]</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="e31eb762-26ba-4058-b8dc-b5c75f834730" name="Script: Xpath: assert CREATEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/CREATEDDATE[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="e31eb762-26ba-4058-b8dc-b5c75f834730" name="Script: Xpath: assert MODIFIEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/MODIFIEDDATE[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="e31eb762-26ba-4058-b8dc-b5c75f834730" name="Script: Xpath: assert SXM_XML_MESSAGE_DATETIME">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/SXM_XML_MESSAGE_DATETIME[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="e31eb762-26ba-4058-b8dc-b5c75f834730" name="Script: Xpath: assert SXM_STATUS_DATETIME">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/SXM_STATUS_DATETIME[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="9eb86fe4-84a1-48bc-8294-d545336ecdcd" name="Xpath: assert SXM_SENDER">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/SXM_SENDER[1]</path>
              <content>${#TestSuite#recipient}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="9eb86fe4-84a1-48bc-8294-d545336ecdcd" name="Xpath: assert SXM_RECEIVER">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/SXM_RECEIVER[1]</path>
              <content>${#TestSuite#donor}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_CheckOutGoingMsgType1" id="f328cd29-dd4d-4d5d-a59e-cd6875e0e805">
        <con:settings/>
        <con:config>
          <script>def outtype = testRunner.testCase.testSuite.getPropertyValue("recipientOutMsg")

if (outtype == 'SOAP') {
    	  testRunner.gotoStepByName( "CTCHA")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_NoRecord_CTCH" id="95aaaeb7-01bf-4dab-bf8a-defff224c46f">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where
sxm_xml_message like '%${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01%'
and sxm_xml_message_type = 'Change'
and sxm_sender = '${#TestSuite#recipient}'
and sxm_receiver = '${#TestSuite#donor}'</con:query>
          <con:assertion type="JDBC Status" id="37763c21-6ed0-4e08-99a5-0bf81245ec25" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="2ce25751-49dc-43b6-a30c-bcc60575501a" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>0</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="CTCHA" id="9f226d9c-6fb3-4ed5-a635-3f6581d48585">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>CompWebserviceSoap11</con:interface>
          <con:operation>SendMessages</con:operation>
          <con:request name="CTCHA" id="83d7229a-676a-4c41-81cc-3429f324fea1" wssPasswordType="PasswordText">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#SoapUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="http://coin.nl/ws/schema">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:SendMessagesRequest>
         <sch:Sender>${#TestSuite#donor}</sch:Sender>
         <sch:Messages>
            <sch:Message>
               <sch:Text><![CDATA[<?xml version="1.0"?>
<message xmlns="http://www.coin.nl/Overstappen_MESSAGES">
<header>
<receiver>
<serviceprovider>${#TestSuite#recipient}</serviceprovider>
</receiver>
<sender>
<serviceprovider>${#TestSuite#donor}</serviceprovider>
</sender>
<messageid>${#TestSuite#recipient}-${#TestCase#contractId}-001</messageid>
<timestamp>${#TestSuite#TimestampNOW}</timestamp>
</header>
<body>
<changeanswer>
<${#TestSuite#donorSoapVersion}>
<dossierid>${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01</dossierid>
<blocking>N</blocking>
<wishdatetime>${#TestCase#proposedDate}</wishdatetime>
<proposeddatetime>${#TestCase#proposedDate}</proposeddatetime>
<note>Change Answer sent ${#TestSuit#donorSoapVersion} OK, expected ${#TestSuite#soapVersion}</note>
</${#TestSuite#donorSoapVersion}>
</changeanswer>
</body>
</message>]]]]>><![CDATA[</sch:Text>
            </sch:Message>
         </sch:Messages>
      </sch:SendMessagesRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="0408c23d-c32c-480c-b33e-7f633dc17c95"/>
            <con:assertion type="GroovyScriptAssertion" id="facd78c0-f429-4837-9e4e-fa25b476d712" name="Script Assertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
//def groovyUtilsPro = new com.eviware.soapui.support.GroovyUtilsPro( context )

def holder = new XmlHolder( messageExchange.responseContentAsXml )
holder.namespaces["ns2"] = "http://coin.nl/ws/schema"
def transactionId = holder.getNodeValue( "//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]" )
messageExchange.modelItem.testStep.testCase.setPropertyValue("ctchaTransactionId",transactionId)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="2901c6a7-5d5e-45fa-bcc8-d772c2d309de" name="Script Assertion 1">
              <con:configuration>
                <scriptText><![CDATA[import com.eviware.soapui.support.XmlHolder
import java.util.Date;
import java.text.SimpleDateFormat;
def str = messageExchange.getRequestContentAsXml()
log.info str
def holder = new XmlHolder(str)

def ctchaSentMessage = str.substring(str.lastIndexOf("<soapenv:Body>")+14, str.lastIndexOf("</soapenv:Body>"))
ctchaSentMessage = ctchaSentMessage.replace("<sch:SendMessagesRequest>", "<?xml version=\"1.0\" encoding=\"UTF-8\"?><sch:SendMessagesRequest xmlns:sch=\"http://coin.nl/ws/schema\">")
messageExchange.modelItem.testStep.testCase.setPropertyValue("ctchaSentMessage",ctchaSentMessage.trim())

def mainMessage = holder.getNodeValue("//sch:Text")
messageExchange.modelItem.testStep.testCase.setPropertyValue("ctchaMainMessage",mainMessage)

def createTime = mainMessage.substring(mainMessage.lastIndexOf("<timestamp>")+11, mainMessage.lastIndexOf("</timestamp>"))
def time = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").parse(createTime)
def Id = time.format("yyyy-MM-dd HH:mm:ss")
messageExchange.modelItem.testStep.testCase.setPropertyValue("ctchaCreateTime",Id)]]></scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#TestSuite#donorUserName}</con:username>
              <con:password>${#TestSuite#donorPassWord}</con:password>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_ST Table_CTHA" id="125270b3-60d8-4c9a-bb18-5a73d77deefd">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_transactions 
where st_transaction_id = '${#TestCase#ctchaTransactionId}'</con:query>
          <con:assertion type="JDBC Status" id="9cbb836e-9f7a-4281-b9f5-a9615f9ee803" name="JDBC Status"/>
          <con:assertion type="GroovyScriptAssertion" id="77af631e-a991-48c5-b7c6-43b4c54de0ad" name="Script: store SoapTransaction.id">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctchaId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify ST_SEND_RECEIVED" id="9db0e630-c611-4fc1-b0bc-fb6028a6a7c3">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_SEND_RECEIVED[1]</path>
              <content>received</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="dadbc5da-a584-42c6-8a0c-81209ad1d2a0" name="Xpath: Verify Sender">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_SENDER[1]</path>
              <content>${#TestSuite#donor}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="d2fb6ceb-f46e-41fb-8cfd-fa27e17aff7e" name="Xpath: VerifyReceiver">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_RECEIVER[1]</path>
              <content>COIN</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="d2c7ca97-d41e-4686-9ab5-f4be017d8f55" name="Xpath: assert ST_MESSAGE">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_MESSAGE/text()</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="f61b627d-10c9-4900-94d4-2e5659d70dfc" name="Script: assert ST_MESSAGE_DATETIME">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "ctchaCreateTime", "//Results[1]/ResultSet[1]/Row[1]/ST_MESSAGE_DATETIME[1]/text()", 1);
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="d2c7ca97-d41e-4686-9ab5-f4be017d8f55" name="Xpath: assert ST_STATUS">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_STATUS/text()</path>
              <content>Done</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="9605588d-6ac7-40a4-95dc-b9297e4fed60" name="Xpath: Verify ST_TECHNICAL_SENDER">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_TECHNICAL_SENDER[1]</path>
              <content>${#TestSuite#donor}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="befe94fa-90f9-4f84-96d3-ba20e39f5ce2" name="Script: assert CREATEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "ctchaCreateTime", "//Results[1]/ResultSet[1]/Row[1]/CREATEDDATE[1]/text()", 1);
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d953429f-d92b-4ebd-a854-da1e2c0c005b" name="Script: assert MODIFIEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "ctchaCreateTime", "//Results[1]/ResultSet[1]/Row[1]/MODIFIEDDATE[1]/text()", 1);
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="ab791ba5-6f04-41e7-b35b-33becc8e28d3" name="Script: assert ST_STATUS_DATETIME">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "ctchaCreateTime", "//Results[1]/ResultSet[1]/Row[1]/ST_STATUS_DATETIME[1]/text()", 1);
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Wait For Poller 4" id="023ae69e-6afb-48b7-8432-de13ed9f8dff">
        <con:settings/>
        <con:config>
          <delay>${#TestSuite#PollTime}</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_RSXM Table_CTCHA" id="439adf44-264a-4515-9e60-fe808ca14247">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.raw_soap_xml_messages where rsxm_st_id = '${#TestCase#ctchaId}'</con:query>
          <con:assertion type="JDBC Status" id="93200de3-311a-45e4-9354-8786e5f8cb4b" name="JDBC Status"/>
          <con:assertion type="XPath Match" name="Xpath: assert RSXM_XML_MESSAGE" id="14d90270-6f91-4150-993a-d24f2adbd507">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/RSXM_XML_MESSAGE[1]/text()</path>
              <content>${#TestCase#ctchaMainMessage}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert RSXM_STATUS" id="14d90270-6f91-4150-993a-d24f2adbd507">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/RSXM_STATUS[1]</path>
              <content>Done</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="a71e9107-d908-4e98-8bdc-c33775015ef6" name="Script: SaveRSXM_DM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/RSXM_DM_ID[1]", "ctchaDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="77940cfd-635d-4d4d-8fb6-b1e722ea02df" name="Script: assert CREATEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "ctchaCreateTime", "//Results[1]/ResultSet[1]/Row[1]/CREATEDDATE[1]/text()", 1);
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="ffeaa661-dd52-4035-9c1d-4eb90eb44d66" name="Script: assert MODIFIEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "ctchaCreateTime", "//Results[1]/ResultSet[1]/Row[1]/MODIFIEDDATE[1]/text()", 1);
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert PROCESS_DATETIME" id="14d90270-6f91-4150-993a-d24f2adbd507">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/PROCESS_DATETIME[1]</path>
              <content>&lt;PROCESS_DATETIME/></content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="03763a0a-800e-4a49-8d30-a466513a6a26" name="Script: SaveRSXM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctchaRSXMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table_CTCHA" id="9a247068-2f25-43b7-87f0-ee1451d38d8c">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier 
where id='${#TestCase#ctdId}'</con:query>
          <con:assertion type="JDBC Status" id="1841841d-972a-4bf0-bc88-c1ad0b5ede11" name="JDBC Status"/>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: assert CTD_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def ctdid = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctdId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="5cd23510-e4af-441e-8075-a585f89691fb" name="Xpath: assert CTD_SPR_RECIPIENT_ID">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_SPR_RECIPIENT_ID[1]/text()</path>
              <content>${#TestSuite#recipientId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="796567b6-e3ec-4dc0-a183-0fa21a9b4ee1" name="Xpath: assert CTD_SPR_DONOR_ID">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_SPR_DONOR_ID[1]/text()</path>
              <content>${#TestSuite#donorId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="af76937d-74c4-4027-b279-71130cbec99e" name="Xpath: Xpath : assert CTD_PRV_ID">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_PRV_ID[1]/text()</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert CTD_DOSSIER_STATUS" id="ac17d9f6-9653-435c-bd0c-9af6917f2aa6">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_DOSSIER_STATUS[1]/text()</path>
              <content>Pending</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert CTD_PROCESS_STATUS" id="ede8cc08-99ab-46ca-baf4-97e9f0895428">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_PROCESS_STATUS[1]/text()</path>
              <content>Change Answer OK</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="0f11b543-a937-43a8-a6e6-5fa3f92e784f" name="Xpath: assert CTD_CONTRACTID">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CONTRACTID[1]/text()</path>
              <content>2-${#TestCase#contractID}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="5cd23510-e4af-441e-8075-a585f89691fb" name="Xpath: assert CTD_REQUESTEDDATETIME">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_REQUESTEDDATETIME[1]/text()</path>
              <content>${#TestCase#proposedDateWithoutT}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="5cd23510-e4af-441e-8075-a585f89691fb" name="Xpath: assert CTD_CTR_WISHDATETIME">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CTR_WISHDATETIME[1]/text()</path>
              <content>${#TestCase#wishDateWithoutT}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CTRA_PROPOSEDDATETIME">
            <con:configuration>
              <token>&lt;CTD_CTRA_PROPOSEDDATETIME/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_EMAILADDRESSCONTACT">
            <con:configuration>
              <token>&lt;CTD_EMAILADDRESSCONTACT/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_TELEPHONECONTACT">
            <con:configuration>
              <token>&lt;CTD_TELEPHONECONTACT/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="5cd23510-e4af-441e-8075-a585f89691fb" name="Xpath: assert CTD_CONTRACTINITIALS">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CONTRACTINITIALS[1]/text()</path>
              <content>A</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CONTRACTPREFIX">
            <con:configuration>
              <token>&lt;CTD_CONTRACTPREFIX/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="5cd23510-e4af-441e-8075-a585f89691fb" name="Xpath: assert CTD_CONTRACTLASTNAME">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CONTRACTLASTNAME[1]/text()</path>
              <content>COIN</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="5cd23510-e4af-441e-8075-a585f89691fb" name="Xpath: assert CTD_CONTRACTZIPCODE">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CONTRACTZIPCODE[1]/text()</path>
              <content>1389SS</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="5cd23510-e4af-441e-8075-a585f89691fb" name="Xpath: assert CTD_CONTRACTHOUSENUMBER">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CONTRACTHOUSENUMBER[1]/text()</path>
              <content>99999</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="5cd23510-e4af-441e-8075-a585f89691fb" name="Xpath: assert CTD_NOTE">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_NOTE[1]/text()</path>
              <content>Sunny day-sent ${#TestSuite#soapVersion} expect ${#TestSuite#donorSoapVersion}-linenr. ${#TestSuite#lineNumber}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="5cd23510-e4af-441e-8075-a585f89691fb" name="Xpath: assert CTD_CTP_MIGRATION">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CTP_MIGRATION[1]/text()</path>
              <content>f</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="5cd23510-e4af-441e-8075-a585f89691fb" name="Xpath: assert ACTIVE">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ACTIVE[1]/text()</path>
              <content>t</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="61f553a7-28ef-45c3-a740-e8509a83fd72" name="Script: assert CREATEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/CREATEDDATE[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="61f553a7-28ef-45c3-a740-e8509a83fd72" name="Script: assert MODIFIEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/MODIFIEDDATE[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="61f553a7-28ef-45c3-a740-e8509a83fd72" name="Script: assert CTD_DM_LAST_MSGDATETIME">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/CTD_DM_LAST_MSGDATETIME[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CTP_ACTUALDATETIME">
            <con:configuration>
              <token>&lt;CTD_CTP_ACTUALDATETIME/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CUSTOMERID">
            <con:configuration>
              <token>&lt;CTD_CUSTOMERID/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CONTRACTCOMPANYNAME">
            <con:configuration>
              <token>&lt;CTD_CONTRACTCOMPANYNAME/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CONTRACTSTREET">
            <con:configuration>
              <token>&lt;CTD_CONTRACTSTREET/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CONTRACTCITY">
            <con:configuration>
              <token>&lt;CTD_CONTRACTCITY/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CONTRACTCOUNTRY">
            <con:configuration>
              <token>&lt;CTD_CONTRACTCOUNTRY/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CONNECTIONSTREET">
            <con:configuration>
              <token>&lt;CTD_CONNECTIONSTREET/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CONNECTIONCITY">
            <con:configuration>
              <token>&lt;CTD_CONNECTIONCITY/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CONNECTIONCOUNTRY">
            <con:configuration>
              <token>&lt;CTD_CONNECTIONCOUNTRY/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="5cd23510-e4af-441e-8075-a585f89691fb" name="Xpath: assert CTD_CTP_BUFFERING">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CTP_BUFFERING[1]/text()</path>
              <content>${#TestSuite#par_ctp_buffering}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_NPR_ID">
            <con:configuration>
              <token>&lt;CTD_NPR_ID/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_IFT_ID">
            <con:configuration>
              <token>&lt;CTD_IFT_ID/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CTCH_WISHDATETIME">
            <con:configuration>
              <token>&lt;CTD_CTCH_WISHDATETIME/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CTCHA_PROPOSEDDATETIME">
            <con:configuration>
              <token>&lt;CTD_CTCHA_PROPOSEDDATETIME/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="8024a1e9-de83-489d-9150-905863ad0ef2" name="Xpath: assert CTD_CONTRACT_EARLYTERMINATION">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CONTRACT_EARLYTERMINATION[1]/text()</path>
              <content>f</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CONTRACTADDRESS">
            <con:configuration>
              <token>&lt;CTD_CONTRACTADDRESS/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CONNECTIONADDRESS">
            <con:configuration>
              <token>&lt;CTD_CONNECTIONADDRESS/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_INFRA_ID">
            <con:configuration>
              <token>&lt;CTD_INFRA_ID/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="61f553a7-28ef-45c3-a740-e8509a83fd72" name="Script: assert CTD_VERSION">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/CTD_VERSION[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="f36a5fdb-2755-403f-8a87-492c9edeef39" name="Xpath: assert CTD_CONTRACTHOUSENUMBEREXT">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CONTRACTHOUSENUMBEREXT</path>
              <content>&lt;CTD_CONTRACTHOUSENUMBEREXT/></content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="f36a5fdb-2755-403f-8a87-492c9edeef39" name="Xpath: assert CTD_CONNECTIONZIPCODE">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CONNECTIONZIPCODE[1]/text()</path>
              <content>1389SS</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="f36a5fdb-2755-403f-8a87-492c9edeef39" name="Xpath: assert CTD_CONNECTIONHOUSENUMBER">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CONNECTIONHOUSENUMBER[1]/text()</path>
              <content>99999</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="f36a5fdb-2755-403f-8a87-492c9edeef39" name="Xpath: assert CTD_CONNECTIONHOUSENUMBEREXT">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CONNECTIONHOUSENUMBEREXT</path>
              <content>&lt;CTD_CONNECTIONHOUSENUMBEREXT/></content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="f36a5fdb-2755-403f-8a87-492c9edeef39" name="Xpath: assert CTD_CTR_DT_ID">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CTR_DT_ID[1]/text()</path>
              <content>${#TestSuite#ctd_ctr_dt_id}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="f36a5fdb-2755-403f-8a87-492c9edeef39" name="Xpath: assert CTD_CONTRACT_EARLYTERMINATION">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CONTRACT_EARLYTERMINATION[1]/text()</path>
              <content>${#TestSuite#ctd_contract_earlytermination}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="35244668-729d-4cd3-a40a-1d9f8a5b5112" name="Xpath: assert CTD_EBC_ID">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_EBC_ID[1]/text()</path>
              <content>14</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_MSL Table_CTCHA" id="37649a85-61ad-4091-ab35-5d2ac669ab70">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>Select * from overstappen.message_logging where 
msl_soap_transaction_id = '${#TestCase#ctchaTransactionId}'</con:query>
          <con:assertion type="JDBC Status" id="e095441a-3cf8-4288-8e40-4300718feece" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="90de6c58-ce01-40f7-8601-320c181b4c6a" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6f97994c-fe88-4225-a5fe-6b03e5f2f4df" name="Xpath: assert MSL_MSGIDENTIFIER">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_MSGIDENTIFIER/text()</path>
              <content>${#TestSuite#recipient}-${#TestCase#contractId}-001</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d64191b1-b311-474b-8343-c036a85b7506" name="Script: assert TIMESTAMP">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "ctchaCreateTime", "//Results[1]/ResultSet[1]/Row[1]/MSL_TIMESTAMP[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="600e79cd-a35e-4f1a-8285-d8ffbfca6a9c" name="Contains: assert MSL_MAIL_SUBJECT">
            <con:configuration>
              <token>&lt;MSL_MAIL_SUBJECT/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6f97994c-fe88-4225-a5fe-6b03e5f2f4df" name="Xpath: assert MSL_MAIL_FROM_ADDRESS">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_MAIL_FROM_ADDRESS</path>
              <content>&lt;MSL_MAIL_FROM_ADDRESS/></content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="600e79cd-a35e-4f1a-8285-d8ffbfca6a9c" name="Contains: assert MSL_MAIL_TO_ADDRESS">
            <con:configuration>
              <token>&lt;MSL_MAIL_TO_ADDRESS/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6f97994c-fe88-4225-a5fe-6b03e5f2f4df" name="Xpath: assert MSL_CTD_ID">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_CTD_ID/text()</path>
              <content>${#TestCase#ctdId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6f97994c-fe88-4225-a5fe-6b03e5f2f4df" name="Xpath: assert MSL_DM_ID">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_DM_ID/text()</path>
              <content>${#TestCase#ctchaDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6f97994c-fe88-4225-a5fe-6b03e5f2f4df" name="Xpath: assert MSL_IT_ID">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_IT_ID/text()</path>
              <content>${#TestSuite#donor_ctra_interface_id}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert MSL_CLC_ID]" id="e99eef8e-047f-4dff-930b-7b92f2348249">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/MSL_CLC_ID[1]/text()</path>
              <content>57</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="600e79cd-a35e-4f1a-8285-d8ffbfca6a9c" name="Contains: assert MSL_MAIL_MESSAGE_ID">
            <con:configuration>
              <token>&lt;MSL_MAIL_MESSAGE_ID/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="af9e3913-4e23-4232-9d26-e5b4f37f31f5" name="Contains: assert MSL_LOG">
            <con:configuration>
              <token>&lt;MSL_LOG>503 - Marking message as commit success - Dossier Message Saved successfully</token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="31361619-e64f-4ff3-b185-786e5879ac46" name="Contains: assert MSL_MAIL_MESSAGE_BLOB">
            <con:configuration>
              <token>&lt;MSL_MAIL_MESSAGE_BLOB/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6f97994c-fe88-4225-a5fe-6b03e5f2f4df" name="Xpath: assert MSL_SOAP_MESSAGE_BLOB">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_SOAP_MESSAGE_BLOB/text()</path>
              <content>${#TestCase#ctchaMainMessage}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6f97994c-fe88-4225-a5fe-6b03e5f2f4df" name="Xpath: assert ACTIVE">
            <con:configuration>
              <path>/Results/ResultSet/Row/ACTIVE/text()</path>
              <content>t</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d64191b1-b311-474b-8343-c036a85b7506" name="Script: assert CREATEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "ctchaCreateTime", "//Results[1]/ResultSet[1]/Row[1]/CREATEDDATE[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d64191b1-b311-474b-8343-c036a85b7506" name="Script: assert MODIFIEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "ctchaCreateTime", "//Results[1]/ResultSet[1]/Row[1]/MODIFIEDDATE[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6f97994c-fe88-4225-a5fe-6b03e5f2f4df" name="Xpath: assert MSL_FROM_SPR_CODE">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_FROM_SPR_CODE/text()</path>
              <content>${#TestSuite#donor}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6f97994c-fe88-4225-a5fe-6b03e5f2f4df" name="Xpath: assert MSL_TO_SPR_CODE">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_TO_SPR_CODE/text()</path>
              <content>${#TestSuite#recipient}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6f97994c-fe88-4225-a5fe-6b03e5f2f4df" name="Xpath: assert MSL_ADMIN">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_ADMIN/text()</path>
              <content>f</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6f97994c-fe88-4225-a5fe-6b03e5f2f4df" name="Xpath: assert MSL_ST_ID">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_ST_ID/text()</path>
              <content>${#TestCase#ctchaId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTCHA" id="81bb2369-fb19-4fad-9f96-c6c69775e1d8">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where DM.id=${#TestCase#ctchaDMId} 
order by createddate desc</con:query>
          <con:assertion type="JDBC Status" id="0270de28-900d-4d60-920c-4ca5f131013f" name="JDBC Status"/>
          <con:assertion type="XPath Match" name="Xpath: assert DM_CTD_ID" id="ac17d9f6-9653-435c-bd0c-9af6917f2aa6">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/DM_CTD_ID/text()</path>
              <content>${#TestCase#ctdId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e13d4d4f-30f6-4c9c-9b09-26cbc1d409e3" name="Contains: assert DM_EBC_ID">
            <con:configuration>
              <token>&lt;DM_EBC_ID>14&lt;/DM_EBC_ID></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b1ecf376-5d04-44ad-b5ff-2f3471c1c8f6" name="Xpath: assert DM_MST_ID">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/DM_MST_ID/text()</path>
              <content>9</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b1ecf376-5d04-44ad-b5ff-2f3471c1c8f6" name="Xpath: assert DM_IT_ID">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/DM_IT_ID/text()</path>
              <content>${#TestSuite#donor_soap_interface_id}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert DM_MESSAGE_STATUS" id="ac17d9f6-9653-435c-bd0c-9af6917f2aa6">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/DM_MESSAGE_STATUS/text()</path>
              <content>0</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert DM_MSGIDENTFIER" id="ac17d9f6-9653-435c-bd0c-9af6917f2aa6">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/DM_MSGIDENTFIER/text()</path>
              <content>${#TestSuite#recipient}-${#TestCase#contractId}-001</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="464c0c26-2264-46e1-84cd-16df6b706adb" name="Script: assert DM_MSGDATETIME">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/DM_MSGDATETIME[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert DM_DATETIME" id="ac17d9f6-9653-435c-bd0c-9af6917f2aa6">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/DM_DATETIME/text()</path>
              <content>${#TestCase#proposedDateWithoutT}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert DM_NOTE" id="ac17d9f6-9653-435c-bd0c-9af6917f2aa6">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/DM_NOTE/text()</path>
              <content>Change Answer sent ${#TestSuit#donorSoapVersion} OK, expected ${#TestSuite#soapVersion}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert DM_ITERATION_COUNT" id="ac17d9f6-9653-435c-bd0c-9af6917f2aa6">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/DM_ITERATION_COUNT/text()</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert ACTIVE" id="ac17d9f6-9653-435c-bd0c-9af6917f2aa6">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ACTIVE/text()</path>
              <content>t</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="464c0c26-2264-46e1-84cd-16df6b706adb" name="Script: assert CREATEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/CREATEDDATE[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="464c0c26-2264-46e1-84cd-16df6b706adb" name="Script: assert MODIFIEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/MODIFIEDDATE[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="c62314f7-418a-4ef3-b415-73b14a82d3fd" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctchaDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_ST Table_Send_CTCHA" id="058579bb-6fc5-4ce4-bdb0-f97d79c799f1">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_transactions 
where st_sender='${#TestSuite#donor}' 
and st_receiver='${#TestSuite#recipient}' 
and st_send_received='SEND' 
and st_message like '%${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01%'
and st_message like '%changeanswer%'
and id>${#TestCase#Id}</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [ST_TRANSACTION_ID]" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//ST_TRANSACTION_ID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify SEND Status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//ST_SEND_RECEIVED</path>
              <content>SEND</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" name="Contains: Verify Change Answer Request" id="a1e1b0ed-fff7-4f8c-9eba-dee62ae7b198">
            <con:configuration>
              <token>changeanswer</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="40fa4a9b-34bc-47c5-a651-8b225e523334" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="d61de3ac-475a-43e4-aaf5-8b421c411464" name="Xpath: Verify Sender">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_SENDER[1]</path>
              <content>${#TestSuite#donor}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="96350074-db6f-467f-9402-f351c4e3eb1e" name="Xpath: Verify Receiver">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_RECEIVER[1]</path>
              <content>${#TestSuite#recipient}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple NotContains" id="d4f7f14c-500e-4519-ad2b-89ff5e57a404" name="NotContains: Technical Sender">
            <con:configuration>
              <token>&lt;ST_TECHNICAL_SENDER></token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple NotContains" id="d4f7f14c-500e-4519-ad2b-89ff5e57a404" name="NotContains: User_Name">
            <con:configuration>
              <token>&lt;ST_USER_NAME></token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple NotContains" id="d4f7f14c-500e-4519-ad2b-89ff5e57a404" name="NotContains: USER_IP">
            <con:configuration>
              <token>&lt;ST_USER_IP></token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="b0785e66-97d6-48d3-93b8-52bf2e298f3b" name="Script: Verify Message_DATETIME">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "ctchaCreateTime", "//Results[1]/ResultSet[1]/Row[1]/ST_MESSAGE_DATETIME[1]/text()", 1);
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify Status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//ST_STATUS</path>
              <content>Done</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="0cd1ca74-fcf1-46d9-974c-fe9be6b2d13b" name="Script: Verify ST_STATUS_DATETIME">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "ctchaCreateTime", "//Results[1]/ResultSet[1]/Row[1]/ST_STATUS_DATETIME[1]/text()", 1);
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_CTCHA" id="f65492a8-1e60-4d98-aefa-5204f716a9fc">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where 
sxm_xml_message like '%${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01%'
and sxm_xml_message like '%&lt;blocking>N&lt;/blocking>%'
and sxm_xml_message_type = 'Change answer'
and sxm_sender = '${#TestSuite#donor}'
and sxm_receiver = '${#TestSuite#recipient}'</con:query>
          <con:assertion type="JDBC Status" id="cdeae0b1-5642-4ec0-840c-0a705c7b1cd5" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="98267bf6-cb04-4f93-9c2d-7ee0bb9d9a14" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/SXM_DM_ID/text()</path>
              <content>${#TestCase#ctchaDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="0556b0e2-dbbc-4407-aae9-71a1337500f5" name="Xpath: assert SXM_XML_MESSAGE_TYPE">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/SXM_XML_MESSAGE_TYPE[1]</path>
              <content>Change answer</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="0556b0e2-dbbc-4407-aae9-71a1337500f5" name="Xpath: assert ACTIVE">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ACTIVE[1]</path>
              <content>t</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="f7a96af5-e0ab-44e5-b2bb-d0a3cb09c255" name="Xpath: assert SXM_STATUS">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/SXM_STATUS[1]</path>
              <content>Done</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="f7a96af5-e0ab-44e5-b2bb-d0a3cb09c255" name="Xpath: assert SXM_RETRY_COUNT">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/SXM_RETRY_COUNT[1]</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="e31eb762-26ba-4058-b8dc-b5c75f834730" name="Script: Xpath: assert CREATEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/CREATEDDATE[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="e31eb762-26ba-4058-b8dc-b5c75f834730" name="Script: Xpath: assert MODIFIEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/MODIFIEDDATE[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="e31eb762-26ba-4058-b8dc-b5c75f834730" name="Script: Xpath: assert SXM_XML_MESSAGE_DATETIME">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/SXM_XML_MESSAGE_DATETIME[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="e31eb762-26ba-4058-b8dc-b5c75f834730" name="Script: Xpath: assert SXM_STATUS_DATETIME">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/SXM_STATUS_DATETIME[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="CTC" id="cab109fc-fa1f-48a9-ac40-acaf6a95c78a">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>CompWebserviceSoap11</con:interface>
          <con:operation>SendMessages</con:operation>
          <con:request name="CTC" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordText" id="3aa22f8f-37c1-4ea2-ba88-b80068a3761f">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#SoapUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="http://coin.nl/ws/schema">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <sch:SendMessagesRequest>\r
         <sch:Sender>${#TestSuite#recipient}</sch:Sender>\r
         <sch:Messages>\r
            <sch:Message>\r
               <sch:Text><![CDATA[<?xml version="1.0"?>
<message xmlns="http://www.coin.nl/Overstappen_MESSAGES">
<header>
<receiver>
<!--Optional:-->
<networkoperator>${#TestSuite#donor}</networkoperator>
<!--Optional:-->
<serviceprovider>${#TestSuite#donor}</serviceprovider>
</receiver>
<sender>
<!--Optional:-->
<networkoperator>${#TestSuite#recipient}</networkoperator>
<!--Optional:-->
<serviceprovider>${#TestSuite#recipient}</serviceprovider>
</sender>
<!--Optional:-->
<messageid>${#TestSuite#recipient}-${#TestCase#ContractId}-003</messageid>
<timestamp>${#TestSuite#TimestampNOW}</timestamp>
</header>
<body>
<cancel>
<${#TestSuite#soapVersion}>
<dossierid>${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01</dossierid>
<note>performed sent ${#TestSuite#soapVersion}, expect ${#TestSuite#donorSoapVersion}</note>
</${#TestSuite#soapVersion}>
</cancel>
</body>
</message>]]]]>><![CDATA[</sch:Text>\r
            </sch:Message>\r
         </sch:Messages>\r
      </sch:SendMessagesRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request>
            <con:assertion type="XPath Match" name="Match content of [ns2:TransactionId] using RegEx" id="1c471417-807a-4012-a734-b2dd5be94c8f">
              <con:configuration>
                <path>declare namespace ns2='http://coin.nl/ws/schema';
//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]/text()</path>
                <content>*</content>
                <allowWildcards>true</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" name="Check count of [ns2:TransactionId]" id="345c96a3-89a0-476e-9875-b0c18e04ef5b">
              <con:configuration>
                <path>declare namespace ns2='http://coin.nl/ws/schema';
count( //ns2:SendMessagesResponse/ns2:TransactionId)</path>
                <content>1</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert node [ns2:TransactionId]" id="63f77b9d-d209-4d74-ad56-a26982ab75c5">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
//def groovyUtilsPro = new com.eviware.soapui.support.GroovyUtilsPro( context )

def holder = new XmlHolder( messageExchange.responseContentAsXml )
holder.namespaces["ns2"] = "http://coin.nl/ws/schema"
def transactionId = holder.getNodeValue( "//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]" )
messageExchange.modelItem.testStep.testCase.setPropertyValue("ctcTransactionId",transactionId)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="96275a5b-55c0-46cf-bb6a-262955ccb5aa" name="Script Assertion">
              <con:configuration>
                <scriptText><![CDATA[import com.eviware.soapui.support.XmlHolder
import java.util.Date;
import java.text.SimpleDateFormat;
def str = messageExchange.getRequestContentAsXml()
log.info str
def holder = new XmlHolder(str)

def ctcSentMessage = str.substring(str.lastIndexOf("<soapenv:Body>")+14, str.lastIndexOf("</soapenv:Body>"))
ctcSentMessage = ctcSentMessage.replace("<sch:SendMessagesRequest>", "<?xml version=\"1.0\" encoding=\"UTF-8\"?><sch:SendMessagesRequest xmlns:sch=\"http://coin.nl/ws/schema\">")
messageExchange.modelItem.testStep.testCase.setPropertyValue("ctcSentMessage",ctcSentMessage.trim())

def mainMessage = holder.getNodeValue("//sch:Text")
messageExchange.modelItem.testStep.testCase.setPropertyValue("ctcMainMessage",mainMessage)

def createTime = mainMessage.substring(mainMessage.lastIndexOf("<timestamp>")+11, mainMessage.lastIndexOf("</timestamp>"))
def time = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").parse(createTime)
def Id = time.format("yyyy-MM-dd HH:mm:ss")
messageExchange.modelItem.testStep.testCase.setPropertyValue("ctcCreateTime",Id)]]></scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#TestSuite#recipientUserName}</con:username>
              <con:password>${#TestSuite#recipientPassWord}</con:password>
              <con:domain xsi:nil="true"/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://coin.nl/SendMessages"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_ST Table CTC" id="d26d26a6-64c5-4008-aeb0-a2ed71964ddd">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_transactions 
where st_transaction_id = '${#TestCase#ctcTransactionId}'</con:query>
          <con:assertion type="JDBC Status" id="4c8e493c-7ed2-46ff-8193-86eb2dc5ed36" name="JDBC Status"/>
          <con:assertion type="GroovyScriptAssertion" name="Script: stroteID" id="919aa515-934c-4b10-bd9d-dcd08c81b41c">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctcId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify ST_SEND_RECEIVED" id="9db0e630-c611-4fc1-b0bc-fb6028a6a7c3">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_SEND_RECEIVED[1]</path>
              <content>received</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="2178c251-77c1-4bdc-ad0b-4b940f128009" name="Xpath: assert ST_SENDER">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_SENDER[1]</path>
              <content>${#TestSuite#Recipient}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="30719227-3980-432b-bd57-2d9fe22bff77" name="Xpath: asseretST_RECEIVER">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_RECEIVER[1]</path>
              <content>COIN</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="c146c8c9-586a-46b3-8c0c-6fd6e0b74264" name="Script: assert ST_MESSAGE_DATETIME">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "ctcCreateTime", "//Results[1]/ResultSet[1]/Row[1]/ST_MESSAGE_DATETIME[1]/text()", 1);
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="e842182f-4259-470c-9b06-2eaa0477e96a" name="Xpath: assert ST_STATUS">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_STATUS/text()</path>
              <content>Done</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="cc9661e8-0a08-4866-a6d1-0ee72499f906" name="Script: assert ST_STATUS_DATETIME">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "ctcCreateTime", "//Results[1]/ResultSet[1]/Row[1]/ST_STATUS_DATETIME[1]/text()", 1);
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="ec6854d9-e195-4247-beb9-359b47ad5b8b" name="Script: assert CREATEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "ctcCreateTime", "//Results[1]/ResultSet[1]/Row[1]/CREATEDDATE[1]/text()", 1);
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="da945216-6355-4f3b-b23d-4304aa68cb06" name="Script: assert MODIFIEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "ctcCreateTime", "//Results[1]/ResultSet[1]/Row[1]/MODIFIEDDATE[1]/text()", 1);
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="1a275710-3a64-4214-9d7a-f1aa66e807b9" name="Xpath: assert TechSender">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_TECHNICAL_SENDER/text()</path>
              <content>${#TestSuite#recipient}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="aab582a9-d3f0-4795-8627-50eb856a8e4e" name="Xpath: assert UserName">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_NAME/text()</path>
              <content>${#TestSuite#recipientUserName}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="97968682-f3c7-4182-9d66-76c8ac8e6f36" name="Xpath: assert UserIP" disabled="true">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_IP/text()</path>
              <content>${#Project#UserIP}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="a2e8e4c0-7bfc-4f45-ae22-6000b23597ab" name="Script: assert ST_MESSAGE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.compareMessageString(holder, messageExchange, "ctcSentMessage", "//Results[1]/ResultSet[1]/Row[1]/ST_MESSAGE[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Wait For Poller 1" id="683ce35a-6383-4d1a-85f0-df493f1d18ff">
        <con:settings/>
        <con:config>
          <delay>${#TestSuite#PollTime}</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_RSXM Table_CTC" id="e6c217d2-844a-4699-a428-cc97dc68b48d">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.raw_soap_xml_messages where rsxm_st_id = '${#TestCase#ctcId}'</con:query>
          <con:assertion type="JDBC Status" id="93200de3-311a-45e4-9354-8786e5f8cb4b" name="JDBC Status"/>
          <con:assertion type="XPath Match" name="Xpath: assert RSXM_XML_MESSAGE" id="14d90270-6f91-4150-993a-d24f2adbd507">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/RSXM_XML_MESSAGE[1]/text()</path>
              <content>${#TestCase#ctcMainMessage}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert RSXM_STATUS" id="14d90270-6f91-4150-993a-d24f2adbd507">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/RSXM_STATUS[1]</path>
              <content>Done</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="a71e9107-d908-4e98-8bdc-c33775015ef6" name="Script: SaveRSXM_DM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/RSXM_DM_ID[1]", "ctcDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="77940cfd-635d-4d4d-8fb6-b1e722ea02df" name="Script: assert CREATEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "ctcCreateTime", "//Results[1]/ResultSet[1]/Row[1]/CREATEDDATE[1]/text()", 1);
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="ffeaa661-dd52-4035-9c1d-4eb90eb44d66" name="Script: assert MODIFIEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "ctcCreateTime", "//Results[1]/ResultSet[1]/Row[1]/MODIFIEDDATE[1]/text()", 1);
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert PROCESS_DATETIME" id="14d90270-6f91-4150-993a-d24f2adbd507">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/PROCESS_DATETIME[1]</path>
              <content>&lt;PROCESS_DATETIME/></content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert ACTIVE" id="14d90270-6f91-4150-993a-d24f2adbd507">
            <con:configuration>
              <path>//Results/ResultSet/Row[1]/ACTIVE/text()</path>
              <content>t</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="fc4b2fda-c0bd-4d52-9011-03897288835a" name="Script: SaveRSXM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctcRSXMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table_CTC" id="76383f44-36ab-440b-831e-26f4087ba649">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier where 
ctd_switchid = '${#TestSuite#Recipient}-${#TestSuite#Donor}-${#TestCase#ContractId}-01'</con:query>
          <con:assertion type="JDBC Status" id="1841841d-972a-4bf0-bc88-c1ad0b5ede11" name="JDBC Status"/>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: assert CTD_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def ctdid = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctdId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="5cd23510-e4af-441e-8075-a585f89691fb" name="Xpath: assert CTD_SPR_RECIPIENT_ID">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_SPR_RECIPIENT_ID[1]/text()</path>
              <content>${#TestSuite#recipientId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="796567b6-e3ec-4dc0-a183-0fa21a9b4ee1" name="Xpath: assert CTD_SPR_DONOR_ID">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_SPR_DONOR_ID[1]/text()</path>
              <content>${#TestSuite#donorId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="af76937d-74c4-4027-b279-71130cbec99e" name="Xpath: Xpath : assert CTD_PRV_ID">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_PRV_ID[1]/text()</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert CTD_DOSSIER_STATUS" id="ac17d9f6-9653-435c-bd0c-9af6917f2aa6">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_DOSSIER_STATUS[1]/text()</path>
              <content>Cancelled</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert CTD_PROCESS_STATUS" id="ede8cc08-99ab-46ca-baf4-97e9f0895428">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_PROCESS_STATUS[1]/text()</path>
              <content>Cancel</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="0f11b543-a937-43a8-a6e6-5fa3f92e784f" name="Xpath: assert CTD_CONTRACTID">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CONTRACTID[1]/text()</path>
              <content>2-${#TestCase#contractID}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="5cd23510-e4af-441e-8075-a585f89691fb" name="Xpath: assert CTD_REQUESTEDDATETIME">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_REQUESTEDDATETIME[1]/text()</path>
              <content>${#TestCase#proposedDateWithoutT}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="5cd23510-e4af-441e-8075-a585f89691fb" name="Xpath: assert CTD_CTR_WISHDATETIME">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CTR_WISHDATETIME[1]/text()</path>
              <content>${#TestCase#wishDateWithoutT}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CTRA_PROPOSEDDATETIME">
            <con:configuration>
              <token>&lt;CTD_CTRA_PROPOSEDDATETIME/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_EMAILADDRESSCONTACT">
            <con:configuration>
              <token>&lt;CTD_EMAILADDRESSCONTACT/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_TELEPHONECONTACT">
            <con:configuration>
              <token>&lt;CTD_TELEPHONECONTACT/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="5cd23510-e4af-441e-8075-a585f89691fb" name="Xpath: assert CTD_CONTRACTINITIALS">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CONTRACTINITIALS[1]/text()</path>
              <content>A</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CONTRACTPREFIX">
            <con:configuration>
              <token>&lt;CTD_CONTRACTPREFIX/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="5cd23510-e4af-441e-8075-a585f89691fb" name="Xpath: assert CTD_CONTRACTLASTNAME">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CONTRACTLASTNAME[1]/text()</path>
              <content>COIN</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="5cd23510-e4af-441e-8075-a585f89691fb" name="Xpath: assert CTD_CONTRACTZIPCODE">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CONTRACTZIPCODE[1]/text()</path>
              <content>1389SS</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="5cd23510-e4af-441e-8075-a585f89691fb" name="Xpath: assert CTD_CONTRACTHOUSENUMBER">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CONTRACTHOUSENUMBER[1]/text()</path>
              <content>99999</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="5cd23510-e4af-441e-8075-a585f89691fb" name="Xpath: assert CTD_NOTE">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_NOTE[1]/text()</path>
              <content>Sunny day-sent ${#TestSuite#soapVersion} expect ${#TestSuite#donorSoapVersion}-linenr. ${#TestSuite#lineNumber}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="5cd23510-e4af-441e-8075-a585f89691fb" name="Xpath: assert CTD_CTP_MIGRATION">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CTP_MIGRATION[1]/text()</path>
              <content>f</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="5cd23510-e4af-441e-8075-a585f89691fb" name="Xpath: assert ACTIVE">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ACTIVE[1]/text()</path>
              <content>t</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="61f553a7-28ef-45c3-a740-e8509a83fd72" name="Script: assert CREATEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/CREATEDDATE[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="61f553a7-28ef-45c3-a740-e8509a83fd72" name="Script: assert MODIFIEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/MODIFIEDDATE[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="61f553a7-28ef-45c3-a740-e8509a83fd72" name="Script: assert CTD_DM_LAST_MSGDATETIME">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/CTD_DM_LAST_MSGDATETIME[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CTP_ACTUALDATETIME">
            <con:configuration>
              <token>&lt;CTD_CTP_ACTUALDATETIME/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CUSTOMERID">
            <con:configuration>
              <token>&lt;CTD_CUSTOMERID/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CONTRACTCOMPANYNAME">
            <con:configuration>
              <token>&lt;CTD_CONTRACTCOMPANYNAME/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CONTRACTSTREET">
            <con:configuration>
              <token>&lt;CTD_CONTRACTSTREET/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CONTRACTCITY">
            <con:configuration>
              <token>&lt;CTD_CONTRACTCITY/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CONTRACTCOUNTRY">
            <con:configuration>
              <token>&lt;CTD_CONTRACTCOUNTRY/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CONNECTIONSTREET">
            <con:configuration>
              <token>&lt;CTD_CONNECTIONSTREET/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CONNECTIONCITY">
            <con:configuration>
              <token>&lt;CTD_CONNECTIONCITY/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CONNECTIONCOUNTRY">
            <con:configuration>
              <token>&lt;CTD_CONNECTIONCOUNTRY/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="5cd23510-e4af-441e-8075-a585f89691fb" name="Xpath: assert CTD_CTP_BUFFERING">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CTP_BUFFERING[1]/text()</path>
              <content>${#TestSuite#par_ctp_buffering}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_NPR_ID">
            <con:configuration>
              <token>&lt;CTD_NPR_ID/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_IFT_ID">
            <con:configuration>
              <token>&lt;CTD_IFT_ID/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CTCH_WISHDATETIME">
            <con:configuration>
              <token>&lt;CTD_CTCH_WISHDATETIME/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CTCHA_PROPOSEDDATETIME">
            <con:configuration>
              <token>&lt;CTD_CTCHA_PROPOSEDDATETIME/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="8024a1e9-de83-489d-9150-905863ad0ef2" name="Xpath: assert CTD_CONTRACT_EARLYTERMINATION">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CONTRACT_EARLYTERMINATION[1]/text()</path>
              <content>f</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CONTRACTADDRESS">
            <con:configuration>
              <token>&lt;CTD_CONTRACTADDRESS/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CONNECTIONADDRESS">
            <con:configuration>
              <token>&lt;CTD_CONNECTIONADDRESS/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_INFRA_ID">
            <con:configuration>
              <token>&lt;CTD_INFRA_ID/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="61f553a7-28ef-45c3-a740-e8509a83fd72" name="Script: assert CTD_VERSION">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/CTD_VERSION[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="f36a5fdb-2755-403f-8a87-492c9edeef39" name="Xpath: assert CTD_CONTRACTHOUSENUMBEREXT">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CONTRACTHOUSENUMBEREXT</path>
              <content>&lt;CTD_CONTRACTHOUSENUMBEREXT/></content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="f36a5fdb-2755-403f-8a87-492c9edeef39" name="Xpath: assert CTD_CONNECTIONZIPCODE">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CONNECTIONZIPCODE[1]/text()</path>
              <content>1389SS</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="f36a5fdb-2755-403f-8a87-492c9edeef39" name="Xpath: assert CTD_CONNECTIONHOUSENUMBER">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CONNECTIONHOUSENUMBER[1]/text()</path>
              <content>99999</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="f36a5fdb-2755-403f-8a87-492c9edeef39" name="Xpath: assert CTD_CONNECTIONHOUSENUMBEREXT">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CONNECTIONHOUSENUMBEREXT</path>
              <content>&lt;CTD_CONNECTIONHOUSENUMBEREXT/></content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="f36a5fdb-2755-403f-8a87-492c9edeef39" name="Xpath: assert CTD_CTR_DT_ID">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CTR_DT_ID[1]/text()</path>
              <content>${#TestSuite#ctd_ctr_dt_id}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="f36a5fdb-2755-403f-8a87-492c9edeef39" name="Xpath: assert CTD_CONTRACT_EARLYTERMINATION">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CONTRACT_EARLYTERMINATION[1]/text()</path>
              <content>${#TestSuite#ctd_contract_earlytermination}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="09e1ffdc-1e8c-436c-8bc0-f07a832aab36" name="Xpath: XPath Match">
            <con:configuration/>
          </con:assertion>
          <con:assertion type="XPath Match" id="81f25e29-72ba-415b-abaf-063f3f8fe5a6" name="Xpath: XPath Match">
            <con:configuration/>
          </con:assertion>
          <con:assertion type="XPath Match" id="fb50a462-133f-4427-b780-7aa61f75e7bd" name="Xpath: XPath Match">
            <con:configuration/>
          </con:assertion>
          <con:assertion type="XPath Match" id="35244668-729d-4cd3-a40a-1d9f8a5b5112" name="Xpath: assert CTD_EBC_ID">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_EBC_ID[1]/text()</path>
              <content>14</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTC" id="de8630bc-f897-4929-93c0-793a7dae36fe">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where DM.id=${#TestCase#ctcDMId} 
order by createddate desc</con:query>
          <con:assertion type="JDBC Status" id="0270de28-900d-4d60-920c-4ca5f131013f" name="JDBC Status"/>
          <con:assertion type="XPath Match" name="Xpath: assert DM_CTD_ID" id="ac17d9f6-9653-435c-bd0c-9af6917f2aa6">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/DM_CTD_ID/text()</path>
              <content>${#TestCase#ctdId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e13d4d4f-30f6-4c9c-9b09-26cbc1d409e3" name="Contains: assert DM_EBC_ID">
            <con:configuration>
              <token>&lt;DM_EBC_ID/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b1ecf376-5d04-44ad-b5ff-2f3471c1c8f6" name="Xpath: assert DM_MST_ID">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/DM_MST_ID/text()</path>
              <content>11</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b1ecf376-5d04-44ad-b5ff-2f3471c1c8f6" name="Xpath: assert DM_IT_ID">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/DM_IT_ID/text()</path>
              <content>${#TestSuite#recipient_soap_interface_id}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert DM_MESSAGE_STATUS" id="ac17d9f6-9653-435c-bd0c-9af6917f2aa6">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/DM_MESSAGE_STATUS/text()</path>
              <content>0</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert DM_MSGIDENTFIER" id="ac17d9f6-9653-435c-bd0c-9af6917f2aa6">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/DM_MSGIDENTFIER/text()</path>
              <content>${#TestSuite#recipient}-${#TestCase#contractId}-003</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="464c0c26-2264-46e1-84cd-16df6b706adb" name="Script: assert DM_MSGDATETIME">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/DM_MSGDATETIME[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert DM_DATETIME" id="ac17d9f6-9653-435c-bd0c-9af6917f2aa6">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/DM_DATETIME</path>
              <content>&lt;DM_DATETIME/></content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert DM_NOTE" id="ac17d9f6-9653-435c-bd0c-9af6917f2aa6">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/DM_NOTE/text()</path>
              <content>performed sent ${#TestSuite#soapVersion}, expect ${#TestSuite#donorSoapVersion}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert DM_ITERATION_COUNT" id="ac17d9f6-9653-435c-bd0c-9af6917f2aa6">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/DM_ITERATION_COUNT/text()</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert ACTIVE" id="ac17d9f6-9653-435c-bd0c-9af6917f2aa6">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ACTIVE/text()</path>
              <content>t</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="464c0c26-2264-46e1-84cd-16df6b706adb" name="Script: assert CREATEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/CREATEDDATE[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="464c0c26-2264-46e1-84cd-16df6b706adb" name="Script: assert MODIFIEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/MODIFIEDDATE[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="b42629be-ed67-4d7b-a486-d857ef0dfe4b" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctcDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_MSL Table_CTC" id="6a93dad6-1f4b-4dd5-841a-436785347f59">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>Select * from overstappen.message_logging where 
msl_soap_transaction_id = '${#TestCase#ctcTransactionId}'</con:query>
          <con:assertion type="JDBC Status" id="e095441a-3cf8-4288-8e40-4300718feece" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="90de6c58-ce01-40f7-8601-320c181b4c6a" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6f97994c-fe88-4225-a5fe-6b03e5f2f4df" name="Xpath: assert MSL_MSGIDENTIFIER">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_MSGIDENTIFIER/text()</path>
              <content>${#TestSuite#recipient}-${#TestCase#ContractId}-003</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d64191b1-b311-474b-8343-c036a85b7506" name="Script: assert TIMESTAMP">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/MSL_TIMESTAMP[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="600e79cd-a35e-4f1a-8285-d8ffbfca6a9c" name="Contains: assert MSL_MAIL_SUBJECT">
            <con:configuration>
              <token>&lt;MSL_MAIL_SUBJECT/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6f97994c-fe88-4225-a5fe-6b03e5f2f4df" name="Xpath: assert MSL_MAIL_FROM_ADDRESS">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_MAIL_FROM_ADDRESS</path>
              <content>&lt;MSL_MAIL_FROM_ADDRESS/></content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="600e79cd-a35e-4f1a-8285-d8ffbfca6a9c" name="Contains: assert MSL_MAIL_TO_ADDRESS">
            <con:configuration>
              <token>&lt;MSL_MAIL_TO_ADDRESS/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6f97994c-fe88-4225-a5fe-6b03e5f2f4df" name="Xpath: assert MSL_CTD_ID">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_CTD_ID/text()</path>
              <content>${#TestCase#ctdId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6f97994c-fe88-4225-a5fe-6b03e5f2f4df" name="Xpath: assert MSL_DM_ID">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_DM_ID/text()</path>
              <content>${#TestCase#ctcDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6f97994c-fe88-4225-a5fe-6b03e5f2f4df" name="Xpath: assert MSL_IT_ID">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_IT_ID/text()</path>
              <content>${#TestSuite#recipient_ctc_interface_id}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert MSL_CLC_ID]" id="e99eef8e-047f-4dff-930b-7b92f2348249">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/MSL_CLC_ID[1]/text()</path>
              <content>57</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="600e79cd-a35e-4f1a-8285-d8ffbfca6a9c" name="Contains: assert MSL_MAIL_MESSAGE_ID">
            <con:configuration>
              <token>&lt;MSL_MAIL_MESSAGE_ID/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="af9e3913-4e23-4232-9d26-e5b4f37f31f5" name="Contains: assert MSL_LOG">
            <con:configuration>
              <token>&lt;MSL_LOG>503 - Marking message as commit success - Dossier Message Saved successfully</token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="31361619-e64f-4ff3-b185-786e5879ac46" name="Contains: assert MSL_MAIL_MESSAGE_BLOB">
            <con:configuration>
              <token>&lt;MSL_MAIL_MESSAGE_BLOB/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6f97994c-fe88-4225-a5fe-6b03e5f2f4df" name="Xpath: assert MSL_SOAP_MESSAGE_BLOB">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_SOAP_MESSAGE_BLOB/text()</path>
              <content>${#TestCase#ctcMainMessage}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6f97994c-fe88-4225-a5fe-6b03e5f2f4df" name="Xpath: assert ACTIVE">
            <con:configuration>
              <path>/Results/ResultSet/Row/ACTIVE/text()</path>
              <content>t</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d64191b1-b311-474b-8343-c036a85b7506" name="Script: assert CREATEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/CREATEDDATE[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d64191b1-b311-474b-8343-c036a85b7506" name="Script: assert MODIFIEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/MODIFIEDDATE[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6f97994c-fe88-4225-a5fe-6b03e5f2f4df" name="Xpath: assert MSL_FROM_SPR_CODE">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_FROM_SPR_CODE/text()</path>
              <content>${#TestSuite#recipient}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6f97994c-fe88-4225-a5fe-6b03e5f2f4df" name="Xpath: assert MSL_TO_SPR_CODE">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_TO_SPR_CODE/text()</path>
              <content>${#TestSuite#DONOR}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6f97994c-fe88-4225-a5fe-6b03e5f2f4df" name="Xpath: assert MSL_ADMIN">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_ADMIN/text()</path>
              <content>f</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6f97994c-fe88-4225-a5fe-6b03e5f2f4df" name="Xpath: assert MSL_ST_ID">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_ST_ID/text()</path>
              <content>${#TestCase#ctcId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_CheckOutGoingMsgType" id="b07a56ef-ca8b-4271-a211-0427de5c3ac4">
        <con:settings/>
        <con:config>
          <script>def outtype = testRunner.testCase.testSuite.getPropertyValue("recipientOutMsg")

if (outtype == 'EMAIL') {
 
    	  testRunner.gotoStepByName( "JDBC_SXM Table_NoRecord_CTC")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_ST Table_Send_CTC" id="abacc9fb-1cf6-4bac-8260-01a30baf61e5">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_transactions 
where st_sender='${#TestSuite#recipient}' 
and st_receiver='${#TestSuite#donor}' 
and st_send_received='SEND' 
and st_message like '%${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01%'
and st_message like '%cancel%'
and id>${#TestCase#Id}</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [ST_TRANSACTION_ID]" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//ST_TRANSACTION_ID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify SEND Status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//ST_SEND_RECEIVED</path>
              <content>SEND</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" name="Contains: Verify Cancel" id="a1e1b0ed-fff7-4f8c-9eba-dee62ae7b198">
            <con:configuration>
              <token>cancel</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="40fa4a9b-34bc-47c5-a651-8b225e523334" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="d61de3ac-475a-43e4-aaf5-8b421c411464" name="Xpath: Verify Sender">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_SENDER[1]</path>
              <content>${#TestSuite#recipient}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="96350074-db6f-467f-9402-f351c4e3eb1e" name="Xpath: Verify Receiver">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_RECEIVER[1]</path>
              <content>${#TestSuite#donor}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple NotContains" id="d4f7f14c-500e-4519-ad2b-89ff5e57a404" name="NotContains: Technical Sender">
            <con:configuration>
              <token>&lt;ST_TECHNICAL_SENDER></token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple NotContains" id="d4f7f14c-500e-4519-ad2b-89ff5e57a404" name="NotContains: User_Name">
            <con:configuration>
              <token>&lt;ST_USER_NAME></token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple NotContains" id="d4f7f14c-500e-4519-ad2b-89ff5e57a404" name="NotContains: USER_IP">
            <con:configuration>
              <token>&lt;ST_USER_IP></token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="b0785e66-97d6-48d3-93b8-52bf2e298f3b" name="Script: Verify Message_DATETIME">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "ctcCreateTime", "//Results[1]/ResultSet[1]/Row[1]/ST_MESSAGE_DATETIME[1]/text()", 1);
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify Status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//ST_STATUS</path>
              <content>Done</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="0cd1ca74-fcf1-46d9-974c-fe9be6b2d13b" name="Script: Verify ST_STATUS_DATETIME">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "ctcCreateTime", "//Results[1]/ResultSet[1]/Row[1]/ST_STATUS_DATETIME[1]/text()", 1);
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_CTC" id="e593abd6-ece4-4374-bf7a-aaecce38cadb">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where sxm_dm_id=${#TestCase#ctcDMId}</con:query>
          <con:assertion type="JDBC Status" id="cdeae0b1-5642-4ec0-840c-0a705c7b1cd5" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="9c69b671-a0c5-4c23-99cb-fff79a4f40e7" name="Xpath: assert SXM_SENDER">
            <con:configuration>
              <path>/Results/ResultSet/Row/SXM_SENDER/text()</path>
              <content>${#TestSuite#recipient}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="7aff1f26-eefe-43ce-a38b-98ecdd908313" name="Xpath: assert SXM_RECEIVER">
            <con:configuration>
              <path>/Results/ResultSet/Row/SXM_RECEIVER/text()</path>
              <content>${#TestSuite#donor}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="0556b0e2-dbbc-4407-aae9-71a1337500f5" name="Xpath: assert SXM_XML_MESSAGE_TYPE">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/SXM_XML_MESSAGE_TYPE[1]</path>
              <content>Cancel</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="9d8adc78-e136-40dc-9310-2782809d0b15" name="Xpath: assert SXM_XML_MESSAGE" disabled="true">
            <con:configuration>
              <path/>
              <content/>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="e31eb762-26ba-4058-b8dc-b5c75f834730" name="Script: Xpath: assert SXM_XML_MESSAGE_DATETIME">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/SXM_XML_MESSAGE_DATETIME[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="f7a96af5-e0ab-44e5-b2bb-d0a3cb09c255" name="Xpath: assert SXM_STATUS">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/SXM_STATUS[1]</path>
              <content>Done</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="e31eb762-26ba-4058-b8dc-b5c75f834730" name="Script: Xpath: assert SXM_STATUS_DATETIME">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/SXM_STATUS_DATETIME[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="f7a96af5-e0ab-44e5-b2bb-d0a3cb09c255" name="Xpath: assert SXM_RETRY_COUNT">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/SXM_RETRY_COUNT[1]</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="0556b0e2-dbbc-4407-aae9-71a1337500f5" name="Xpath: assert ACTIVE">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ACTIVE[1]</path>
              <content>t</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="e31eb762-26ba-4058-b8dc-b5c75f834730" name="Script: Xpath: assert CREATEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/CREATEDDATE[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="e31eb762-26ba-4058-b8dc-b5c75f834730" name="Script: Xpath: assert MODIFIEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "CTRCreateTime", "//Results[1]/ResultSet[1]/Row[1]/MODIFIEDDATE[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="f62b0cce-7773-4956-9e46-ac6b3904023c" name="Xpath: assert SXM_IT_ID">
            <con:configuration>
              <path>/Results/ResultSet/Row/SXM_IT_ID/text()</path>
              <content>${#TestSuite#recipient_soap_interface_id}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="754ffff1-ddf4-4f9d-9515-461f041a49cb" name="Xpath: assert SXM_DT_ID">
            <con:configuration>
              <path>/Results/ResultSet/Row/SXM_DT_ID/text()</path>
              <content>${#TestSuite#ctd_ctr_dt_id}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_CheckOutGoingMsgType1" id="1ff25b3e-78be-428d-92fb-12641a7176ec">
        <con:settings/>
        <con:config>
          <script>def outtype = testRunner.testCase.testSuite.getPropertyValue("recipientOutMsg")

if (outtype == 'SOAP') {
    	  testRunner.gotoStepByName( "Delay0")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_NoRecord_CTC" id="ce024ac5-ac03-4392-99c6-34fdc54392dc">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where
sxm_xml_message like '%${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01%'
and sxm_xml_message like '%/${#TestSuite#donorSoapVersion}%'
and sxm_xml_message_type = 'Performed'
and sxm_sender = '${#TestSuite#recipient}'
and sxm_receiver = '${#TestSuite#donor}'
--and sxm_retry_count &lt;=1</con:query>
          <con:assertion type="Simple NotContains" id="d71d4bce-938f-48bf-ba21-93c08b8f00cf" name="NotContains: Not Contains">
            <con:configuration>
              <token>&lt;SXM_XML_MESSAGE_TYPE>Performed&lt;/SXM_XML_MESSAGE_TYPE></token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="00dac767-e1af-4a22-bcc3-aba067093ede" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="00458898-6d99-46d9-8ccf-2a0cc9b25bcf" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>0</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Delay0" id="bf2b6c7c-5302-4a5c-8bfe-b649453da87d">
        <con:settings/>
        <con:config>
          <delay>1000</delay>
        </con:config>
      </con:testStep>
      <con:setupScript>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import groovy.time.TimeCategory
def today = new Date() 
def now = today.format("yyyy-MM-dd'T'HH:mm:ss")
testRunner.testCase.setPropertyValue("Now",now)
def wishdate = today 
use(TimeCategory) {
	   wishdate = wishdate + 1.days
}
def wishdatestr = wishdate.format("yyyy-MM-dd'T'HH:mm:ss")
def wishdatestrwithOutT = wishdate.format("yyyy-MM-dd' 'HH:mm:ss")
testRunner.testCase.setPropertyValue("wishDate",wishdatestr)
testRunner.testCase.setPropertyValue("wishDateWithoutT",wishdatestrwithOutT)
def proposedDate = today 
use(TimeCategory) {
	   proposedDate = proposedDate + 2.days
}
def proposedDateStr = proposedDate.format("yyyy-MM-dd'T'HH:mm:ss")
def proposeddateStrwithOutT = proposedDate.format("yyyy-MM-dd' 'HH:mm:ss")
testRunner.testCase.setPropertyValue("proposedDate",proposedDateStr)
testRunner.testCase.setPropertyValue("proposedDateWithoutT",proposeddateStrwithOutT)
String contractId = funcHandle.getRandomString()
testRunner.testCase.setPropertyValue("contractId",contractId)</con:setupScript>
      <con:tearDownScript/>
      <con:properties/>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>122d3297-f22d-449f-ac52-c46f1bfb714e</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CTR-CTRA ok-CTP buffering" searchProperties="true" id="8389d358-8aa8-49c6-8209-d76b370c6d9d" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:settings>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">1000</con:setting>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting>
      </con:settings>
      <con:testStep type="delay" name="Delay" id="c0b58642-64bc-4c12-ba77-7b883876e96f">
        <con:settings/>
        <con:config>
          <delay>1000</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="CTR-Sunny Day" id="ba46f968-91df-440c-b40b-22bc4804dbdd">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>CompWebserviceSoap11</con:interface>
          <con:operation>SendMessages</con:operation>
          <con:request name="CTR-Sunny Day" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordText" id="3aa22f8f-37c1-4ea2-ba88-b80068a3761f">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#SoapUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="http://coin.nl/ws/schema">\r
   <soapenv:Header/>
   <soapenv:Body>
      <sch:SendMessagesRequest>
         <sch:Sender>${#TestSuite#recipient}</sch:Sender>
         <sch:Messages>
            <sch:Message>
               <sch:Text><![CDATA[<?xml version="1.0"?>
<message xmlns="http://www.coin.nl/Overstappen_MESSAGES">
<header>
<receiver>
<!--Optional:-->
<networkoperator>${#TestSuite#donor}</networkoperator>
<!--Optional:-->
<serviceprovider>${#TestSuite#donor}</serviceprovider>
</receiver>
<sender>
<!--Optional:-->
<networkoperator>${#TestSuite#recipient}</networkoperator>
<!--Optional:-->
<serviceprovider>${#TestSuite#recipient}</serviceprovider>
</sender>
<!--Optional:-->
<messageid>${#TestSuite#recipient}-${#TestCase#contractId}-01</messageid>
<timestamp>${#TestSuite#TimestampNOW}</timestamp>
</header>
<body>
<contractterminationrequest>
<${#TestSuite#soapVersion}>
<dossierid>${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01</dossierid>
<!--Optional:-->
<recipientserviceprovider>${#TestSuite#recipient}</recipientserviceprovider>
<!--Optional:-->
<recipientnetworkoperator>${#TestSuite#recipient}</recipientnetworkoperator>
<!--Optional:-->
<donornetworkoperator>${#TestSuite#donor}</donornetworkoperator>
<!--Optional:-->
<donorserviceprovider>${#TestSuite#donor}</donorserviceprovider>
<wishdatetime>${#TestCase#wishdate}</wishdatetime>
${#TestSuite#dossierType}
${#TestSuite#compensationOK}
<name>COIN</name>
<addressblock>
 	<postcode>1389SS</postcode>
	<housenr>99999</housenr>
</addressblock>
<numberseries>
     <start>0173112233</start>
     <end>0173112233</end>
</numberseries>
<validationblock>
    <name>contractid</name>
    <value>2-${#TestCase#contractID}</value>
 </validationblock>
<note>Sunny day-sent ${#TestSuite#soapVersion} expect ${#TestSuite#donorSoapVersion}-linenr. ${#TestSuite#lineNumber}</note>
</${#TestSuite#soapVersion}>
</contractterminationrequest>
</body>
</message>]]]]>><![CDATA[</sch:Text>
            </sch:Message>
         </sch:Messages>
      </sch:SendMessagesRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="XPath Match" name="Match content of [ns2:TransactionId] using RegEx" id="1c471417-807a-4012-a734-b2dd5be94c8f">
              <con:configuration>
                <path>declare namespace ns2='http://coin.nl/ws/schema';
//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]/text()</path>
                <content>*</content>
                <allowWildcards>true</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" name="Check count of [ns2:TransactionId]" id="345c96a3-89a0-476e-9875-b0c18e04ef5b">
              <con:configuration>
                <path>declare namespace ns2='http://coin.nl/ws/schema';
count( //ns2:SendMessagesResponse/ns2:TransactionId)</path>
                <content>1</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert node [ns2:TransactionId]" id="63f77b9d-d209-4d74-ad56-a26982ab75c5">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
//def groovyUtilsPro = new com.eviware.soapui.support.GroovyUtilsPro( context )

def holder = new XmlHolder( messageExchange.responseContentAsXml )
holder.namespaces["ns2"] = "http://coin.nl/ws/schema"
def transactionId = holder.getNodeValue( "//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]" )
messageExchange.modelItem.testStep.testCase.setPropertyValue("transactionId",transactionId)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="a6a8bd8d-2cab-4cce-a666-c5d417c13bf3" name="Store CTR create time">
              <con:configuration>
                <scriptText><![CDATA[import com.eviware.soapui.support.XmlHolder
import java.util.Date;
import java.text.SimpleDateFormat;
def str = messageExchange.getRequestContentAsXml()
log.info str
def holder = new XmlHolder(str)

def ctrSentMessage = str.substring(str.lastIndexOf("<soapenv:Body>")+14, str.lastIndexOf("</soapenv:Body>"))
ctrSentMessage = ctrSentMessage.replace("<sch:SendMessagesRequest>", "<?xml version=\"1.0\" encoding=\"UTF-8\"?><sch:SendMessagesRequest xmlns:sch=\"http://coin.nl/ws/schema\">")
messageExchange.modelItem.testStep.testCase.setPropertyValue("ctrSentMessage",ctrSentMessage.trim())
log.info ctrSentMessage

def mainMessage = holder.getNodeValue("//sch:Text")
messageExchange.modelItem.testStep.testCase.setPropertyValue("ctrMainMessage",mainMessage)

def createTime = mainMessage.substring(mainMessage.lastIndexOf("<timestamp>")+11, mainMessage.lastIndexOf("</timestamp>"))
def time = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").parse(createTime)
def Id = time.format("yyyy-MM-dd HH:mm:ss")
messageExchange.modelItem.testStep.testCase.setPropertyValue("ctrCreateTime",Id)]]></scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#TestSuite#recipientUserName}</con:username>
              <con:password>${#TestSuite#recipientPassWord}</con:password>
              <con:domain xsi:nil="true"/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://coin.nl/SendMessages"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_ST Table" id="8168dd2a-43cf-428a-9383-98c395312fca">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_transactions 
where st_transaction_id = '${#TestCase#transactionId}'</con:query>
          <con:assertion type="Simple Contains" name="Contains: assert Results" id="cce0fb3e-4b85-4ba4-a7be-1dfa2e40d69e">
            <con:configuration>
              <token>&lt;Row rowNumber="1"></token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify TransactionId" id="0314e1fa-b1cb-4932-bba8-55dd87029a85">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_TRANSACTION_ID[1]</path>
              <content>${#TestCase#transactionId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify ST_SEND_RECEIVED" id="9db0e630-c611-4fc1-b0bc-fb6028a6a7c3">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_SEND_RECEIVED[1]</path>
              <content>received</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" name="Contains: Contain message Type" id="85caea84-7bde-4674-9d00-009229cb7411">
            <con:configuration>
              <token>contractterminationrequest</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="77af631e-a991-48c5-b7c6-43b4c54de0ad" name="Script: store SoapTransaction.id">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "Id");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="25403817-abc1-4578-9f80-7b8821bd2725" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="535978c2-4eb2-43c3-8197-e91f5446071f" name="Xpath: assert UserIP" disabled="true">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_IP/text()</path>
              <content>${#Project#UserIP}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="8eb577b6-888a-4fe7-9590-d2854f0d170b" name="Xpath: assert UserName">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_NAME/text()</path>
              <content>${#TestSuite#recipientUserName}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="4cd2c5aa-8f8b-4c3f-9c6d-8318d7249eaf" name="Xpath: assert TechSender">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_TECHNICAL_SENDER/text()</path>
              <content>${#TestSuite#recipient}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Wait For Poller" id="7cef73ef-e68b-418a-a433-16ab4f3292db">
        <con:settings/>
        <con:config>
          <delay>${#TestSuite#PollTime}</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_RSXM Table_CTR" id="8d48c8ad-c542-4055-81fc-f2e4178e98c2">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.raw_soap_xml_messages where rsxm_st_id = '${#TestCase#Id}'</con:query>
          <con:assertion type="Simple Contains" name="Contains: Contains" id="6f5c48fb-8cde-4644-a4bb-7eb10db16d15">
            <con:configuration>
              <token>&lt;Row rowNumber="1"></token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: XPath Match" id="14d90270-6f91-4150-993a-d24f2adbd507">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/RSXM_STATUS[1]</path>
              <content>Done</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="93200de3-311a-45e4-9354-8786e5f8cb4b" name="JDBC Status"/>
          <con:assertion type="GroovyScriptAssertion" id="a71e9107-d908-4e98-8bdc-c33775015ef6" name="Script: SaveRSXM_DM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/RSXM_DM_ID[1]", "ctrDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="1775315d-f280-4161-8bb5-bb097b76483c" name="Script: SaveRSXM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctrRSXMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_MSL Table_CTR" id="978bfccd-5640-4b2e-84e4-b8b68a1f3eea">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>Select * from overstappen.message_logging where 
msl_soap_transaction_id = '${#TestCase#transactionId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: assert MSL_CLC_ID]" id="e99eef8e-047f-4dff-930b-7b92f2348249">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/MSL_CLC_ID[1]/text()</path>
              <content>57</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="e095441a-3cf8-4288-8e40-4300718feece" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="768f42a8-eed1-4db7-b90c-efef24784331" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="1b0fe0d0-501c-49d0-a430-8f665603c79c" name="Xpath: assert SoapTransactionId">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_ST_ID/text()</path>
              <content>${#TestCase#Id}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table_CTR" id="8b6875fe-a8b5-4791-9d59-5de390fada09">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier where 
ctd_switchid = '${#TestSuite#Recipient}-${#TestSuite#Donor}-${#TestCase#ContractId}-01'</con:query>
          <con:assertion type="XPath Match" name="Xpath: assert CTD_DOSSIER_STATUS]" id="ac17d9f6-9653-435c-bd0c-9af6917f2aa6">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_DOSSIER_STATUS[1]/text()</path>
              <content>Pending</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert CTD_PROCESS_STATUS]" id="ede8cc08-99ab-46ca-baf4-97e9f0895428">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_PROCESS_STATUS[1]/text()</path>
              <content>Request</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: assert ion ctd_id">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def ctdid = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctdId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="7c84a325-d253-4113-a068-3d9a1058a3a9" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTR" id="3eccfe0f-1d14-4719-ba79-9e3554a9b3d0">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where dm_ctd_id = ${#TestCase#ctdId} 
and dm_mst_id=1 
order by createddate desc</con:query>
          <con:assertion type="XPath Match" id="22e366c7-6a4e-4580-9e30-c5cb86194c3d" name="Xpath: SoapVersion">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/IT_INTERFACE_TYPE[1]</path>
              <content>*${#TestSuite#soapVersion}*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="f73e00f1-8527-4a87-b868-01995c6d5fbc" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="9ba7a806-c63c-4998-8db1-ff3153c65f13" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/ID/text()</path>
              <content>${#TestCase#ctrDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="45e94433-8399-49c2-acc8-cd1d4e889142" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctrDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_CheckOutGoingMsgType" id="826f0ea0-6ac3-4d3c-8a4c-cedee8479b34">
        <con:settings/>
        <con:config>
          <script>def outtype = testRunner.testCase.testSuite.getPropertyValue("recipientOutMsg")

if (outtype == 'EMAIL') {
    	  testRunner.gotoStepByName( "JDBC_SXM Table_NoRecord_CTR")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Wait For Send Poller" id="345f94d8-47c0-4dcf-9521-24a84d32617b">
        <con:settings/>
        <con:config>
          <delay>${#TestSuite#PollTime}</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_ST Table_Send_CTR" id="2ab695ec-4336-480d-b842-44270b01dc0f">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_transactions 
where st_sender='${#TestSuite#recipient}' 
and st_receiver='${#TestSuite#donor}' 
and st_send_received='SEND' 
and st_message like '%${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01%'
and id>${#TestCase#Id}</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [ST_TRANSACTION_ID]" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//ST_TRANSACTION_ID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify SEND Status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//ST_SEND_RECEIVED</path>
              <content>SEND</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" name="Contains: Contains" id="a1e1b0ed-fff7-4f8c-9eba-dee62ae7b198">
            <con:configuration>
              <token>contractterminationrequest</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="40fa4a9b-34bc-47c5-a651-8b225e523334" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="d61de3ac-475a-43e4-aaf5-8b421c411464" name="Xpath: Verify Sender">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_SENDER[1]</path>
              <content>${#TestSuite#Recipient}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="96350074-db6f-467f-9402-f351c4e3eb1e" name="Xpath: Verify Receiver">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_RECEIVER[1]</path>
              <content>${#TestSuite#donor}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple NotContains" id="d4f7f14c-500e-4519-ad2b-89ff5e57a404" name="NotContains: Technical Sender">
            <con:configuration>
              <token>&lt;ST_TECHNICAL_SENDER></token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple NotContains" id="d4f7f14c-500e-4519-ad2b-89ff5e57a404" name="NotContains: User_Name">
            <con:configuration>
              <token>&lt;ST_USER_NAME></token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple NotContains" id="d4f7f14c-500e-4519-ad2b-89ff5e57a404" name="NotContains: USER_IP">
            <con:configuration>
              <token>&lt;ST_USER_IP></token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="b0785e66-97d6-48d3-93b8-52bf2e298f3b" name="Script: Verify Message_DATETIME">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "ctrCreateTime", "//Results[1]/ResultSet[1]/Row[1]/ST_MESSAGE_DATETIME[1]/text()", 1);
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify Status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//ST_STATUS</path>
              <content>Done</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="0cd1ca74-fcf1-46d9-974c-fe9be6b2d13b" name="Script: Verify ST_STATUS_DATETIME">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "ctrCreateTime", "//Results[1]/ResultSet[1]/Row[1]/ST_STATUS_DATETIME[1]/text()", 1);
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_CTR" id="96dbef97-61b4-4fd5-96ca-496ff5097c2a">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where
sxm_xml_message like '%${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01%'
and sxm_xml_message like '%/${#TestSuite#donorSoapVersion}%'
and sxm_xml_message_type = 'Request'
and sxm_sender = '${#TestSuite#recipient}'
and sxm_receiver = '${#TestSuite#donor}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [ST_TRANSACTION_ID]" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//ID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" name="Contains: Contains" id="a1e1b0ed-fff7-4f8c-9eba-dee62ae7b198">
            <con:configuration>
              <token>contractterminationrequest</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="eb3bff08-4703-424d-b8ab-94a78fdd5221" name="Xpath: XPath match wishdatetime">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/SXM_XML_MESSAGE[1]</path>
              <content>*&lt;wishdatetime>${#TestCase#wishDate}&lt;/wishdatetime>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="0556b0e2-dbbc-4407-aae9-71a1337500f5" name="Xpath: header sender receiver">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/SXM_XML_MESSAGE[1]</path>
              <content><![CDATA[*<header>
      <receiver>
                  <networkoperator>${#TestSuite#donor}</networkoperator>
         	              <serviceprovider>${#TestSuite#donor}</serviceprovider>
               </receiver>
      <sender>
                  <networkoperator>${#TestSuite#recipient}</networkoperator>
         		          <serviceprovider>${#TestSuite#recipient}</serviceprovider>
               </sender>*]]></content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="6d6adff7-850e-4987-a515-bb7b377522e1" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="8a3100d8-ccd7-4689-8fa5-f05f54ffe551" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/SXM_DM_ID/text()</path>
              <content>${#TestCase#ctrDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="e4b0b367-1ca2-4336-b624-72fce5c97f9a" name="Xpath: assert SXMID" disabled="true">
            <con:configuration>
              <path>/Results/ResultSet/Row/ID/text()</path>
              <content>${#TestCase#stSXMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_CheckOutGoingMsgType1" id="0d6677e0-c17b-489b-ae87-f9724efcb95d">
        <con:settings/>
        <con:config>
          <script>def outtype = testRunner.testCase.testSuite.getPropertyValue("recipientOutMsg")

if (outtype == 'SOAP') {
    	  testRunner.gotoStepByName( "CTRA-ok")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_NoRecord_CTR" id="af9a6bf0-d484-40a8-8acb-efb4b54b5e94">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where
sxm_xml_message like '%${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01%'
and sxm_xml_message_type = 'Request'
and sxm_sender = '${#TestSuite#recipient}'
and sxm_receiver = '${#TestSuite#donor}'</con:query>
          <con:assertion type="JDBC Status" id="d7a0bef0-7c62-4087-af1c-bfc1d44f39a3" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="08bd5f22-f7c6-4526-b6a4-a146ecc9803e" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>0</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="CTRA-ok" id="1eaf407e-3e53-4571-9c9a-f072b445d466">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>CompWebserviceSoap11</con:interface>
          <con:operation>SendMessages</con:operation>
          <con:request name="CTRA-ok" id="83d7229a-676a-4c41-81cc-3429f324fea1" wssPasswordType="PasswordText">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#SoapUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="http://coin.nl/ws/schema">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:SendMessagesRequest>
         <sch:Sender>${#TestSuite#donor}</sch:Sender>
         <sch:Messages>
            <sch:Message>
               <sch:Text><![CDATA[<?xml version="1.0"?>
<message xmlns="http://www.coin.nl/Overstappen_MESSAGES">
<header>
<receiver>
<!--Optional:-->
<networkoperator>${#TestSuite#recipient}</networkoperator>
<!--Optional:-->
<serviceprovider>${#TestSuite#recipient}</serviceprovider>
</receiver>
<sender>
<!--Optional:-->
<networkoperator>${#TestSuite#donor}</networkoperator>
<!--Optional:-->
<serviceprovider>${#TestSuite#donor}</serviceprovider>
</sender>
<!--Optional:-->
<messageid>${#TestSuite#recipient}-${#TestCase#contractId}-01</messageid>
<timestamp>${#TestSuite#TimestampNOW}</timestamp>
</header>
<body>
<contractterminationrequestanswer>
<${#TestSuite#donorSoapVersion}>
<dossierid>${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01</dossierid>
${#TestSuite#donorDossierType}
<blocking>N</blocking>
<wishdatetime>${#TestCase#wishdate}</wishdatetime>
<blockingcode>0</blockingcode>
<note>Request Answer ok ${#TestSuite#soapVersion} sent ${#TestSuite#donorSoapVersion} expected</note>
</${#TestSuite#donorSoapVersion}>
</contractterminationrequestanswer>
</body>
</message>]]]]>><![CDATA[</sch:Text>
            </sch:Message>
         </sch:Messages>
      </sch:SendMessagesRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="0408c23d-c32c-480c-b33e-7f633dc17c95"/>
            <con:assertion type="XPath Match" id="8131d7ae-9a5a-491b-aefe-ae2214c93e1b" name="XPath Match">
              <con:configuration>
                <path>declare namespace ns2='http://coin.nl/ws/schema';
//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]/text()</path>
                <content>*</content>
                <allowWildcards>true</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="8fd52b42-3f32-4928-9b32-f521197d004e" name="Script Assertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
//def groovyUtilsPro = new com.eviware.soapui.support.GroovyUtilsPro( context )

def holder = new XmlHolder( messageExchange.responseContentAsXml )
holder.namespaces["ns2"] = "http://coin.nl/ws/schema"
def transactionId = holder.getNodeValue( "//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]" )
messageExchange.modelItem.testStep.testCase.setPropertyValue("ctraTransactionId",transactionId)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="0f1e219e-700a-4c31-812d-f29c1c4fe462" name="Script Assertion 1">
              <con:configuration>
                <scriptText><![CDATA[import com.eviware.soapui.support.XmlHolder
import java.util.Date;
import java.text.SimpleDateFormat;
def str = messageExchange.getRequestContentAsXml()
log.info str
def holder = new XmlHolder(str)

def ctrSentMessage = str.substring(str.lastIndexOf("<soapenv:Body>")+14, str.lastIndexOf("</soapenv:Body>"))
ctrSentMessage = ctrSentMessage.replace("<sch:SendMessagesRequest>", "<?xml version=\"1.0\" encoding=\"UTF-8\"?><sch:SendMessagesRequest xmlns:sch=\"http://coin.nl/ws/schema\">")
messageExchange.modelItem.testStep.testCase.setPropertyValue("ctraSentMessage",ctrSentMessage.trim())
log.info ctrSentMessage

def mainMessage = holder.getNodeValue("//sch:Text")
messageExchange.modelItem.testStep.testCase.setPropertyValue("ctraMainMessage",mainMessage)

def createTime = mainMessage.substring(mainMessage.lastIndexOf("<timestamp>")+11, mainMessage.lastIndexOf("</timestamp>"))
def time = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").parse(createTime)
def Id = time.format("yyyy-MM-dd HH:mm:ss")
messageExchange.modelItem.testStep.testCase.setPropertyValue("ctraCreateTime",Id)]]></scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#TestSuite#donorUserName}</con:username>
              <con:password>${#TestSuite#donorPassWord}</con:password>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_ST Table CTRA" id="ee037147-b9fd-45b5-97cc-0a464c8c1544">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_transactions 
where st_transaction_id = '${#TestCase#ctraTransactionId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Verify TransactionId" id="0314e1fa-b1cb-4932-bba8-55dd87029a85">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_TRANSACTION_ID[1]</path>
              <content>${#TestCase#ctraTransactionId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify ST_SEND_RECEIVED" id="9db0e630-c611-4fc1-b0bc-fb6028a6a7c3">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_SEND_RECEIVED[1]</path>
              <content>received</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" name="Contains: Contain message Type" id="85caea84-7bde-4674-9d00-009229cb7411">
            <con:configuration>
              <token>contractterminationrequestanswer</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script: assert node [ID]" id="919aa515-934c-4b10-bd9d-dcd08c81b41c">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctraId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="6e78d7f5-cb66-4611-b2b5-343c1888664f" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="c8d52293-18eb-49c4-9ca9-ea3bd5d610d6" name="Xpath: assert UserIP" disabled="true">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_IP/text()</path>
              <content>${#Project#UserIP}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="625877b0-2eca-4b41-8c89-2dba622b3710" name="Xpath: assert UserName">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_NAME/text()</path>
              <content>${#TestSuite#donorUserName}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="d80902a3-bfcb-4329-a8f6-ad3d0723f4a4" name="Xpath: assert TechSender">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_TECHNICAL_SENDER/text()</path>
              <content>${#TestSuite#donor}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Wait For Poller 2" id="da4897a1-5197-4600-a5f6-2a074c432a7a">
        <con:settings/>
        <con:config>
          <delay>${#TestSuite#PollTime}</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_RSXM Table_CTRA" id="fd52e905-c8f9-4ff6-bed2-cde939442494">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.raw_soap_xml_messages where rsxm_st_id = '${#TestCase#ctraId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: XPath Match" id="14d90270-6f91-4150-993a-d24f2adbd507">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/RSXM_STATUS[1]</path>
              <content>Done</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="0b705d25-1791-4e89-8c59-80a7f06407d5" name="JDBC Status"/>
          <con:assertion type="GroovyScriptAssertion" id="69e4fbe2-e6a6-444c-9ba2-c8b47452d3f9" name="Script: SaveRSXM_DM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/RSXM_DM_ID[1]", "ctrDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="35fdf011-facd-4e3a-9598-fb99d60a5067" name="Script: SaveRSXM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctraRSXMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_MSL Table_CTRA" id="c677cf6a-5eab-4eba-9d32-baa4095b6a0a">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>Select * from overstappen.message_logging where 
msl_soap_transaction_id = '${#TestCase#ctraTransactionId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: assert MSL_CLC_ID]" id="e99eef8e-047f-4dff-930b-7b92f2348249">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/MSL_CLC_ID[1]/text()</path>
              <content>57</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="e095441a-3cf8-4288-8e40-4300718feece" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="e95b881a-2ca1-4cc8-97c3-ba99a4a0eabd" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="0aea5360-f2b5-4600-979e-d7ed876d2856" name="Xpath: assert SoapTransactionId">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_ST_ID/text()</path>
              <content>${#TestCase#ctraId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table 1" id="b99f19e1-54fd-4890-8e90-9ad08a0a649d">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier 
where id='${#TestCase#ctdId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [ST_TRANSACTION_ID]" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//CTD_SWITCHID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_dossier_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_DOSSIER_STATUS</path>
              <content>Pending</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_process_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_PROCESS_STATUS</path>
              <content>Request Answer OK</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="651069e7-f341-4a0a-90da-a0530c7e6e68" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTRA" id="49c3c159-5477-42f8-84a8-b60cc609018b">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where dm_ctd_id = ${#TestCase#ctdId} 
and dm_mst_id=3 
order by createddate desc</con:query>
          <con:assertion type="XQuery Match" id="40cc6fa1-0d78-43c5-a10b-f043ddf625c6" name="XQuery Match">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/IT_INTERFACE_TYPE[1]</path>
              <content>*${#TestSuite#donorSoapVersion}*</content>
              <allowWildcards>true</allowWildcards>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="2310f440-1122-4767-93cc-598cd58ff8ef" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="e2a24280-0eaa-4900-acfa-6deafdb45623" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/ID/text()</path>
              <content>${#TestCase#ctrDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="6e0c4978-cf27-4d18-8818-c376ef39fd0c" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctraDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_ST Table_Send_CTRA" id="fb137c56-5b00-4b80-b42b-9d584cdf3d4a">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_transactions 
where st_sender='${#TestSuite#donor}' 
and st_receiver='${#TestSuite#recipient}' 
and st_send_received='SEND' 
and st_message like '%${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01%'
and st_message like '%contractterminationrequestanswer%'
and id>${#TestCase#ctraId}</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [ST_TRANSACTION_ID]" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//ST_TRANSACTION_ID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify SEND Status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//ST_SEND_RECEIVED</path>
              <content>SEND</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" name="Contains: Contains" id="a1e1b0ed-fff7-4f8c-9eba-dee62ae7b198">
            <con:configuration>
              <token>contractterminationrequest</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="40fa4a9b-34bc-47c5-a651-8b225e523334" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="d61de3ac-475a-43e4-aaf5-8b421c411464" name="Xpath: Verify Sender">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_SENDER[1]</path>
              <content>${#TestSuite#donor}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="96350074-db6f-467f-9402-f351c4e3eb1e" name="Xpath: Verify Receiver">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_RECEIVER[1]</path>
              <content>${#TestSuite#recipient}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple NotContains" id="d4f7f14c-500e-4519-ad2b-89ff5e57a404" name="NotContains: Technical Sender">
            <con:configuration>
              <token>&lt;ST_TECHNICAL_SENDER></token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple NotContains" id="d4f7f14c-500e-4519-ad2b-89ff5e57a404" name="NotContains: User_Name">
            <con:configuration>
              <token>&lt;ST_USER_NAME></token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple NotContains" id="d4f7f14c-500e-4519-ad2b-89ff5e57a404" name="NotContains: USER_IP">
            <con:configuration>
              <token>&lt;ST_USER_IP></token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="b0785e66-97d6-48d3-93b8-52bf2e298f3b" name="Script: Verify Message_DATETIME">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "ctraCreateTime", "//Results[1]/ResultSet[1]/Row[1]/ST_MESSAGE_DATETIME[1]/text()", 1);
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify Status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//ST_STATUS</path>
              <content>Done</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="0cd1ca74-fcf1-46d9-974c-fe9be6b2d13b" name="Script: Verify ST_STATUS_DATETIME">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "ctraCreateTime", "//Results[1]/ResultSet[1]/Row[1]/ST_STATUS_DATETIME[1]/text()", 1);
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_CTRA" id="e4c601c4-268a-47a0-9301-74fbea008010">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where
sxm_xml_message like '%${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01%'
and sxm_xml_message like '%/${#TestSuite#soapVersion}%'
and sxm_xml_message_type = 'Request answer'
and sxm_sender = '${#TestSuite#donor}'
and sxm_receiver = '${#TestSuite#recipient}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [SXM_ID]" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//ID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="65126eb3-5fce-4b42-b832-8882ef7a5d51" name="Xpath: header sender receiver">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/SXM_XML_MESSAGE[1]</path>
              <content><![CDATA[*<header>
      <receiver>
                  <networkoperator>${#TestSuite#recipient}</networkoperator>
              	          <serviceprovider>${#TestSuite#recipient}</serviceprovider>
               </receiver>
      <sender>
                  <networkoperator>${#TestSuite#donor}</networkoperator>
         		          <serviceprovider>${#TestSuite#donor}</serviceprovider>
               </sender>*]]></content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="89423fb8-e10b-4dc0-8acc-c6b50e05ba16" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="501e373f-566f-4b3e-9b3a-c65ff961795f" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/SXM_DM_ID/text()</path>
              <content>${#TestCase#ctrDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="f08e51d1-55bc-43e3-b9db-6727aca25362" name="Xpath: assert SXMID" disabled="true">
            <con:configuration>
              <path>/Results/ResultSet/Row/ID/text()</path>
              <content>${#TestCase#stSXMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="CTP" id="6a94ae36-047f-482e-aa32-93481498c8a6">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>CompWebserviceSoap11</con:interface>
          <con:operation>SendMessages</con:operation>
          <con:request name="CTP" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordText" id="3aa22f8f-37c1-4ea2-ba88-b80068a3761f">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#SoapUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="http://coin.nl/ws/schema">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <sch:SendMessagesRequest>\r
         <sch:Sender>${#TestSuite#recipient}</sch:Sender>\r
         <sch:Messages>\r
            <sch:Message>\r
               <sch:Text><![CDATA[<?xml version="1.0"?>
<message xmlns="http://www.coin.nl/Overstappen_MESSAGES">
<header>
<receiver>
<!--Optional:-->
<networkoperator>${#TestSuite#donor}</networkoperator>
<!--Optional:-->
<serviceprovider>${#TestSuite#donor}</serviceprovider>
</receiver>
<sender>
<!--Optional:-->
<networkoperator>${#TestSuite#recipient}</networkoperator>
<!--Optional:-->
<serviceprovider>${#TestSuite#recipient}</serviceprovider>
</sender>
<!--Optional:-->
<messageid>${#TestSuite#recipient}-${#TestCase#ContractId}-003</messageid>
<timestamp>${#TestSuite#TimestampNOW}</timestamp>
</header>
<body>
<contractterminationperformed>
<${#TestSuite#soapVersion}>
<dossierid>${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01</dossierid>
<actualdatetime>${#TestCase#Now}</actualdatetime>
<note>performed sent ${#TestSuite#soapVersion}, expect ${#TestSuite#donorSoapVersion}</note>
</${#TestSuite#soapVersion}>
</contractterminationperformed>
</body>
</message>]]]]>><![CDATA[</sch:Text>\r
            </sch:Message>\r
         </sch:Messages>\r
      </sch:SendMessagesRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request>
            <con:assertion type="XPath Match" name="Match content of [ns2:TransactionId] using RegEx" id="1c471417-807a-4012-a734-b2dd5be94c8f">
              <con:configuration>
                <path>declare namespace ns2='http://coin.nl/ws/schema';
//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]/text()</path>
                <content>*</content>
                <allowWildcards>true</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" name="Check count of [ns2:TransactionId]" id="345c96a3-89a0-476e-9875-b0c18e04ef5b">
              <con:configuration>
                <path>declare namespace ns2='http://coin.nl/ws/schema';
count( //ns2:SendMessagesResponse/ns2:TransactionId)</path>
                <content>1</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert node [ns2:TransactionId]" id="63f77b9d-d209-4d74-ad56-a26982ab75c5">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
//def groovyUtilsPro = new com.eviware.soapui.support.GroovyUtilsPro( context )

def holder = new XmlHolder( messageExchange.responseContentAsXml )
holder.namespaces["ns2"] = "http://coin.nl/ws/schema"
def transactionId = holder.getNodeValue( "//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]" )
messageExchange.modelItem.testStep.testCase.setPropertyValue("ctpTransactionId",transactionId)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="131bf25a-4cbc-459e-bec6-e5517ccc7ad7" name="Script Assertion">
              <con:configuration>
                <scriptText><![CDATA[import com.eviware.soapui.support.XmlHolder
import java.util.Date;
import java.text.SimpleDateFormat;
def str = messageExchange.getRequestContentAsXml()
log.info str
def holder = new XmlHolder(str)

def ctpSentMessage = str.substring(str.lastIndexOf("<soapenv:Body>")+14, str.lastIndexOf("</soapenv:Body>"))
ctpSentMessage = ctpSentMessage.replace("<sch:SendMessagesRequest>", "<?xml version=\"1.0\" encoding=\"UTF-8\"?><sch:SendMessagesRequest xmlns:sch=\"http://coin.nl/ws/schema\">")
messageExchange.modelItem.testStep.testCase.setPropertyValue("ctpSentMessage",ctpSentMessage.trim())
log.info ctpSentMessage

def mainMessage = holder.getNodeValue("//sch:Text")
messageExchange.modelItem.testStep.testCase.setPropertyValue("ctpMainMessage",mainMessage)

def createTime = mainMessage.substring(mainMessage.lastIndexOf("<timestamp>")+11, mainMessage.lastIndexOf("</timestamp>"))
def time = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").parse(createTime)
def Id = time.format("yyyy-MM-dd HH:mm:ss")
messageExchange.modelItem.testStep.testCase.setPropertyValue("ctpCreateTime",Id)]]></scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#TestSuite#recipientUserName}</con:username>
              <con:password>${#TestSuite#recipientPassWord}</con:password>
              <con:domain xsi:nil="true"/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://coin.nl/SendMessages"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_ST Table CTP" id="86485ea5-265f-43d1-90d3-960c6b0f9ce3">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_transactions 
where st_transaction_id = '${#TestCase#ctpTransactionId}'</con:query>
          <con:assertion type="JDBC Status" id="7ecc4fae-37f3-450f-9308-bff9fa2bc708" name="JDBC Status"/>
          <con:assertion type="GroovyScriptAssertion" name="Script: assert node [ID]" id="919aa515-934c-4b10-bd9d-dcd08c81b41c">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctpId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert ST_SEND_RECEIVED" id="9db0e630-c611-4fc1-b0bc-fb6028a6a7c3">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_SEND_RECEIVED[1]</path>
              <content>received</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert ST_SENDER" id="9db0e630-c611-4fc1-b0bc-fb6028a6a7c3">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_SENDER</path>
              <content>${#TestSuite#recipient}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert ST_RECEIVER" id="9db0e630-c611-4fc1-b0bc-fb6028a6a7c3">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_RECEIVER/text()</path>
              <content>COIN</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="f87605a3-a003-4b51-912e-aa49ce269fba" name="Script: assert ST_MESSAGE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.compareMessageString(holder, messageExchange, "ctpSentMessage", "//Results[1]/ResultSet[1]/Row[1]/ST_MESSAGE[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="621824f9-5c43-4a30-9b22-60cd71ba3fce" name="Script: assert ST_MESSAGE_DTATETIME">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "ctpCreateTime", "//Results[1]/ResultSet[1]/Row[1]/ST_MESSAGE_DATETIME[1]/text()", 1);
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert ST_STATUS" id="9db0e630-c611-4fc1-b0bc-fb6028a6a7c3">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_STATUS/text()</path>
              <content>Done</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="e582b46e-d440-4f02-ad61-d85f0bdccf72" name="Xpath: assert ST_TECHNICLE_SENDER">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_TECHNICAL_SENDER/text()</path>
              <content>${#TestSuite#recipient}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="f02f114f-f469-40b0-b523-a0953bfe826e" name="Script: assert ST_STATUS_DATETIME">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "ctpCreateTime", "//Results[1]/ResultSet[1]/Row[1]/ST_STATUS_DATETIME[1]/text()", 1);
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="7ca3a54c-e4d0-4fa7-9071-ccfdc55aae6d" name="Script: assert CREATEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "ctpCreateTime", "//Results[1]/ResultSet[1]/Row[1]/CREATEDDATE[1]/text()", 1);
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="1c934aaa-6497-4cf4-9909-da42824d0fc5" name="Script: assert MODIFIEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "ctpCreateTime", "//Results[1]/ResultSet[1]/Row[1]/MODIFIEDDATE[1]/text()", 1);
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="2e574683-7b2d-43e7-9cf0-a65edd8f6be3" name="Xpath: assert ST_USER_NAME">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_NAME/text()</path>
              <content>${#TestSuite#recipientUserName}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="06336836-c23e-49ab-98ee-7e2856dae0f3" name="Xpath: assert UserIP" disabled="true">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_IP/text()</path>
              <content>${#Project#UserIP}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Wait For Poller 1" id="7331b789-e2e8-4717-a934-12dab034fda6">
        <con:settings/>
        <con:config>
          <delay>${#TestSuite#PollTime}</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_RSXM Table_CTP" id="36fc981a-034a-4d20-be1d-a2c3abc7913d">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.raw_soap_xml_messages where rsxm_st_id = '${#TestCase#ctpId}'</con:query>
          <con:assertion type="JDBC Status" id="9a907c7e-cfdb-4105-ae14-b59c6ee84532" name="JDBC Status"/>
          <con:assertion type="XPath Match" name="Xpath: assert RSXM_XML_MESSAGE" id="14d90270-6f91-4150-993a-d24f2adbd507">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/RSXM_XML_MESSAGE[1]/text()</path>
              <content>${#TestCase#ctpMainMessage}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert RSXM_STATUS" id="14d90270-6f91-4150-993a-d24f2adbd507">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/RSXM_STATUS[1]/text()</path>
              <content>Done</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="c34d921b-0561-4239-9ba6-bb1a2917a2dc" name="Script: assert CREATEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "ctpCreateTime", "//Results[1]/ResultSet[1]/Row[1]/CREATEDDATE[1]/text()", 1);
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="7bbbfb8a-5813-4d22-b05d-6419d70c3cc5" name="Script: assert MODIFIEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "ctpCreateTime", "//Results[1]/ResultSet[1]/Row[1]/MODIFIEDDATE[1]/text()", 1);
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6da604ff-7051-4548-91e9-08beb4569e0b" name="Xpath: assert PROCESS_DATETIME">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/PROCESS_DATETIME[1]</path>
              <content>&lt;PROCESS_DATETIME/></content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="04739f49-2331-417a-870f-5c0d2b543c81" name="Script: SaveRSXM_DM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/RSXM_DM_ID[1]", "ctpDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="143666c8-d8d0-4b20-93cf-866be1c4cb5e" name="Script: SaveRSXM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctpRSXMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_MSL Table_CTP" id="0191fed2-b878-4cdc-b990-498a2a3b4b3d">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>Select * from overstappen.message_logging where 
msl_soap_transaction_id = '${#TestCase#ctpTransactionId}'</con:query>
          <con:assertion type="JDBC Status" id="e095441a-3cf8-4288-8e40-4300718feece" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="90de6c58-ce01-40f7-8601-320c181b4c6a" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6f97994c-fe88-4225-a5fe-6b03e5f2f4df" name="Xpath: assert MSL_MSGIDENTIFIER">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_MSGIDENTIFIER/text()</path>
              <content>${#TestSuite#recipient}-${#TestCase#ContractId}-003</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d64191b1-b311-474b-8343-c036a85b7506" name="Script: assert TIMESTAMP">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "ctpCreateTime", "//Results[1]/ResultSet[1]/Row[1]/MSL_TIMESTAMP[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="600e79cd-a35e-4f1a-8285-d8ffbfca6a9c" name="Contains: assert MSL_MAIL_SUBJECT">
            <con:configuration>
              <token>&lt;MSL_MAIL_SUBJECT/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6f97994c-fe88-4225-a5fe-6b03e5f2f4df" name="Xpath: assert MSL_MAIL_FROM_ADDRESS">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_MAIL_FROM_ADDRESS</path>
              <content>&lt;MSL_MAIL_FROM_ADDRESS/></content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="600e79cd-a35e-4f1a-8285-d8ffbfca6a9c" name="Contains: assert MSL_MAIL_TO_ADDRESS">
            <con:configuration>
              <token>&lt;MSL_MAIL_TO_ADDRESS/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6f97994c-fe88-4225-a5fe-6b03e5f2f4df" name="Xpath: assert MSL_CTD_ID">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_CTD_ID/text()</path>
              <content>${#TestCase#ctdId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6f97994c-fe88-4225-a5fe-6b03e5f2f4df" name="Xpath: assert MSL_DM_ID">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_DM_ID/text()</path>
              <content>${#TestCase#ctpDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6f97994c-fe88-4225-a5fe-6b03e5f2f4df" name="Xpath: assert MSL_IT_ID">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_IT_ID/text()</path>
              <content>${#TestSuite#recipient_ctc_interface_id}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert MSL_CLC_ID]" id="e99eef8e-047f-4dff-930b-7b92f2348249">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/MSL_CLC_ID[1]/text()</path>
              <content>57</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="600e79cd-a35e-4f1a-8285-d8ffbfca6a9c" name="Contains: assert MSL_MAIL_MESSAGE_ID">
            <con:configuration>
              <token>&lt;MSL_MAIL_MESSAGE_ID/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="af9e3913-4e23-4232-9d26-e5b4f37f31f5" name="Contains: assert MSL_LOG">
            <con:configuration>
              <token>&lt;MSL_LOG>503 - Marking message as commit success - Dossier Message Saved successfully</token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="31361619-e64f-4ff3-b185-786e5879ac46" name="Contains: assert MSL_MAIL_MESSAGE_BLOB">
            <con:configuration>
              <token>&lt;MSL_MAIL_MESSAGE_BLOB/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6f97994c-fe88-4225-a5fe-6b03e5f2f4df" name="Xpath: assert MSL_SOAP_MESSAGE_BLOB">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_SOAP_MESSAGE_BLOB/text()</path>
              <content>${#TestCase#ctpMainMessage}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6f97994c-fe88-4225-a5fe-6b03e5f2f4df" name="Xpath: assert ACTIVE">
            <con:configuration>
              <path>/Results/ResultSet/Row/ACTIVE/text()</path>
              <content>t</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d64191b1-b311-474b-8343-c036a85b7506" name="Script: assert CREATEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "ctpCreateTime", "//Results[1]/ResultSet[1]/Row[1]/CREATEDDATE[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d64191b1-b311-474b-8343-c036a85b7506" name="Script: assert MODIFIEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "ctpCreateTime", "//Results[1]/ResultSet[1]/Row[1]/MODIFIEDDATE[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6f97994c-fe88-4225-a5fe-6b03e5f2f4df" name="Xpath: assert MSL_FROM_SPR_CODE">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_FROM_SPR_CODE/text()</path>
              <content>${#TestSuite#recipient}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6f97994c-fe88-4225-a5fe-6b03e5f2f4df" name="Xpath: assert MSL_TO_SPR_CODE">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_TO_SPR_CODE/text()</path>
              <content>${#TestSuite#DONOR}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6f97994c-fe88-4225-a5fe-6b03e5f2f4df" name="Xpath: assert MSL_ADMIN">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_ADMIN/text()</path>
              <content>f</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6f97994c-fe88-4225-a5fe-6b03e5f2f4df" name="Xpath: assert MSL_ST_ID">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_ST_ID/text()</path>
              <content>${#TestCase#ctpId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table_CTP" id="875b1741-604e-45f1-a666-240abb71ea9d">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier where 
ctd_switchid = '${#TestSuite#Recipient}-${#TestSuite#Donor}-${#TestCase#ContractId}-01'</con:query>
          <con:assertion type="JDBC Status" id="1841841d-972a-4bf0-bc88-c1ad0b5ede11" name="JDBC Status"/>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: assert CTD_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def ctdid = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctdId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="5cd23510-e4af-441e-8075-a585f89691fb" name="Xpath: assert CTD_SPR_RECIPIENT_ID">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_SPR_RECIPIENT_ID[1]/text()</path>
              <content>${#TestSuite#recipientId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="796567b6-e3ec-4dc0-a183-0fa21a9b4ee1" name="Xpath: assert CTD_SPR_DONOR_ID">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_SPR_DONOR_ID[1]/text()</path>
              <content>${#TestSuite#donorId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="af76937d-74c4-4027-b279-71130cbec99e" name="Xpath: Xpath : assert CTD_PRV_ID">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_PRV_ID[1]/text()</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="35244668-729d-4cd3-a40a-1d9f8a5b5112" name="Xpath: assert CTD_EBC_ID">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_EBC_ID[1]/text()</path>
              <content>3</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert CTD_DOSSIER_STATUS" id="ac17d9f6-9653-435c-bd0c-9af6917f2aa6">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_DOSSIER_STATUS[1]/text()</path>
              <content>Completed</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert CTD_PROCESS_STATUS" id="ede8cc08-99ab-46ca-baf4-97e9f0895428">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_PROCESS_STATUS[1]/text()</path>
              <content>Performed</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="0f11b543-a937-43a8-a6e6-5fa3f92e784f" name="Xpath: assert CTD_CONTRACTID">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CONTRACTID[1]/text()</path>
              <content>2-${#TestCase#contractID}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="5cd23510-e4af-441e-8075-a585f89691fb" name="Xpath: assert CTD_REQUESTEDDATETIME">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_REQUESTEDDATETIME[1]/text()</path>
              <content>${#TestCase#wishDateWithoutT}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="5cd23510-e4af-441e-8075-a585f89691fb" name="Xpath: assert CTD_CTR_WISHDATETIME">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CTR_WISHDATETIME[1]/text()</path>
              <content>${#TestCase#wishDateWithoutT}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CTRA_PROPOSEDDATETIME">
            <con:configuration>
              <token>&lt;CTD_CTRA_PROPOSEDDATETIME/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_EMAILADDRESSCONTACT">
            <con:configuration>
              <token>&lt;CTD_EMAILADDRESSCONTACT/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_TELEPHONECONTACT">
            <con:configuration>
              <token>&lt;CTD_TELEPHONECONTACT/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="5cd23510-e4af-441e-8075-a585f89691fb" name="Xpath: assert CTD_CONTRACTINITIALS">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CONTRACTINITIALS[1]/text()</path>
              <content>A</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CONTRACTPREFIX">
            <con:configuration>
              <token>&lt;CTD_CONTRACTPREFIX/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="5cd23510-e4af-441e-8075-a585f89691fb" name="Xpath: assert CTD_CONTRACTLASTNAME">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CONTRACTLASTNAME[1]/text()</path>
              <content>COIN</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="5cd23510-e4af-441e-8075-a585f89691fb" name="Xpath: assert CTD_CONTRACTZIPCODE">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CONTRACTZIPCODE[1]/text()</path>
              <content>1389SS</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="5cd23510-e4af-441e-8075-a585f89691fb" name="Xpath: assert CTD_CONTRACTHOUSENUMBER">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CONTRACTHOUSENUMBER[1]/text()</path>
              <content>99999</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="f36a5fdb-2755-403f-8a87-492c9edeef39" name="Xpath: assert CTD_CONTRACTHOUSENUMBEREXT">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CONTRACTHOUSENUMBEREXT</path>
              <content>&lt;CTD_CONTRACTHOUSENUMBEREXT/></content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="f36a5fdb-2755-403f-8a87-492c9edeef39" name="Xpath: assert CTD_CONNECTIONZIPCODE">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CONNECTIONZIPCODE[1]/text()</path>
              <content>1389SS</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="f36a5fdb-2755-403f-8a87-492c9edeef39" name="Xpath: assert CTD_CONNECTIONHOUSENUMBER">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CONNECTIONHOUSENUMBER[1]/text()</path>
              <content>99999</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="f36a5fdb-2755-403f-8a87-492c9edeef39" name="Xpath: assert CTD_CONNECTIONHOUSENUMBEREXT">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CONNECTIONHOUSENUMBEREXT</path>
              <content>&lt;CTD_CONNECTIONHOUSENUMBEREXT/></content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="5cd23510-e4af-441e-8075-a585f89691fb" name="Xpath: assert CTD_NOTE">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_NOTE[1]/text()</path>
              <content>Sunny day-sent ${#TestSuite#soapVersion} expect ${#TestSuite#donorSoapVersion}-linenr. ${#TestSuite#lineNumber}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="5cd23510-e4af-441e-8075-a585f89691fb" name="Xpath: assert CTD_CTP_MIGRATION">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CTP_MIGRATION[1]/text()</path>
              <content>f</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="5cd23510-e4af-441e-8075-a585f89691fb" name="Xpath: assert ACTIVE">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ACTIVE[1]/text()</path>
              <content>t</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="61f553a7-28ef-45c3-a740-e8509a83fd72" name="Script: assert CREATEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "ctpCreateTime", "//Results[1]/ResultSet[1]/Row[1]/CREATEDDATE[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="61f553a7-28ef-45c3-a740-e8509a83fd72" name="Script: assert MODIFIEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "ctpCreateTime", "//Results[1]/ResultSet[1]/Row[1]/MODIFIEDDATE[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="61f553a7-28ef-45c3-a740-e8509a83fd72" name="Script: assert CTD_DM_LAST_MSGDATETIME">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "ctpCreateTime", "//Results[1]/ResultSet[1]/Row[1]/CTD_DM_LAST_MSGDATETIME[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="cb41f4e6-08fe-45cc-a49d-85767311538e" name="Script: assert CTD_CTP_ACTUALDATETIME">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "ctpCreateTime", "//Results[1]/ResultSet[1]/Row[1]/CTD_CTP_ACTUALDATETIME[1]/text()", 1);
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CUSTOMERID">
            <con:configuration>
              <token>&lt;CTD_CUSTOMERID/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CONTRACTCOMPANYNAME">
            <con:configuration>
              <token>&lt;CTD_CONTRACTCOMPANYNAME/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CONTRACTSTREET">
            <con:configuration>
              <token>&lt;CTD_CONTRACTSTREET/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CONTRACTCITY">
            <con:configuration>
              <token>&lt;CTD_CONTRACTCITY/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CONTRACTCOUNTRY">
            <con:configuration>
              <token>&lt;CTD_CONTRACTCOUNTRY/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CONNECTIONSTREET">
            <con:configuration>
              <token>&lt;CTD_CONNECTIONSTREET/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CONNECTIONCITY">
            <con:configuration>
              <token>&lt;CTD_CONNECTIONCITY/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CONNECTIONCOUNTRY">
            <con:configuration>
              <token>&lt;CTD_CONNECTIONCOUNTRY/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="5cd23510-e4af-441e-8075-a585f89691fb" name="Xpath: assert CTD_CTP_BUFFERING">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CTP_BUFFERING[1]/text()</path>
              <content>f</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_NPR_ID">
            <con:configuration>
              <token>&lt;CTD_NPR_ID/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_IFT_ID">
            <con:configuration>
              <token>&lt;CTD_IFT_ID/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="f36a5fdb-2755-403f-8a87-492c9edeef39" name="Xpath: assert CTD_CTR_DT_ID">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CTR_DT_ID[1]/text()</path>
              <content>${#TestSuite#ctd_ctr_dt_id}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="f36a5fdb-2755-403f-8a87-492c9edeef39" name="Xpath: assert CTD_CTRA_DT_ID">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CTR_DT_ID[1]/text()</path>
              <content>${#TestSuite#ctd_ctr_dt_id}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CTCH_WISHDATETIME">
            <con:configuration>
              <token>&lt;CTD_CTCH_WISHDATETIME/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CTCHA_PROPOSEDDATETIME">
            <con:configuration>
              <token>&lt;CTD_CTCHA_PROPOSEDDATETIME/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="f36a5fdb-2755-403f-8a87-492c9edeef39" name="Xpath: assert CTD_CONTRACT_EARLYTERMINATION">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CONTRACT_EARLYTERMINATION[1]/text()</path>
              <content>${#TestSuite#ctd_contract_earlytermination}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CONTRACTADDRESS">
            <con:configuration>
              <token>&lt;CTD_CONTRACTADDRESS/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_CONNECTIONADDRESS">
            <con:configuration>
              <token>&lt;CTD_CONNECTIONADDRESS/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e874d116-8a56-46c2-871b-6ff5ea199fd4" name="Contains: assert CTD_INFRA_ID">
            <con:configuration>
              <token>&lt;CTD_INFRA_ID/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="61f553a7-28ef-45c3-a740-e8509a83fd72" name="Script: assert CTD_VERSION">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "ctpCreateTime", "//Results[1]/ResultSet[1]/Row[1]/CTD_VERSION[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTP" id="c64c029f-18dd-49dd-bdc3-87ea0aea5e42">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where DM.id=${#TestCase#ctpDMId} 
order by createddate desc</con:query>
          <con:assertion type="JDBC Status" id="0270de28-900d-4d60-920c-4ca5f131013f" name="JDBC Status"/>
          <con:assertion type="XPath Match" name="Xpath: assert DM_CTD_ID" id="ac17d9f6-9653-435c-bd0c-9af6917f2aa6">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/DM_CTD_ID/text()</path>
              <content>${#TestCase#ctdId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="e13d4d4f-30f6-4c9c-9b09-26cbc1d409e3" name="Contains: assert DM_EBC_ID">
            <con:configuration>
              <token>&lt;DM_EBC_ID/></token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b1ecf376-5d04-44ad-b5ff-2f3471c1c8f6" name="Xpath: assert DM_MST_ID">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/DM_MST_ID/text()</path>
              <content>5</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b1ecf376-5d04-44ad-b5ff-2f3471c1c8f6" name="Xpath: assert DM_IT_ID">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/DM_IT_ID/text()</path>
              <content>${#TestSuite#recipient_soap_interface_id}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert DM_MESSAGE_STATUS" id="ac17d9f6-9653-435c-bd0c-9af6917f2aa6">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/DM_MESSAGE_STATUS/text()</path>
              <content>0</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert DM_MSGIDENTFIER" id="ac17d9f6-9653-435c-bd0c-9af6917f2aa6">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/DM_MSGIDENTFIER/text()</path>
              <content>${#TestSuite#recipient}-${#TestCase#contractId}-003</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="464c0c26-2264-46e1-84cd-16df6b706adb" name="Script: assert DM_MSGDATETIME">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "ctpCreateTime", "//Results[1]/ResultSet[1]/Row[1]/DM_MSGDATETIME[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert DM_DATETIME" id="ac17d9f6-9653-435c-bd0c-9af6917f2aa6">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/DM_DATETIME/text()</path>
              <content>${#TestCase#wishDateWithoutT}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert DM_NOTE" id="ac17d9f6-9653-435c-bd0c-9af6917f2aa6">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/DM_NOTE/text()</path>
              <content>performed sent ${#TestSuite#soapVersion}, expect ${#TestSuite#donorSoapVersion}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert DM_ITERATION_COUNT" id="ac17d9f6-9653-435c-bd0c-9af6917f2aa6">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/DM_ITERATION_COUNT/text()</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert ACTIVE" id="ac17d9f6-9653-435c-bd0c-9af6917f2aa6">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ACTIVE/text()</path>
              <content>t</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="464c0c26-2264-46e1-84cd-16df6b706adb" name="Script: assert CREATEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "ctpCreateTime", "//Results[1]/ResultSet[1]/Row[1]/CREATEDDATE[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="464c0c26-2264-46e1-84cd-16df6b706adb" name="Script: assert MODIFIEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "ctpCreateTime", "//Results[1]/ResultSet[1]/Row[1]/MODIFIEDDATE[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="80adafe9-9b10-4d3a-987b-b1f49dafcf96" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctpDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_CheckOutGoingMsgType_CTP" id="3edc1d88-10a6-4486-9741-4b8a02d71604">
        <con:settings/>
        <con:config>
          <script>def outtype = testRunner.testCase.testSuite.getPropertyValue("recipientOutMsg")

if (outtype == 'EMAIL') {
    	  testRunner.gotoStepByName( "JDBC_SXM Table_NoRecord_CTP")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_CTP" id="d88b4433-fec7-4970-b79c-c16afb00ef3a">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages 
where sxm_dm_id=${#TestCase#ctpDMId}</con:query>
          <con:assertion type="JDBC Status" id="cdeae0b1-5642-4ec0-840c-0a705c7b1cd5" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="9c69b671-a0c5-4c23-99cb-fff79a4f40e7" name="Xpath: assert SXM_SENDER">
            <con:configuration>
              <path>/Results/ResultSet/Row/SXM_SENDER/text()</path>
              <content>${#TestSuite#recipient}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="7aff1f26-eefe-43ce-a38b-98ecdd908313" name="Xpath: assert SXM_RECEIVER">
            <con:configuration>
              <path>/Results/ResultSet/Row/SXM_RECEIVER/text()</path>
              <content>${#TestSuite#donor}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="0556b0e2-dbbc-4407-aae9-71a1337500f5" name="Xpath: assert SXM_XML_MESSAGE_TYPE">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/SXM_XML_MESSAGE_TYPE[1]</path>
              <content>Performed</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="9d8adc78-e136-40dc-9310-2782809d0b15" name="Xpath: assert SXM_XML_MESSAGE" disabled="true">
            <con:configuration>
              <path/>
              <content/>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="e31eb762-26ba-4058-b8dc-b5c75f834730" name="Script: Xpath: assert SXM_XML_MESSAGE_DATETIME">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "ctpCreateTime", "//Results[1]/ResultSet[1]/Row[1]/SXM_XML_MESSAGE_DATETIME[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="f7a96af5-e0ab-44e5-b2bb-d0a3cb09c255" name="Xpath: assert SXM_STATUS">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/SXM_STATUS[1]</path>
              <content>Done</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="e31eb762-26ba-4058-b8dc-b5c75f834730" name="Script: Xpath: assert SXM_STATUS_DATETIME">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "ctpCreateTime", "//Results[1]/ResultSet[1]/Row[1]/SXM_STATUS_DATETIME[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="f7a96af5-e0ab-44e5-b2bb-d0a3cb09c255" name="Xpath: assert SXM_RETRY_COUNT">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/SXM_RETRY_COUNT[1]</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="0556b0e2-dbbc-4407-aae9-71a1337500f5" name="Xpath: assert ACTIVE">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ACTIVE[1]</path>
              <content>t</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="e31eb762-26ba-4058-b8dc-b5c75f834730" name="Script: Xpath: assert CREATEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "ctpCreateTime", "//Results[1]/ResultSet[1]/Row[1]/CREATEDDATE[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="e31eb762-26ba-4058-b8dc-b5c75f834730" name="Script: Xpath: assert MODIFIEDDATE">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
boolean verification = funcHandle.verifyTimePeriod(holder, messageExchange, "ctpCreateTime", "//Results[1]/ResultSet[1]/Row[1]/MODIFIEDDATE[1]/text()");
assert verification==true</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="f62b0cce-7773-4956-9e46-ac6b3904023c" name="Xpath: assert SXM_IT_ID">
            <con:configuration>
              <path>/Results/ResultSet/Row/SXM_IT_ID/text()</path>
              <content>${#TestSuite#recipient_soap_interface_id}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="754ffff1-ddf4-4f9d-9515-461f041a49cb" name="Xpath: assert SXM_DT_ID">
            <con:configuration>
              <path>/Results/ResultSet/Row/SXM_DT_ID/text()</path>
              <content>${#TestSuite#ctd_ctr_dt_id}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_CheckOutGoingMsgType1_CTP" id="45b2f7b6-b0c9-4834-a3f6-1c1544471897">
        <con:settings/>
        <con:config>
          <script>def outtype = testRunner.testCase.testSuite.getPropertyValue("recipientOutMsg")

if (outtype == 'SOAP') {
    	  testRunner.gotoStepByName( "Delay0")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_NoRecord_CTP" id="4626b842-6831-484a-a5eb-0b0a15d00c5b">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages 
where sxm_dm_id=${#TestCase#ctpDMId}</con:query>
          <con:assertion type="JDBC Status" id="d7a0bef0-7c62-4087-af1c-bfc1d44f39a3" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="08bd5f22-f7c6-4526-b6a4-a146ecc9803e" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>0</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Delay0" id="3db5e85f-ec7b-4177-aa28-1764e28c7d27">
        <con:settings/>
        <con:config>
          <delay>1000</delay>
        </con:config>
      </con:testStep>
      <con:setupScript>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import groovy.time.TimeCategory
def today = new Date() 
def now = today.format("yyyy-MM-dd'T'HH:mm:ss")
testRunner.testCase.setPropertyValue("Now",now)
def wishdate = today 
use(TimeCategory) {
	   wishdate = wishdate + 60.seconds
}
def wishdatestr = wishdate.format("yyyy-MM-dd'T'HH:mm:ss")
def wishdatestrwithOutT = wishdate.format("yyyy-MM-dd' 'HH:mm:ss")
testRunner.testCase.setPropertyValue("wishDate",wishdatestr)
testRunner.testCase.setPropertyValue("wishDateWithoutT",wishdatestrwithOutT)
def proposedDate = today 
use(TimeCategory) {
	   proposedDate = proposedDate + 2.days
}
def proposedDateStr = proposedDate.format("yyyy-MM-dd'T'HH:mm:ss")
def proposeddateStrwithOutT = proposedDate.format("yyyy-MM-dd' 'HH:mm:ss")
testRunner.testCase.setPropertyValue("proposedDate",proposedDateStr)
testRunner.testCase.setPropertyValue("proposedDateWithoutT",proposeddateStrwithOutT)
String contractId = funcHandle.getRandomString()
testRunner.testCase.setPropertyValue("contractId",contractId)</con:setupScript>
      <con:tearDownScript/>
      <con:properties/>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>122d3297-f22d-449f-ac52-c46f1bfb714e</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:properties>
      <con:property>
        <con:name>TimestampNOW</con:name>
        <con:value>${=String.format('%tFT%&lt;tT', new Date())}</con:value>
      </con:property>
      <con:property>
        <con:name>PollTime</con:name>
        <con:value>5000</con:value>
      </con:property>
      <con:property>
        <con:name>lineNumber</con:name>
        <con:value>0</con:value>
      </con:property>
      <con:property>
        <con:name>testdatafile</con:name>
        <con:value>soaptosoap.csv</con:value>
      </con:property>
      <con:property>
        <con:name>browser</con:name>
        <con:value>firefox</con:value>
      </con:property>
    </con:properties>
    <con:setupScript><![CDATA[def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
import org.apache.commons.lang.RandomStringUtils
import groovy.time.TimeCategory
import nl.coin.Selenium.*;
def directory = groovyUtils.projectPath + "/"
System.setProperty("projectfiledir", directory)
def seleniumHandle = new SeleniumActions();
def funcHandle = new ReadymadeFunctions();
def Line = funcHandle.getTestDataAndIncreaseLinenumber(testSuite, directory);
String[] propData = Line.split(";")
funcHandle.setRecipientAndDonorSoapCredentials(seleniumHandle, testSuite, directory, propData[0], propData[1]);
testSuite.setPropertyValue("soapVersion",propData[2])
testSuite.setPropertyValue("dossierType",propData[3])
testSuite.setPropertyValue("compensationOK",propData[4])
import groovy.sql.Sql;
def  con = funcHandle.createDBConObject(testSuite);
def recepientDetails = funcHandle.setProperty4mDB(testSuite, con, "select spr_code, it_interface_type,business_gui_only from overstappen.service_provider inner join overstappen.interface_type on service_provider.spr_request_it_id = interface_type.id where service_provider.spr_code = '"+ propData[0]+"'", ["business_gui_only", "it_interface_type"] as String[], ["recipientbgo", "recipientif"] as String[]);
def donorDetails = funcHandle.setProperty4mDB(testSuite, con, "select spr_code, it_interface_type,business_gui_only from overstappen.service_provider inner join overstappen.interface_type on service_provider.spr_request_it_id = interface_type.id where service_provider.spr_code = '"+ propData[1]+"'", ["business_gui_only", "it_interface_type"] as String[], ["donorbgo", "donorif"] as String[]);
def donorsoap = funcHandle.getDonorSoapVersionS2SAndSetProperty(testSuite, donorDetails[1], propData[3], "donorSoapVersion");
def donorbusiness = funcHandle.getDonorDossierTypeS2SAndSetProperty(testSuite, donorDetails[1], propData[3], "donorDossierType");
def donorMessage = funcHandle.getMessageTypeAndSetProperty(testSuite, donorDetails[1], propData[3], donorDetails[0], "donorMessage");
testSuite.setPropertyValue( "businessGuiOnly" , donorDetails[0])
def query1 = con.rows("select id from overstappen.service_provider where spr_code='"+ propData[0]+"'")
testSuite.setPropertyValue( "recipientId", query1.get(0).getProperty("id").toString() )
def query2 = con.rows("select id from overstappen.service_provider where spr_code='"+ propData[1]+"'")
testSuite.setPropertyValue( "donorId", query2.get(0).getProperty("id").toString() )
def query3 = con.rows("select par_ctp_buffering from overstappen.parameters")
testSuite.setPropertyValue( "par_ctp_buffering", query3.get(0).getProperty("par_ctp_buffering").toString().substring(0,1) )
def query4 = con.rows("select spr_request_answer_it_id from overstappen.service_provider where spr_code='"+ propData[1]+"'")
testSuite.setPropertyValue( "donor_ctra_interface_id", query4.get(0).getProperty("spr_request_answer_it_id").toString() )
def query5 = con.rows("select spr_request_it_id from overstappen.service_provider where spr_code='"+ propData[0]+"'")
testSuite.setPropertyValue( "recipient_ctr_interface_id", query5.get(0).getProperty("spr_request_it_id").toString() )
def query6 = con.rows("select id from overstappen.interface_type where it_interface_type='SOAP"+donorsoap+"'")
testSuite.setPropertyValue( "donor_soap_interface_id", query6.get(0).getProperty("id").toString() )
def query7 = con.rows("select spr_cancel_it_id from overstappen.service_provider where spr_code='"+ propData[0]+"'")
testSuite.setPropertyValue( "recipient_ctc_interface_id", query7.get(0).getProperty("spr_cancel_it_id").toString() )
if (donorbusiness.equalsIgnoreCase("<business>Y</business>")) {
  testSuite.setPropertyValue( "ctd_ctra_dt_id", "2")
} else {
  testSuite.setPropertyValue( "ctd_ctra_dt_id", "1")
}
if (propData[3].equalsIgnoreCase("<business>Y</business>")) {
  testSuite.setPropertyValue( "ctd_ctr_dt_id", "2")
} else {
  testSuite.setPropertyValue( "ctd_ctr_dt_id", "1")
}
if (propData[4].equalsIgnoreCase("<earlytermination>Y</earlytermination>")) {
  testSuite.setPropertyValue( "ctd_contract_earlytermination", "t")
}else {
  testSuite.setPropertyValue( "ctd_contract_earlytermination", "f")
}
def query8 = con.rows("select id from overstappen.interface_type where it_interface_type='SOAP"+propData[2]+"'")
testSuite.setPropertyValue( "recipient_soap_interface_id", query8.get(0).getProperty("id").toString() )
funcHandle.getOutgoingMsgTypeAndSetProperty(testSuite, propData[3], recepientDetails[0], recepientDetails[1], "donorOutMsg");
funcHandle.getOutgoingMsgTypeAndSetProperty(testSuite, propData[3], donorDetails[0], donorDetails[1], "recipientOutMsg");
con.close()]]></con:setupScript>
    <con:tearDownScript/>
    <con:reportParameters/>
  </con:testSuite>
  <con:endpointStrategy xsi:type="con:DefaultEndpointStrategy" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:endpoint mode="COMPLEMENT" username="Bert" password="Ernie" wssType="PasswordText">http://testcomp.coin.nl/compv3/MessageService</con:endpoint>
    <con:endpoint mode="COMPLEMENT" username="Bert" password="Ernie" wssType="PasswordText" domain="" outgoingWss="" incomingWss="">http://210.7.69.28:8080/compv3/MessageService</con:endpoint>
    <con:endpoint mode="COMPLEMENT" username="Bert" password="Ernie">http://192.168.100.28:8080/compv3/MessageService</con:endpoint>
  </con:endpointStrategy>
  <con:requirements/>
  <con:properties>
    <con:property>
      <con:name>directory</con:name>
      <con:value/>
    </con:property>
    <con:property>
      <con:name>SoapUrl</con:name>
      <con:value/>
    </con:property>
    <con:property>
      <con:name>DBHostname</con:name>
      <con:value/>
    </con:property>
    <con:property>
      <con:name>DBPort</con:name>
      <con:value/>
    </con:property>
    <con:property>
      <con:name>DBUser</con:name>
      <con:value/>
    </con:property>
    <con:property>
      <con:name>DBPassword</con:name>
      <con:value/>
    </con:property>
    <con:property>
      <con:name>DBDatabase</con:name>
      <con:value/>
    </con:property>
    <con:property>
      <con:name>GUIUrl</con:name>
      <con:value/>
    </con:property>
    <con:property>
      <con:name>UserIP</con:name>
      <con:value/>
    </con:property>
  </con:properties>
  <con:afterLoadScript/>
  <con:wssContainer/>
  <con:databaseConnectionContainer>
    <con:databaseConnection>
      <con:name>JDBC</con:name>
      <con:driver>org.postgresql.Driver</con:driver>
      <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
      <con:password>${#Project#DBPassword}</con:password>
    </con:databaseConnection>
  </con:databaseConnectionContainer>
  <con:oAuth2ProfileContainer/>
  <con:oAuth1ProfileContainer/>
  <con:reporting>
    <con:xmlTemplates/>
    <con:parameters/>
  </con:reporting>
  <con:sensitiveInformation/>
</con:soapui-project>
