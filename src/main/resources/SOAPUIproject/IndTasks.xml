<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project activeEnvironment="Default" name="IndTasks" resourceRoot="${projectDir}" soapui-version="5.2.1" abortOnError="false" runType="SEQUENTIAL" id="c69d17d9-8a76-4230-ac09-05b6029fb035" xmlns:con="http://eviware.com/soapui/config">
  <con:settings>
    <con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.TestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="B2 Sunny Day-SOAP state transitions"/>
  <con:entry key="Password" value=""/>
  <con:entry key="TestRunner Path" value="C:\Program Files\SmartBear\SoapUI-5.1.3\bin"/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="user-settings.xml Password" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="false"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Export JUnit Results" value="false"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Export All" value="false"/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="&lt;all>"/>
  <con:entry key="Print Report" value="false"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value=""/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="Endpoint" value=""/>
  <con:entry key="Select Report Type" value=""/>
</xml-fragment>]]></con:setting>
    <con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.LoadTestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="B2 Sunny Day-SOAP state transitions"/>
  <con:entry key="Report to Generate" value=""/>
  <con:entry key="Password" value=""/>
  <con:entry key="TestRunner Path" value="/home/hemasundar/SmartBear/SoapUI-5.1.3/bin"/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="LoadTest" value="&lt;all>"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="user-settings.xml Password" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="false"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Print Report Statistics" value="false"/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="&lt;all>"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value=""/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Endpoint" value=""/>
  <con:entry key="ThreadCount" value=""/>
  <con:entry key="Limit" value=""/>
</xml-fragment>]]></con:setting>
  </con:settings>
  <con:interface xsi:type="con:WsdlInterface" wsaVersion="NONE" name="CompWebserviceSoap11" type="wsdl" bindingName="{http://coin.nl/ws/definitions}CompWebserviceSoap11" soapVersion="1_1" anonymous="optional" definition="${#Project#SoapUrl}" id="8a537fab-845e-48f0-a37f-a40e9d723dce" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:settings>
      <con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.tcpmon.TcpMonAction@values-local">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Local Port" value=""/>
  &lt;con:entry key="Add local endpoint" value="false"/>
  &lt;con:entry key="Endpoint" value=""/>
&lt;/xml-fragment></con:setting>
    </con:settings>
    <con:definitionCache type="TEXT" rootPart="http://192.168.100.28:8080/compv3/compmessage.wsdl">
      <con:part>
        <con:url>http://192.168.100.28:8080/compv3/compmessage.wsdl</con:url>
        <con:content><![CDATA[<wsdl:definitions targetNamespace="http://coin.nl/ws/definitions" xmlns:sch="http://coin.nl/ws/schema" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="http://coin.nl/ws/definitions" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
  <wsdl:types>
    <xsd:schema elementFormDefault="qualified" targetNamespace="http://coin.nl/ws/schema" xmlns:ws-msg="http://coin.nl/ws/schema" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
      <!--Simple Types-->
      <xsd:simpleType name="TransactionId">
        <xsd:restriction base="xsd:string">
          <xsd:maxLength value="60"/>
        </xsd:restriction>
      </xsd:simpleType>
      <!--Grouped Elements-->
      <xsd:group name="Message">
        <xsd:annotation>
          <xsd:documentation/>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element name="Text" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Mandatory field containing the message text.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:group>
      <!--Complex Types-->
      <xsd:complexType name="Message">
        <xsd:sequence>
          <xsd:group ref="ws-msg:Message"/>
        </xsd:sequence>
      </xsd:complexType>
      <!--Request - Response Interface(s)-->
      <xsd:element name="SendMessagesRequest">
        <xsd:annotation>
          <xsd:appinfo>Request interface for SendMessages.</xsd:appinfo>
          <xsd:documentation>Generic interface for sending one or more (xml
						based) messages.
						When successfully received, the receiver of the
						request will respond
						with a TransactionId,
						uniquely identifying
						reception of the request and all the messages in it.</xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="Sender" type="xsd:string"/>
            <xsd:element name="Messages">
              <xsd:complexType>
                <xsd:sequence maxOccurs="unbounded" minOccurs="1">
                  <xsd:element name="Message" type="ws-msg:Message"/>
                </xsd:sequence>
              </xsd:complexType>
            </xsd:element>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="SendMessagesResponse">
        <xsd:annotation>
          <xsd:appinfo>Response interface for SendMessages.</xsd:appinfo>
          <xsd:documentation/>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="TransactionId" type="ws-msg:TransactionId"/>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
    </xsd:schema>
  </wsdl:types>
  <wsdl:message name="SendMessagesRequest">
    <wsdl:part element="sch:SendMessagesRequest" name="SendMessagesRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="SendMessagesResponse">
    <wsdl:part element="sch:SendMessagesResponse" name="SendMessagesResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:portType name="CompWebservice">
    <wsdl:operation name="SendMessages">
      <wsdl:input message="tns:SendMessagesRequest" name="SendMessagesRequest"></wsdl:input>
      <wsdl:output message="tns:SendMessagesResponse" name="SendMessagesResponse"></wsdl:output>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="CompWebserviceSoap11" type="tns:CompWebservice">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="SendMessages">
      <soap:operation soapAction="http://coin.nl/SendMessages"/>
      <wsdl:input name="SendMessagesRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="SendMessagesResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="CompWebserviceService">
    <wsdl:port binding="tns:CompWebserviceSoap11" name="CompWebserviceSoap11">
      <soap:address location="http://192.168.100.28:8080/compv3/MessageService"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content>
        <con:type>http://schemas.xmlsoap.org/wsdl/</con:type>
      </con:part>
    </con:definitionCache>
    <con:endpoints>
      <con:endpoint>${#Project#SoapUrl}</con:endpoint>
    </con:endpoints>
    <con:operation isOneWay="false" action="http://coin.nl/SendMessages" name="SendMessages" bindingOperationName="SendMessages" type="Request-Response" outputName="SendMessagesResponse" inputName="SendMessagesRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="8c3829e4-5325-42d3-82e4-242fad1e423c">
      <con:settings/>
      <con:call name="Contract Termination Request" outgoingWss="" incomingWss="" id="8915428a-63eb-41b1-989c-749c2e2f0cce" wssPasswordType="PasswordText">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>${#Project#SoapUrl}</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="http://coin.nl/ws/schema">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:SendMessagesRequest>
         <sch:Sender>TP10</sch:Sender>
         <sch:Messages>
            <sch:Message>
               <sch:Text><![CDATA[<?xml version="1.0"?>
<over:message xmlns:over="http://www.coin.nl/Overstappen_MESSAGES">
<over:header>
<over:receiver>
<!--Optional:-->
<over:networkoperator>TP14</over:networkoperator>
<!--Optional:-->
<over:serviceprovider>TP14</over:serviceprovider>
</over:receiver>
<over:sender>
<!--Optional:-->
<over:networkoperator>TP10</over:networkoperator>
<!--Optional:-->
<over:serviceprovider>TP10</over:serviceprovider>
</over:sender>
<!--Optional:-->
<over:messageid>TP10-TP14-TESTING-01</over:messageid>
<over:timestamp></over:timestamp>
</over:header>
<over:body>
<over:contractterminationrequest>
<over:v1>
<over:dossierid>TP10-TP14-TESTING-01</over:dossierid>
<!--Optional:-->
<over:recipientserviceprovider>TP10</over:recipientserviceprovider>
<!--Optional:-->
<over:recipientnetworkoperator>TP10</over:recipientnetworkoperator>
<!--Optional:-->
<over:donornetworkoperator>TP14</over:donornetworkoperator>
<!--Optional:-->
<over:donorserviceprovider>TP14</over:donorserviceprovider>
<over:customerinfo>
<!--Optional:-->
<over:initials>Ms</over:initials>
<!--Optional:-->
<over:prefix>Priyanka</over:prefix>
<!--Optional:-->
<over:lastname>Taneja</over:lastname>
<!--Optional:-->
<over:telephonecontact>0886086375</over:telephonecontact>
<!--Optional:-->
<over:emailaddresscontact>f@xebia.com</over:emailaddresscontact>
<!--Optional:-->
<over:companyname>XEBIA PVT LTD</over:companyname>
<!--Optional:-->
<over:customerid>ABCDEFGH1234</over:customerid>
<!--Optional:-->
<over:contractid>SOAP3EMAIL</over:contractid>
<over:contractaddress>
<!--Optional:-->
<over:address>HARINAGAR</over:address>
<over:housenr>123</over:housenr>
<!--Optional:-->
<over:housenr_ext>123</over:housenr_ext>
<over:postcode>1234AS</over:postcode>
<!--Optional:-->
<over:city>DELHI</over:city>
<!--Optional:-->
<over:country>IND</over:country>
</over:contractaddress>
<over:connectionaddress>
<!--Optional:-->
<over:address>HARINAGAR</over:address>
<over:housenr>123</over:housenr>
<!--Optional:-->
<over:housenr_ext>123</over:housenr_ext>
<over:postcode>1234AS</over:postcode>
<!--Optional:-->
<over:city>DELHI</over:city>
<!--Optional:-->
<over:country>IND</over:country>
</over:connectionaddress>
</over:customerinfo>
<over:wishdatetime>2014-01-14</over:wishdatetime>
<!--Optional:-->
<over:note>TEST</over:note>
</over:v1>
</over:contractterminationrequest>
</over:body>
</over:message>]]]]>><![CDATA[</sch:Text>
            </sch:Message>
         </sch:Messages>
      </sch:SendMessagesRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:credentials>
          <con:username>COINTP10</con:username>
          <con:password>COINTP10</con:password>
          <con:domain xsi:nil="true"/>
          <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
          <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
          <con:preemptive>true</con:preemptive>
          <con:authType>Preemptive</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://coin.nl/SendMessages"/>
        <con:wsrmConfig version="1.2"/>
      </con:call>
      <con:call name="Contract Termination Request Answer" outgoingWss="" incomingWss="" id="73af3a6a-ca5e-4560-819c-8035caf9acee">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>${#Project#SoapUrl}</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="http://coin.nl/ws/schema">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:SendMessagesRequest>
         <sch:Sender>KPN</sch:Sender>
         <sch:Messages>
            <sch:Message>
               <sch:Text><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<message xmlns="http://www.coin.nl/Overstappen_MESSAGES">
  <header>
    <receiver>
      <networkoperator>ZIGGO</networkoperator>
      <serviceprovider>ZIGGO</serviceprovider>
    </receiver>
    <sender>
      <networkoperator>KPN</networkoperator>
      <serviceprovider>KPN</serviceprovider>
    </sender>
    <messageid>ZIGGO-KPN-GUI2SOAP1-01</messageid>
    <timestamp>2014-01-08T12:56:45</timestamp>
  </header>
  <body>
    <contractterminationrequestanswer>
      <v1>
        <dossierid>ZIGGO-KPN-GUI2SOAP1-01</dossierid>
        <blocking>N</blocking>
        <wishdatetime>2014-01-17</wishdatetime>
        <blockingcode>0</blockingcode>
        <note>TEST-ANSWER</note>
      </v1>
    </contractterminationrequestanswer>
  </body>
</message>]]]]>><![CDATA[</sch:Text>
            </sch:Message>
         </sch:Messages>
      </sch:SendMessagesRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:credentials>
          <con:username>Bert</con:username>
          <con:password>Ernie</con:password>
          <con:domain xsi:nil="true"/>
          <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
          <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
          <con:preemptive>true</con:preemptive>
          <con:authType>Preemptive</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://coin.nl/SendMessages"/>
        <con:wsrmConfig version="1.2"/>
      </con:call>
      <con:call name="Multiple Contract Termination Requests" outgoingWss="" incomingWss="" id="ad0bd36e-cbfe-4f7c-bf73-cd36950c1291" wssPasswordType="PasswordText">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>${#Project#SoapUrl}</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="http://coin.nl/ws/schema">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:SendMessagesRequest>
         <sch:Sender>CRY</sch:Sender>
         <sch:Messages>
            <sch:Message>
               <sch:Text><![CDATA[<?xml version="1.0"?>
<message xmlns="http://www.coin.nl/Overstappen_MESSAGES">
<header>
<receiver>
<networkoperator>FARI</networkoperator>
<serviceprovider>FARI</serviceprovider>
</receiver>
<sender>
<networkoperator>CRY</networkoperator>
<serviceprovider>CRY</serviceprovider>
</sender>
<messageid>CRY-FARI-CryFari01-01</messageid>
<timestamp>2014-01-22T13:40:45</timestamp>
</header>
<body>
<contractterminationrequest>
<v1>
<dossierid>CRY-FARI-CryFari01-01</dossierid>
<recipientserviceprovider>CRY</recipientserviceprovider>
<recipientnetworkoperator>CRY</recipientnetworkoperator>
<donornetworkoperator>FARI</donornetworkoperator>
<donorserviceprovider>FARI</donorserviceprovider>
<customerinfo>
<initials>Ms</initials>
<prefix>Priyanka</prefix>
<lastname>Tanjea</lastname>
<telephonecontact>0886086375</telephonecontact>
<emailaddresscontact>f@xebia.com</emailaddresscontact>
<companyname>XEBIA PVT LTD</companyname>
<customerid>ABCDEFGH1234</customerid>
<contractid>CryFari01</contractid>
<contractaddress>
<address>HARINAGAR</address>
<housenr>123</housenr>
<housenr_ext>123</housenr_ext>
<postcode>1234AS</postcode>
<city>DELHI</city>
<country>IND</country>
</contractaddress>
<connectionaddress>
<address>HARINAGAR</address>
<housenr>123</housenr>
<housenr_ext>123</housenr_ext>
<postcode>1234AS</postcode>
<city>DELHI</city>
<country>IND</country>
</connectionaddress>
</customerinfo>
<wishdatetime>2014-02-10</wishdatetime>
<note></note>
</v1>
</contractterminationrequest>
</body>
</message>]]]]>><![CDATA[</sch:Text>
            </sch:Message>
            <sch:Message>
               <sch:Text><![CDATA[<?xml version="1.0"?>
<message xmlns="http://www.coin.nl/Overstappen_MESSAGES">
<header>
<receiver>
<networkoperator>UPC</networkoperator>
<serviceprovider>UPC</serviceprovider>
</receiver>
<sender>
<networkoperator>CRY</networkoperator>
<serviceprovider>CRY</serviceprovider>
</sender>
<messageid>CRY-UPC-CryUpc01-01</messageid>
<timestamp>2014-01-22T13:40:45</timestamp>
</header>
<body>
<contractterminationrequest>
<v1>
<dossierid>CRY-UPC-CryUpc01-01</dossierid>
<recipientserviceprovider>CRY</recipientserviceprovider>
<recipientnetworkoperator>CRY</recipientnetworkoperator>
<donornetworkoperator>UPC</donornetworkoperator>
<donorserviceprovider>UPC</donorserviceprovider>
<customerinfo>
<initials>Ms</initials>
<prefix>Priyanka</prefix>
<lastname>Tanjea</lastname>
<telephonecontact>0886086375</telephonecontact>
<emailaddresscontact>f@xebia.com</emailaddresscontact>
<companyname>XEBIA PVT LTD</companyname>
<customerid>ABCDEFGH1234</customerid>
<contractid>CryUpc01</contractid>
<contractaddress>
<address>HARINAGAR</address>
<housenr>123</housenr>
<housenr_ext>123</housenr_ext>
<postcode>1234AS</postcode>
<city>DELHI</city>
<country>IND</country>
</contractaddress>
<connectionaddress>
<address>HARINAGAR</address>
<housenr>123</housenr>
<housenr_ext>123</housenr_ext>
<postcode>1234AS</postcode>
<city>DELHI</city>
<country>IND</country>
</connectionaddress>
</customerinfo>
<wishdatetime>2014-02-11</wishdatetime>
<note></note>
</v1>
</contractterminationrequest>
</body>
</message>]]]]>><![CDATA[</sch:Text>
            </sch:Message>
            <sch:Message>
               <sch:Text><![CDATA[<?xml version="1.0"?>
<message xmlns="http://www.coin.nl/Overstappen_MESSAGES">
<header>
<receiver>
<networkoperator>TEL2</networkoperator>
<serviceprovider>TEL2</serviceprovider>
</receiver>
<sender>
<networkoperator>CRY</networkoperator>
<serviceprovider>CRY</serviceprovider>
</sender>
<messageid>CRY-TEL2-CryTel201-01</messageid>
<timestamp>2014-01-22T13:40:45</timestamp>
</header>
<body>
<contractterminationrequest>
<v1>
<dossierid>CRY-TEL2-CryTel201-01</dossierid>
<recipientserviceprovider>CRY</recipientserviceprovider>
<recipientnetworkoperator>CRY</recipientnetworkoperator>
<donornetworkoperator>TEL2</donornetworkoperator>
<donorserviceprovider>TEL2</donorserviceprovider>
<customerinfo>
<initials>Ms</initials>
<prefix>Priyanka</prefix>
<lastname>Tanjea</lastname>
<telephonecontact>0886086375</telephonecontact>
<emailaddresscontact>f@xebia.com</emailaddresscontact>
<companyname>XEBIA PVT LTD</companyname>
<customerid>ABCDEFGH1234</customerid>
<contractid>CryTel201</contractid>
<contractaddress>
<address>HARINAGAR</address>
<housenr>123</housenr>
<housenr_ext>123</housenr_ext>
<postcode>1234AS</postcode>
<city>DELHI</city>
<country>IND</country>
</contractaddress>
<connectionaddress>
<address>HARINAGAR</address>
<housenr>123</housenr>
<housenr_ext>123</housenr_ext>
<postcode>1234AS</postcode>
<city>DELHI</city>
<country>IND</country>
</connectionaddress>
</customerinfo>
<wishdatetime>2014-02-12</wishdatetime>
<note></note>
</v1>
</contractterminationrequest>
</body>
</message>]]]]>><![CDATA[</sch:Text>
            </sch:Message>
         </sch:Messages>
      </sch:SendMessagesRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:credentials>
          <con:username>Bert</con:username>
          <con:password>Ernie</con:password>
          <con:domain xsi:nil="true"/>
          <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
          <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
          <con:preemptive>true</con:preemptive>
          <con:authType>Preemptive</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://coin.nl/SendMessages"/>
        <con:wsrmConfig version="1.2"/>
      </con:call>
      <con:call name="Contract Termination Performed" id="6e6b212c-9d53-4340-bc3a-cadf2fccdbe8" outgoingWss="" incomingWss="">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>${#Project#SoapUrl}</con:endpoint>
        <con:request><![CDATA[<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/">
   <SOAP-ENV:Header/>
   <SOAP-ENV:Body>
      <SendMessagesRequest xmlns="http://coin.nl/ws/schema">
         <Sender>CRY</Sender>
         <Messages>
            <Message>
               <Text><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<message xmlns="http://www.coin.nl/Overstappen_MESSAGES">
   <header>
      <receiver>
                  <networkoperator>FARI</networkoperator>
         	              <serviceprovider>FARI</serviceprovider>
               </receiver>
      <sender>
                  <networkoperator>CRY</networkoperator>
         		          <serviceprovider>CRY</serviceprovider>
               </sender>
            <messageid>CRY-FARI-EndFlow01-01</messageid>
            <timestamp>2014-01-23T14:11:18</timestamp>
   </header>
   <body>
      <contractterminationperformed>
         <v1>
         <dossierid>CRY-FARI-EndFlow01-01</dossierid>
                        <recipientserviceprovider>CRY</recipientserviceprovider>
                                    <recipientnetworkoperator>CRY</recipientnetworkoperator>
            			            <donornetworkoperator>FARI</donornetworkoperator>
            			            <donorserviceprovider>FARI</donorserviceprovider>
                        <actualdatetime>2014-01-23T14:11:18</actualdatetime>
                        <note>Endflow_Performed</note>
                     </v1>
      </contractterminationperformed>
   </body>
</message>]]]]>><![CDATA[</Text>
            </Message>
         </Messages>
      </SendMessagesRequest>
   </SOAP-ENV:Body>
</SOAP-ENV:Envelope>]]></con:request>
        <con:credentials>
          <con:username>Bert</con:username>
          <con:password>Ernie</con:password>
          <con:domain xsi:nil="true"/>
          <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
          <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
          <con:authType>Global HTTP Settings</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://coin.nl/SendMessages"/>
        <con:wsrmConfig version="1.2"/>
      </con:call>
      <con:call name="Contract Termination Change" id="b4f976a0-cc99-45df-a7f1-d2aa1fa00928" outgoingWss="" incomingWss="">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>${#Project#SoapUrl}</con:endpoint>
        <con:request><![CDATA[<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/">
   <SOAP-ENV:Header/>
   <SOAP-ENV:Body>
      <SendMessagesRequest xmlns="http://coin.nl/ws/schema">
         <Sender>CRY</Sender>
         <Messages>
            <Message>
               <Text><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<message xmlns="http://www.coin.nl/Overstappen_MESSAGES">
   <header>
      <receiver>
                  <networkoperator>FARI</networkoperator>
         	              <serviceprovider>FARI</serviceprovider>
               </receiver>
      <sender>
                  <networkoperator>CRY</networkoperator>
         		          <serviceprovider>CRY</serviceprovider>
               </sender>
            <messageid>CRY-FARI-EndFlow01-01</messageid>
            <timestamp>2014-01-23T13:19:15</timestamp>
   </header>
   <body>
      <change>
         <v1>
         	<dossierid>CRY-FARI-EndFlow01-01</dossierid>
            <wishdatetime>2014-02-18T15:00:34</wishdatetime>
                        <note>endflow</note>
                     </v1>
      </change>
   </body>
</message>]]]]>><![CDATA[</Text>
            </Message>
         </Messages>
      </SendMessagesRequest>
   </SOAP-ENV:Body>
</SOAP-ENV:Envelope>]]></con:request>
        <con:credentials>
          <con:username>Bert</con:username>
          <con:password>Ernie</con:password>
          <con:domain xsi:nil="true"/>
          <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
          <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
          <con:authType>Global HTTP Settings</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://coin.nl/SendMessages"/>
        <con:wsrmConfig version="1.2"/>
      </con:call>
      <con:call name="Contract Termination Change Answer" id="7ecf7d3b-76e3-4e36-a0a6-bed12f91e92e" outgoingWss="" incomingWss="" timeout="" wssPasswordType="PasswordText">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>${#Project#SoapUrl}</con:endpoint>
        <con:request><![CDATA[<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/">
   <SOAP-ENV:Header/>
   <SOAP-ENV:Body>
      <SendMessagesRequest xmlns="http://coin.nl/ws/schema">
         <Sender>TP10</Sender>
         <Messages>
            <Message>
               <Text><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<message xmlns="http://www.coin.nl/Overstappen_MESSAGES">
   <header>
      <receiver>
                  <networkoperator>TP14</networkoperator>
         	              <serviceprovider>TP14</serviceprovider>
               </receiver>
      <sender>
                  <networkoperator>TP10</networkoperator>
         		          <serviceprovider>TP10</serviceprovider>
               </sender>
            <messageid>TP14-TP10-ALSBVNZRI-06</messageid>
            <timestamp>${=String.format('%tFT%<tT', new Date())}</timestamp>
   </header>
   <body>
      <changeanswer>
         <v2>
         	<dossierid>TP14-TP10-ALSBVNZRI-01</dossierid>
         	<blocking>N</blocking>
         	            <wishdatetime>2016-02-27T13:32:16</wishdatetime>
                      <proposeddatetime>2016-02-27T13:32:16</proposeddatetime>
                      <note>TESTWITHCHTCHAOK AFter blocking</note>
                     </v2>
      </changeanswer>
   </body>
</message>]]]]>><![CDATA[</Text>
            </Message>
         </Messages>
      </SendMessagesRequest>
   </SOAP-ENV:Body>
</SOAP-ENV:Envelope>]]></con:request>
        <con:credentials>
          <con:username>COINTP10</con:username>
          <con:password>COINTP10</con:password>
          <con:domain xsi:nil="true"/>
          <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
          <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
          <con:authType>Global HTTP Settings</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://coin.nl/SendMessages"/>
        <con:wsrmConfig version="1.2"/>
      </con:call>
      <con:call name="Contract Termination Cancel" id="fed57306-8fb5-4471-85e0-47e2f5a6d1d8" outgoingWss="" incomingWss="">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>${#Project#SoapUrl}</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="http://coin.nl/ws/schema">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:SendMessagesRequest>
         <sch:Sender>ZIGGO</sch:Sender>
         <sch:Messages>
            <sch:Message>
               <sch:Text><![CDATA[<?xml version="1.0"?>
<message xmlns="http://www.coin.nl/Overstappen_MESSAGES">
<header>
<receiver>
<!--Optional:-->
<networkoperator>KPN</networkoperator>
<!--Optional:-->
<serviceprovider>KPN</serviceprovider>
</receiver>
<sender>
<!--Optional:-->
<networkoperator>ZIGGO</networkoperator>
<!--Optional:-->
<serviceprovider>ZIGGO</serviceprovider>
</sender>
<!--Optional:-->
<messageid>ZIGGO-KPN-EndFlow01-01</messageid>
<timestamp>2014-01-28T14:30:00</timestamp>
</header>
<body>
    <cancel>
      <v1>
        <dossierid>ZIGGO-KPN-EndFlow01-01</dossierid>
        <note>Endflow_Cancel</note>
      </v1>
    </cancel>
</body>
</message>]]]]>><![CDATA[</sch:Text>
            </sch:Message>
         </sch:Messages>
      </sch:SendMessagesRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:credentials>
          <con:username>Bert</con:username>
          <con:password>Ernie</con:password>
          <con:domain xsi:nil="true"/>
          <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
          <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
          <con:authType>Global HTTP Settings</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://coin.nl/SendMessages"/>
        <con:wsrmConfig version="1.2"/>
      </con:call>
    </con:operation>
  </con:interface>
  <con:testSuite name="CDV753" id="72a5c2fc-02a8-4c9b-a301-976f570a43f3">
    <con:description>Sequential</con:description>
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ConsumerCheck" searchProperties="true" id="ee1fc810-b8d9-4a33-8d1f-431849d5897e" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:settings>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">1000</con:setting>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting>
      </con:settings>
      <con:testStep type="groovy" name="Update2Consumer" id="2f1ae0ff-0dc8-4e30-b6ad-a050113f8fa8">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.*;

def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def funcHandle = new ReadymadeFunctions();

def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser")
def provider = testRunner.testCase.testSuite.getPropertyValue("provider")

def projectName = testRunner.testCase.testSuite.project.name
def testSuiteName = testRunner.testCase.testSuite.name
def testCaseName = testRunner.testCase.name
def testStepName = context.getCurrentStep().getLabel()

log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName)
funcHandle.editDossierTypePermission(seleniumHandle, javaHandle, browser, guiUrl, "ADMIN", provider, "Consumer")</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="CheckSearchScreen" id="552d50e1-8ef2-411e-a0f5-cfc17c2d758a">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.*;

def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def funcHandle = new ReadymadeFunctions();

def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser")
def provider = testRunner.testCase.testSuite.getPropertyValue("provider")

def projectName = testRunner.testCase.testSuite.project.name
def testSuiteName = testRunner.testCase.testSuite.name
def testCaseName = testRunner.testCase.name
def testStepName = context.getCurrentStep().getLabel()

log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName)

Map&lt;String, Boolean> verificationMap = new HashMap&lt;String, Boolean>();
String verification = "Failed screens are:\n";
boolean temp, result;

def driver = seleniumHandle.openBrowser(browser);
// Login to application
seleniumHandle.browseURL(guiUrl);
funcHandle.login2App(provider, seleniumHandle);

//Dossiers --> search
seleniumHandle.clickObject("HomePage", "dossiers");
temp = seleniumHandle.verifySelectDropDownOptions("HomePage", "dossierDropDown1", 1, ["consumer"] as String[]);
verificationMap.put("Search screen", temp);

//Dossiers --> Dossier
seleniumHandle.clickObject("HomePage", "DossiersMenu");
temp = seleniumHandle.verifySelectDropDownOptions("HomePage", "dossierDropDown2", 1, ["consumer"] as String[]);
verificationMap.put("Dossiers screen", temp);

//Dossiers --> Send Request
seleniumHandle.clickObject("HomePage", "requests");
temp = seleniumHandle.verifySelectDropDownOptions("HomePage", "dossierDropDown2", 1, ["consumer"] as String[]);
verificationMap.put("SendRequest screen", temp);

//Dossiers --> View Request
seleniumHandle.clickObject("HomePage", "viewRequest");
temp = seleniumHandle.verifySelectDropDownOptions("HomePage", "dossierDropDown2", 1, ["consumer"] as String[]);
verificationMap.put("ViewRequest screen", temp);

//Dossiers --> Send Request Answer
seleniumHandle.clickObject("HomePage", "RequestAnswerMenu");
temp = seleniumHandle.verifySelectDropDownOptions("HomePage", "dossierDropDown2", 1, ["consumer"] as String[]);
verificationMap.put("SendRequestAnswer screen", temp);

//Dossiers --> Send Request Answer --> Dossier details
//Dossiers --> Send Request Answer --> Dossier details
try {
	log.info "inSide Try block"
	seleniumHandle.clickObjectWithoutQuit("HomePage", "firstViewDetails");
	temp = seleniumHandle.verifySelectDropDownOptions("HomePage", "businessType", 1, ["consumer"] as String[]);
	verificationMap.put("RequestAnswer-DossierDetails screen", temp);
} catch (Exception e) {
	temp = false;
}

//Dossiers --> View Request Answer
seleniumHandle.clickObject("HomePage", "RequestAnswerMenu");
seleniumHandle.clickObject("HomePage", "viewRequestAnswerSubMenu");
temp = seleniumHandle.verifySelectDropDownOptions("HomePage", "dossierDropDown2", 1, ["consumer"] as String[]);
verificationMap.put("ViewRequestAnswer screen", temp);

//Dossiers --> Send Performed
seleniumHandle.clickObject("HomePage", "PerformedMenu");
temp = seleniumHandle.verifySelectDropDownOptions("HomePage", "dossierDropDown2", 1, ["consumer"] as String[]);
verificationMap.put("SendPerformed screen", temp);

//Dossiers --> View Performed
seleniumHandle.clickObject("HomePage", "viewPerformedSubMenu");
temp = seleniumHandle.verifySelectDropDownOptions("HomePage", "dossierDropDown2", 1, ["consumer"] as String[]);
verificationMap.put("ViewPerformed screen", temp);

//Dossiers --> Send Change
seleniumHandle.clickObject("HomePage", "ChangeMenu");
temp = seleniumHandle.verifySelectDropDownOptions("HomePage", "dossierDropDown2", 1, ["consumer"] as String[]);
verificationMap.put("SendChange screen", temp);

//Dossiers --> View Change
seleniumHandle.clickObject("HomePage", "viewChangeSubMenu");
temp = seleniumHandle.verifySelectDropDownOptions("HomePage", "dossierDropDown2", 1, ["consumer"] as String[]);
verificationMap.put("ViewChange screen", temp);

//Dossiers --> Send Change Answer
seleniumHandle.clickObject("HomePage", "ChangeAnswerMenu");
temp = seleniumHandle.verifySelectDropDownOptions("HomePage", "dossierDropDown2", 1, ["consumer"] as String[]);
verificationMap.put("SendChangeAnswer screen", temp);

//Dossiers --> View Change Answer
seleniumHandle.clickObject("HomePage", "viewchangeanswerSubMenu");
temp = seleniumHandle.verifySelectDropDownOptions("HomePage", "dossierDropDown2", 1, ["consumer"] as String[]);
verificationMap.put("ViewChangeAnswer screen", temp);

//Dossiers --> Send Cancel
seleniumHandle.clickObject("HomePage", "CancelMenu");
temp = seleniumHandle.verifySelectDropDownOptions("HomePage", "dossierDropDown2", 1, ["consumer"] as String[]);
verificationMap.put("SendCancel screen", temp);

//Dossiers --> View Cancel
seleniumHandle.clickObject("HomePage", "viewCancelSubMenu");
temp = seleniumHandle.verifySelectDropDownOptions("HomePage", "dossierDropDown2", 1, ["consumer"] as String[]);
verificationMap.put("ViewCancel screen", temp);

//Reporting
seleniumHandle.clickObject("HomePage", "ReportingLeftMenu");
temp = seleniumHandle.verifySelectDropDownOptions("HomePage", "dossierDropDown2", 1, ["consumer"] as String[]);
verificationMap.put("Reporting screen", temp);

//Dossiers --> Users
try {
	seleniumHandle.clickObjectWithoutQuit("HomePage", "Users");
	temp = seleniumHandle.verifySelectDropDownOptions("HomePage", "dossierDropDown3", 1, ["consumer"] as String[]);
} catch (Exception e) {
	temp = false;
}
verificationMap.put("Users screen", temp);

driver.quit();

Set&lt;String> keySet = verificationMap.keySet();
for (String indKey : keySet) {
	Boolean boolean1 = verificationMap.get(indKey);
	if (boolean1 == false) {
		verification = verification + indKey + "\n";
		result = false;
	}
}
//assert result;
if (!result){
	throw new Exception (verification);
	//testRunner.fail(verification);
} else {
	log.info "Successfull"
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Update2ConsumerAndBusiness" id="472745d6-d8e5-4bac-acdf-32094a6fb36c">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.*;

def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def funcHandle = new ReadymadeFunctions();

def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser")
def provider = testRunner.testCase.testSuite.getPropertyValue("provider")

def projectName = testRunner.testCase.testSuite.project.name
def testSuiteName = testRunner.testCase.testSuite.name
def testCaseName = testRunner.testCase.name
def testStepName = context.getCurrentStep().getLabel()

log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName)
funcHandle.editDossierTypePermission(seleniumHandle, javaHandle, browser, guiUrl, "ADMIN",provider, "Consumer and Business")</script>
        </con:config>
      </con:testStep>
      <con:setupScript>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import groovy.time.TimeCategory
def today = new Date() 
def now = String.format('%tFT%&lt;tT', new Date() )
def wishdate = today 
use(TimeCategory) {
     wishdate = wishdate + 1.day
}
def wishdatestr = wishdate.format("yyyy-MM-dd'T'HH:mm:ss")
testRunner.testCase.setPropertyValue("Now",now)
testRunner.testCase.setPropertyValue("wishDate",wishdatestr)
String contractId = funcHandle.getRandomString()
testRunner.testCase.setPropertyValue("contractId",contractId)</con:setupScript>
      <con:tearDownScript/>
      <con:properties/>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>122d3297-f22d-449f-ac52-c46f1bfb714e</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="BusinessCheck" searchProperties="true" id="9c07a2ed-f356-4391-9258-e508d27c261e" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:settings>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">1000</con:setting>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting>
      </con:settings>
      <con:testStep type="groovy" name="Update2Business" id="fe3915f7-6c7d-4c5a-823f-ea8e7f6a8f6a">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.*;

def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def funcHandle = new ReadymadeFunctions();

def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser")
def provider = testRunner.testCase.testSuite.getPropertyValue("provider")

def projectName = testRunner.testCase.testSuite.project.name
def testSuiteName = testRunner.testCase.testSuite.name
def testCaseName = testRunner.testCase.name
def testStepName = context.getCurrentStep().getLabel()

log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName)
funcHandle.editDossierTypePermission(seleniumHandle, javaHandle, browser, guiUrl, "ADMIN", provider, "Business")</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="CheckSearchScreen" id="22b29c1d-0432-45e8-a014-435b3061c18b">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.*;

def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def funcHandle = new ReadymadeFunctions();

def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser")
def provider = testRunner.testCase.testSuite.getPropertyValue("provider")

def projectName = testRunner.testCase.testSuite.project.name
def testSuiteName = testRunner.testCase.testSuite.name
def testCaseName = testRunner.testCase.name
def testStepName = context.getCurrentStep().getLabel()

log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName)

Map&lt;String, Boolean> verificationMap = new HashMap&lt;String, Boolean>();
String verification = "Failed screens are:\n";
boolean temp, result;

def driver = seleniumHandle.openBrowser(browser);
// Login to application
seleniumHandle.browseURL(guiUrl);
funcHandle.login2App(provider, seleniumHandle);

//Dossiers --> search
seleniumHandle.clickObject("HomePage", "dossiers");
temp = seleniumHandle.verifySelectDropDownOptions("HomePage", "dossierDropDown1", 1, ["business"] as String[]);
verificationMap.put("Search screen", temp);

//Dossiers --> Dossier
seleniumHandle.clickObject("HomePage", "DossiersMenu");
temp = seleniumHandle.verifySelectDropDownOptions("HomePage", "dossierDropDown2", 1, ["business"] as String[]);
verificationMap.put("Dossiers screen", temp);

//Dossiers --> Send Request
seleniumHandle.clickObject("HomePage", "requests");
temp = seleniumHandle.verifySelectDropDownOptions("HomePage", "dossierDropDown2", 1, ["business"] as String[]);
verificationMap.put("SendRequest screen", temp);

//Dossiers --> View Request
seleniumHandle.clickObject("HomePage", "viewRequest");
temp = seleniumHandle.verifySelectDropDownOptions("HomePage", "dossierDropDown2", 1, ["business"] as String[]);
verificationMap.put("ViewRequest screen", temp);

//Dossiers --> Send Request Answer
seleniumHandle.clickObject("HomePage", "RequestAnswerMenu");
temp = seleniumHandle.verifySelectDropDownOptions("HomePage", "dossierDropDown2", 1, ["business"] as String[]);
verificationMap.put("SendRequestAnswer screen", temp);

//Dossiers --> Send Request Answer --> Dossier details
try {
	seleniumHandle.clickObjectWithoutQuit("HomePage", "firstViewDetails");
	temp = seleniumHandle.verifySelectDropDownOptions("HomePage", "businessType", 1, ["business"] as String[]);
} catch (Exception e) {
	temp = false;
}
verificationMap.put("RequestAnswer-DossierDetails screen", temp);

//Dossiers --> View Request Answer
seleniumHandle.clickObject("HomePage", "RequestAnswerMenu");
seleniumHandle.clickObject("HomePage", "viewRequestAnswerSubMenu");
temp = seleniumHandle.verifySelectDropDownOptions("HomePage", "dossierDropDown2", 1, ["business"] as String[]);
verificationMap.put("ViewRequestAnswer screen", temp);

//Dossiers --> Send Performed
seleniumHandle.clickObject("HomePage", "PerformedMenu");
temp = seleniumHandle.verifySelectDropDownOptions("HomePage", "dossierDropDown2", 1, ["business"] as String[]);
verificationMap.put("SendPerformed screen", temp);

//Dossiers --> View Performed
seleniumHandle.clickObject("HomePage", "viewPerformedSubMenu");
temp = seleniumHandle.verifySelectDropDownOptions("HomePage", "dossierDropDown2", 1, ["business"] as String[]);
verificationMap.put("ViewPerformed screen", temp);

//Dossiers --> Send Change
seleniumHandle.clickObject("HomePage", "ChangeMenu");
temp = seleniumHandle.verifySelectDropDownOptions("HomePage", "dossierDropDown2", 1, ["business"] as String[]);
verificationMap.put("SendChange screen", temp);

//Dossiers --> View Change
seleniumHandle.clickObject("HomePage", "viewChangeSubMenu");
temp = seleniumHandle.verifySelectDropDownOptions("HomePage", "dossierDropDown2", 1, ["business"] as String[]);
verificationMap.put("ViewChange screen", temp);

//Dossiers --> Send Change Answer
seleniumHandle.clickObject("HomePage", "ChangeAnswerMenu");
temp = seleniumHandle.verifySelectDropDownOptions("HomePage", "dossierDropDown2", 1, ["business"] as String[]);
verificationMap.put("SendChangeAnswer screen", temp);

//Dossiers --> View Change Answer
seleniumHandle.clickObject("HomePage", "viewchangeanswerSubMenu");
temp = seleniumHandle.verifySelectDropDownOptions("HomePage", "dossierDropDown2", 1, ["business"] as String[]);
verificationMap.put("ViewChangeAnswer screen", temp);

//Dossiers --> Send Cancel
seleniumHandle.clickObject("HomePage", "CancelMenu");
temp = seleniumHandle.verifySelectDropDownOptions("HomePage", "dossierDropDown2", 1, ["business"] as String[]);
verificationMap.put("SendCancel screen", temp);

//Dossiers --> View Cancel
seleniumHandle.clickObject("HomePage", "viewCancelSubMenu");
temp = seleniumHandle.verifySelectDropDownOptions("HomePage", "dossierDropDown2", 1, ["business"] as String[]);
verificationMap.put("ViewCancel screen", temp);

//Reporting
seleniumHandle.clickObject("HomePage", "ReportingLeftMenu");
temp = seleniumHandle.verifySelectDropDownOptions("HomePage", "dossierDropDown2", 1, ["business"] as String[]);
verificationMap.put("Reporting screen", temp);

//Dossiers --> Users
try {
	seleniumHandle.clickObjectWithoutQuit("HomePage", "Users");
	temp = seleniumHandle.verifySelectDropDownOptions("HomePage", "dossierDropDown3", 1, ["business"] as String[]);
} catch (Exception e) {
	temp = false;
}
verificationMap.put("Users screen", temp);

driver.quit();

Set&lt;String> keySet = verificationMap.keySet();
for (String indKey : keySet) {
	Boolean boolean1 = verificationMap.get(indKey);
	if (boolean1 == false) {
		verification = verification + indKey + "\n";
		result = false;
	}
}
//assert result;
if (!result){
	throw new Exception (verification);
	//testRunner.fail(verification);
} else {
	log.info "Successfull"
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Update2ConsumerAndBusiness" id="d2e8e029-2df7-442e-b961-89a636301d9e">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.*;

def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def funcHandle = new ReadymadeFunctions();

def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser")
def provider = testRunner.testCase.testSuite.getPropertyValue("provider")

def projectName = testRunner.testCase.testSuite.project.name
def testSuiteName = testRunner.testCase.testSuite.name
def testCaseName = testRunner.testCase.name
def testStepName = context.getCurrentStep().getLabel()

log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName)
funcHandle.editDossierTypePermission(seleniumHandle, javaHandle, browser, guiUrl, "ADMIN",provider, "Consumer and Business")</script>
        </con:config>
      </con:testStep>
      <con:setupScript>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import groovy.time.TimeCategory
def today = new Date() 
def now = String.format('%tFT%&lt;tT', new Date() )
def wishdate = today 
use(TimeCategory) {
     wishdate = wishdate + 1.day
}
def wishdatestr = wishdate.format("yyyy-MM-dd'T'HH:mm:ss")
testRunner.testCase.setPropertyValue("Now",now)
testRunner.testCase.setPropertyValue("wishDate",wishdatestr)
String contractId = funcHandle.getRandomString()
testRunner.testCase.setPropertyValue("contractId",contractId)</con:setupScript>
      <con:tearDownScript/>
      <con:properties/>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>122d3297-f22d-449f-ac52-c46f1bfb714e</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:properties>
      <con:property>
        <con:name>TimestampNOW</con:name>
        <con:value>${=String.format('%tFT%&lt;tT', new Date())}</con:value>
      </con:property>
      <con:property>
        <con:name>PollTime</con:name>
        <con:value>10000</con:value>
      </con:property>
      <con:property>
        <con:name>lineNumber</con:name>
        <con:value>0</con:value>
      </con:property>
      <con:property>
        <con:name>testdatafile</con:name>
        <con:value>Providers.csv</con:value>
      </con:property>
      <con:property>
        <con:name>browser</con:name>
        <con:value>firefox</con:value>
      </con:property>
    </con:properties>
    <con:setupScript>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
import org.apache.commons.lang.RandomStringUtils
import groovy.time.TimeCategory
import nl.coin.Selenium.*;
SeleniumActions seleniumHandle = new SeleniumActions();
def funcHandle = new ReadymadeFunctions();
def directory = groovyUtils.projectPath + "/"
System.setProperty("projectfiledir", directory)
def Line = funcHandle.getTestDataAndIncreaseLinenumber(testSuite, directory);
String[] propData = Line.split(";")
testSuite.setPropertyValue("provider",propData[0])
testSuite.setPropertyValue("providerEmail",propData[1])</con:setupScript>
    <con:tearDownScript/>
    <con:reportParameters/>
  </con:testSuite>
  <con:testSuite name="CDV859" id="455ee108-0ce5-47d8-ad04-3efcf196a02e">
    <con:description>Sequential</con:description>
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SingleDomain-User" searchProperties="true" id="36a6ee90-c1fc-4575-b4f0-e72dea653e91" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:settings>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">1000</con:setting>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting>
      </con:settings>
      <con:testStep type="groovy" name="Sel_UpdateDomain" id="22899f99-2ab4-4484-9e18-3c998a511bfd">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.*;

def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def funcHandle = new ReadymadeFunctions();

def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser")
def provider = testRunner.testCase.testSuite.getPropertyValue("provider")
def domain = testRunner.testCase.testSuite.getPropertyValue("singleDomain")

def projectName = testRunner.testCase.testSuite.project.name
def testSuiteName = testRunner.testCase.testSuite.name
def testCaseName = testRunner.testCase.name
def testStepName = context.getCurrentStep().getLabel()

log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName)
try {
	funcHandle.updateDomain(seleniumHandle, javaHandle, browser, guiUrl, "ADMIN", provider, domain);
} catch (Exception e) {
	testRunner.fail(e.getClass().getSimpleName());
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Sel_AddUser" id="a6553f25-0293-479f-a825-8b8ba2094fb2">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.*;

def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def funcHandle = new ReadymadeFunctions();

def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser")
def provider = testRunner.testCase.testSuite.getPropertyValue("provider")
def email = testRunner.testCase.testSuite.getPropertyValue("correctEmail")

def projectName = testRunner.testCase.testSuite.project.name
def testSuiteName = testRunner.testCase.testSuite.name
def testCaseName = testRunner.testCase.name
def testStepName = context.getCurrentStep().getLabel()

log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName)
boolean verification = funcHandle.addUser(seleniumHandle, javaHandle, browser, guiUrl, provider, email, "User", true, "User Added Successfully.");
assert verification == true;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Sel_AddUser_RainyDay" id="fa0614e6-bff4-4e93-b5d3-42121653db21">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.*;

def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def funcHandle = new ReadymadeFunctions();

def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser")
def provider = testRunner.testCase.testSuite.getPropertyValue("provider")
def email = testRunner.testCase.testSuite.getPropertyValue("wrongEmail")

def projectName = testRunner.testCase.testSuite.project.name
def testSuiteName = testRunner.testCase.testSuite.name
def testCaseName = testRunner.testCase.name
def testStepName = context.getCurrentStep().getLabel()

log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName)
boolean verification = funcHandle.addUser(seleniumHandle, javaHandle, browser, guiUrl, provider, email, "User", false, "Users email domain is not listed under valid email domain for provider "+provider+". Contact Admin");
assert verification == true;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Sel_RevertDomain" id="fedbf4ca-de51-4a7b-bb15-49c7a68e221b">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.*;

def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def funcHandle = new ReadymadeFunctions();

def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser")
def provider = testRunner.testCase.testSuite.getPropertyValue("provider")
def domain = testRunner.testCase.testSuite.getPropertyValue("currentDomain")

def projectName = testRunner.testCase.testSuite.project.name
def testSuiteName = testRunner.testCase.testSuite.name
def testCaseName = testRunner.testCase.name
def testStepName = context.getCurrentStep().getLabel()

log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName)
try {
	funcHandle.updateDomain(seleniumHandle, javaHandle, browser, guiUrl, "ADMIN", provider, domain);
} catch (Exception e) {
	testRunner.fail(e.getClass().getSimpleName());
}</script>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.time.TimeCategory
def now = String.format('%tFT%&lt;tT', new Date() )
testRunner.testCase.setPropertyValue("Now",now)</con:setupScript>
      <con:tearDownScript>import nl.coin.Selenium.*;
import groovy.sql.Sql;
def funcHandle = new ReadymadeFunctions();
def  con = funcHandle.createDBConObject(testSuite);
def correctEmail = testRunner.testCase.testSuite.getPropertyValue("correctEmail");
def query1 = con.execute("delete from overstappen.spr_usr where su_usr_id = (select id from overstappen.user where usr_username = '"+correctEmail+"')");
log.info ("Query result: "+ query1);
def query2 = con.execute("delete from overstappen.user where usr_username = '"+correctEmail+"'");
log.info ("Query result: "+ query2);
con.close();</con:tearDownScript>
      <con:properties/>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>122d3297-f22d-449f-ac52-c46f1bfb714e</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SingleDomain-ReadOnlyUser" searchProperties="true" id="adc64205-4bbb-4528-a25a-e7c4e3a1c7b0" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:settings>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">1000</con:setting>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting>
      </con:settings>
      <con:testStep type="groovy" name="Sel_UpdateDomain" id="dd92ab56-1ec3-4139-992b-a29b1cc4aa6a">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.*;

def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def funcHandle = new ReadymadeFunctions();

def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser")
def provider = testRunner.testCase.testSuite.getPropertyValue("provider")
def domain = testRunner.testCase.testSuite.getPropertyValue("singleDomain")

def projectName = testRunner.testCase.testSuite.project.name
def testSuiteName = testRunner.testCase.testSuite.name
def testCaseName = testRunner.testCase.name
def testStepName = context.getCurrentStep().getLabel()

log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName)
try {
	funcHandle.updateDomain(seleniumHandle, javaHandle, browser, guiUrl, "ADMIN", provider, domain);
} catch (Exception e) {
	testRunner.fail(e.getClass().getSimpleName());
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Sel_AddUser" id="4281bf99-3be2-4d53-921a-944da7e42093">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.*;

def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def funcHandle = new ReadymadeFunctions();

def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser")
def provider = testRunner.testCase.testSuite.getPropertyValue("provider")
def email = testRunner.testCase.testSuite.getPropertyValue("correctEmail")

def projectName = testRunner.testCase.testSuite.project.name
def testSuiteName = testRunner.testCase.testSuite.name
def testCaseName = testRunner.testCase.name
def testStepName = context.getCurrentStep().getLabel()

log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName)
boolean verification = funcHandle.addUser(seleniumHandle, javaHandle, browser, guiUrl, provider, email, "ReadOnlyUser", true, "User Added Successfully.");
assert verification == true;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Sel_AddUser_ReadOnly_RainyDay" id="3d3a12c0-5d99-42fe-853c-cf37470f8901">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.*;

def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def funcHandle = new ReadymadeFunctions();

def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser")
def provider = testRunner.testCase.testSuite.getPropertyValue("provider")
def email = testRunner.testCase.testSuite.getPropertyValue("wrongEmail")

def projectName = testRunner.testCase.testSuite.project.name
def testSuiteName = testRunner.testCase.testSuite.name
def testCaseName = testRunner.testCase.name
def testStepName = context.getCurrentStep().getLabel()

log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName)
boolean verification = funcHandle.addUser(seleniumHandle, javaHandle, browser, guiUrl, provider, email, "ReadOnlyUser", false, "Users email domain is not listed under valid email domain for provider "+provider+". Contact Admin");
assert verification == true;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Sel_RevertDomain" id="7d0eea82-515f-4c76-8e11-20a30de5ed90">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.*;

def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def funcHandle = new ReadymadeFunctions();

def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser")
def provider = testRunner.testCase.testSuite.getPropertyValue("provider")
def domain = testRunner.testCase.testSuite.getPropertyValue("currentDomain")

def projectName = testRunner.testCase.testSuite.project.name
def testSuiteName = testRunner.testCase.testSuite.name
def testCaseName = testRunner.testCase.name
def testStepName = context.getCurrentStep().getLabel()

log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName)
try {
	funcHandle.updateDomain(seleniumHandle, javaHandle, browser, guiUrl, "ADMIN", provider, domain);
} catch (Exception e) {
	testRunner.fail(e.getClass().getSimpleName());
}</script>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.time.TimeCategory
def now = String.format('%tFT%&lt;tT', new Date() )
testRunner.testCase.setPropertyValue("Now",now)</con:setupScript>
      <con:tearDownScript>import nl.coin.Selenium.*;
import groovy.sql.Sql;
def funcHandle = new ReadymadeFunctions();
def  con = funcHandle.createDBConObject(testSuite);
def correctEmail = testRunner.testCase.testSuite.getPropertyValue("correctEmail");
def query1 = con.execute("delete from overstappen.spr_usr where su_usr_id = (select id from overstappen.user where usr_username = '"+correctEmail+"')");
log.info ("Query result: "+ query1);
def query2 = con.execute("delete from overstappen.user where usr_username = '"+correctEmail+"'");
log.info ("Query result: "+ query2);
con.close();</con:tearDownScript>
      <con:properties/>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>122d3297-f22d-449f-ac52-c46f1bfb714e</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="MultiDomain-User" searchProperties="true" id="4b0a1bae-baab-4b41-aba2-17dd6339da75" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:settings>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">1000</con:setting>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting>
      </con:settings>
      <con:testStep type="groovy" name="Sel_UpdateDomain" id="6c1bc96d-5d44-4167-9880-e0daf7fe9c19">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.*;

def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def funcHandle = new ReadymadeFunctions();

def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser")
def provider = testRunner.testCase.testSuite.getPropertyValue("provider")
def domain = testRunner.testCase.testSuite.getPropertyValue("multiDomain")

def projectName = testRunner.testCase.testSuite.project.name
def testSuiteName = testRunner.testCase.testSuite.name
def testCaseName = testRunner.testCase.name
def testStepName = context.getCurrentStep().getLabel()

log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName)
try {
	funcHandle.updateDomain(seleniumHandle, javaHandle, browser, guiUrl, "ADMIN", provider, domain);
} catch (Exception e) {
	testRunner.fail(e.getClass().getSimpleName());
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Sel_AddUser" id="a904c945-5a6a-4393-8fa0-b6d5b69aed6c">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.*;

def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def funcHandle = new ReadymadeFunctions();

def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser")
def provider = testRunner.testCase.testSuite.getPropertyValue("provider")
def email = testRunner.testCase.testSuite.getPropertyValue("correctEmail")

def projectName = testRunner.testCase.testSuite.project.name
def testSuiteName = testRunner.testCase.testSuite.name
def testCaseName = testRunner.testCase.name
def testStepName = context.getCurrentStep().getLabel()

log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName)
boolean verification = funcHandle.addUser(seleniumHandle, javaHandle, browser, guiUrl, provider, email, "User", true, "User Added Successfully.");
assert verification == true;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Sel_AddUser_RainyDay" id="794492e1-5094-4725-889a-6769a780df0e">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.*;

def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def funcHandle = new ReadymadeFunctions();

def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser")
def provider = testRunner.testCase.testSuite.getPropertyValue("provider")
def email = testRunner.testCase.testSuite.getPropertyValue("wrongEmail")

def projectName = testRunner.testCase.testSuite.project.name
def testSuiteName = testRunner.testCase.testSuite.name
def testCaseName = testRunner.testCase.name
def testStepName = context.getCurrentStep().getLabel()

log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName)
boolean verification = funcHandle.addUser(seleniumHandle, javaHandle, browser, guiUrl, provider, email, "User", false, "Users email domain is not listed under valid email domain for provider "+provider+". Contact Admin");
assert verification == true;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Sel_RevertDomain" id="114926ae-0e81-434e-89c9-b5bcf7d910c5">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.*;

def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def funcHandle = new ReadymadeFunctions();

def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser")
def provider = testRunner.testCase.testSuite.getPropertyValue("provider")
def domain = testRunner.testCase.testSuite.getPropertyValue("currentDomain")

def projectName = testRunner.testCase.testSuite.project.name
def testSuiteName = testRunner.testCase.testSuite.name
def testCaseName = testRunner.testCase.name
def testStepName = context.getCurrentStep().getLabel()

log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName)
try {
	funcHandle.updateDomain(seleniumHandle, javaHandle, browser, guiUrl, "ADMIN", provider, domain);
} catch (Exception e) {
	testRunner.fail(e.getClass().getSimpleName());
}</script>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.time.TimeCategory
def now = String.format('%tFT%&lt;tT', new Date() )
testRunner.testCase.setPropertyValue("Now",now)</con:setupScript>
      <con:tearDownScript>import nl.coin.Selenium.*;
import groovy.sql.Sql;
def funcHandle = new ReadymadeFunctions();
def  con = funcHandle.createDBConObject(testSuite);
def correctEmail = testRunner.testCase.testSuite.getPropertyValue("correctEmail");
def query1 = con.execute("delete from overstappen.spr_usr where su_usr_id = (select id from overstappen.user where usr_username = '"+correctEmail+"')");
log.info ("Query result: "+ query1);
def query2 = con.execute("delete from overstappen.user where usr_username = '"+correctEmail+"'");
log.info ("Query result: "+ query2);
con.close();</con:tearDownScript>
      <con:properties/>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>122d3297-f22d-449f-ac52-c46f1bfb714e</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="MultiDomain-ReadOnlyUser" searchProperties="true" id="387ece2f-af58-41a9-b416-48e770bc5c86" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:settings>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">1000</con:setting>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting>
      </con:settings>
      <con:testStep type="groovy" name="Sel_UpdateDomain" id="e367630f-f60d-4c1e-b83d-610aa6b7fd09">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.*;

def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def funcHandle = new ReadymadeFunctions();

def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser")
def provider = testRunner.testCase.testSuite.getPropertyValue("provider")
def domain = testRunner.testCase.testSuite.getPropertyValue("multiDomain")

def projectName = testRunner.testCase.testSuite.project.name
def testSuiteName = testRunner.testCase.testSuite.name
def testCaseName = testRunner.testCase.name
def testStepName = context.getCurrentStep().getLabel()

log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName)
try {
	funcHandle.updateDomain(seleniumHandle, javaHandle, browser, guiUrl, "ADMIN", provider, domain);
} catch (Exception e) {
	testRunner.fail(e.getClass().getSimpleName());
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Sel_AddUser" id="c92ff944-8419-4e1a-a3fa-e654afa76fee">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.*;

def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def funcHandle = new ReadymadeFunctions();

def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser")
def provider = testRunner.testCase.testSuite.getPropertyValue("provider")
def email = testRunner.testCase.testSuite.getPropertyValue("correctEmail")

def projectName = testRunner.testCase.testSuite.project.name
def testSuiteName = testRunner.testCase.testSuite.name
def testCaseName = testRunner.testCase.name
def testStepName = context.getCurrentStep().getLabel()

log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName)
boolean verification = funcHandle.addUser(seleniumHandle, javaHandle, browser, guiUrl, provider, email, "ReadOnlyUser", true, "User Added Successfully.");
assert verification == true;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Sel_AddUser_ReadOnly_RainyDay" id="2f36a4b4-13ac-4efe-8517-629cd36d37bb">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.*;

def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def funcHandle = new ReadymadeFunctions();

def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser")
def provider = testRunner.testCase.testSuite.getPropertyValue("provider")
def email = testRunner.testCase.testSuite.getPropertyValue("wrongEmail")

def projectName = testRunner.testCase.testSuite.project.name
def testSuiteName = testRunner.testCase.testSuite.name
def testCaseName = testRunner.testCase.name
def testStepName = context.getCurrentStep().getLabel()

log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName)
boolean verification = funcHandle.addUser(seleniumHandle, javaHandle, browser, guiUrl, provider, email, "ReadOnlyUser", false, "Users email domain is not listed under valid email domain for provider "+provider+". Contact Admin");
assert verification == true;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Sel_RevertDomain" id="aec085ff-85fd-4877-9928-48ea05b3fbab">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.*;

def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def funcHandle = new ReadymadeFunctions();

def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser")
def provider = testRunner.testCase.testSuite.getPropertyValue("provider")
def domain = testRunner.testCase.testSuite.getPropertyValue("currentDomain")

def projectName = testRunner.testCase.testSuite.project.name
def testSuiteName = testRunner.testCase.testSuite.name
def testCaseName = testRunner.testCase.name
def testStepName = context.getCurrentStep().getLabel()

log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName)
try {
	funcHandle.updateDomain(seleniumHandle, javaHandle, browser, guiUrl, "ADMIN", provider, domain);
} catch (Exception e) {
	testRunner.fail(e.getClass().getSimpleName());
}</script>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.time.TimeCategory
def now = String.format('%tFT%&lt;tT', new Date() )
testRunner.testCase.setPropertyValue("Now",now)</con:setupScript>
      <con:tearDownScript>import nl.coin.Selenium.*;
import groovy.sql.Sql;
def funcHandle = new ReadymadeFunctions();
def  con = funcHandle.createDBConObject(testSuite);
def correctEmail = testRunner.testCase.testSuite.getPropertyValue("correctEmail");
def query1 = con.execute("delete from overstappen.spr_usr where su_usr_id = (select id from overstappen.user where usr_username = '"+correctEmail+"')");
log.info ("Query result: "+ query1);
def query2 = con.execute("delete from overstappen.user where usr_username = '"+correctEmail+"'");
log.info ("Query result: "+ query2);
con.close();</con:tearDownScript>
      <con:properties/>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>122d3297-f22d-449f-ac52-c46f1bfb714e</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="EmptyDomain-User" searchProperties="true" id="d415240d-fc98-4f07-a7e7-84d184d2b120" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" disabled="true">
      <con:settings>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">1000</con:setting>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting>
      </con:settings>
      <con:testStep type="groovy" name="Sel_UpdateDomain" id="f9d6120e-fa00-4580-9311-f3d4211ab01a">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.*;

def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def funcHandle = new ReadymadeFunctions();

def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser")
def provider = testRunner.testCase.testSuite.getPropertyValue("provider")
def domain = testRunner.testCase.testSuite.getPropertyValue("singleDomain")

def projectName = testRunner.testCase.testSuite.project.name
def testSuiteName = testRunner.testCase.testSuite.name
def testCaseName = testRunner.testCase.name
def testStepName = context.getCurrentStep().getLabel()

log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName)
try {
	funcHandle.updateDomain(seleniumHandle, javaHandle, browser, guiUrl, "ADMIN", provider, "");
} catch (Exception e) {
	testRunner.fail(e.getClass().getSimpleName());
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Sel_AddUser_RainyDay" id="739fe5fb-0294-47b3-a74a-f26bade63332">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.*;

def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def funcHandle = new ReadymadeFunctions();

def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser")
def provider = testRunner.testCase.testSuite.getPropertyValue("provider")
def email = testRunner.testCase.testSuite.getPropertyValue("wrongEmail")

def projectName = testRunner.testCase.testSuite.project.name
def testSuiteName = testRunner.testCase.testSuite.name
def testCaseName = testRunner.testCase.name
def testStepName = context.getCurrentStep().getLabel()

log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName)
boolean verification = funcHandle.addUser(seleniumHandle, javaHandle, browser, guiUrl, provider, email, "User", false, "Users email domain is not listed under valid email domain for provider "+provider+". Contact Admin");
assert verification == true;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Sel_RevertDomain" id="ae3ef516-b690-4e23-a038-241a24976442">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.*;

def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def funcHandle = new ReadymadeFunctions();

def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser")
def provider = testRunner.testCase.testSuite.getPropertyValue("provider")
def domain = testRunner.testCase.testSuite.getPropertyValue("currentDomain")

def projectName = testRunner.testCase.testSuite.project.name
def testSuiteName = testRunner.testCase.testSuite.name
def testCaseName = testRunner.testCase.name
def testStepName = context.getCurrentStep().getLabel()

log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName)
try {
	funcHandle.updateDomain(seleniumHandle, javaHandle, browser, guiUrl, "ADMIN", provider, domain);
} catch (Exception e) {
	testRunner.fail(e.getClass().getSimpleName());
}</script>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.time.TimeCategory
def now = String.format('%tFT%&lt;tT', new Date() )
testRunner.testCase.setPropertyValue("Now",now)</con:setupScript>
      <con:tearDownScript>import nl.coin.Selenium.*;
import groovy.sql.Sql;
def funcHandle = new ReadymadeFunctions();
def  con = funcHandle.createDBConObject(testSuite);
def correctEmail = testRunner.testCase.testSuite.getPropertyValue("correctEmail");
def query1 = con.execute("delete from overstappen.spr_usr where su_usr_id = (select id from overstappen.user where usr_username = '"+correctEmail+"')");
log.info ("Query result: "+ query1);
def query2 = con.execute("delete from overstappen.user where usr_username = '"+correctEmail+"'");
log.info ("Query result: "+ query2);
con.close();</con:tearDownScript>
      <con:properties/>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>122d3297-f22d-449f-ac52-c46f1bfb714e</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="EmptyDomain-ReadOnlyUser" searchProperties="true" id="6b6ae779-b04a-4cfa-b8fd-2ec3e443f59f" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" disabled="true">
      <con:settings>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">1000</con:setting>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting>
      </con:settings>
      <con:testStep type="groovy" name="Sel_UpdateDomain" id="36774d82-b8ea-4903-a827-a6000908e859">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.*;

def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def funcHandle = new ReadymadeFunctions();

def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser")
def provider = testRunner.testCase.testSuite.getPropertyValue("provider")
def domain = testRunner.testCase.testSuite.getPropertyValue("singleDomain")

def projectName = testRunner.testCase.testSuite.project.name
def testSuiteName = testRunner.testCase.testSuite.name
def testCaseName = testRunner.testCase.name
def testStepName = context.getCurrentStep().getLabel()

log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName)
try {
	funcHandle.updateDomain(seleniumHandle, javaHandle, browser, guiUrl, "ADMIN", provider, "");
} catch (Exception e) {
	testRunner.fail(e.getClass().getSimpleName());
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Sel_AddUser_ReadOnly_RainyDay" id="bdb3dadd-effd-4c1c-af8c-05b5dae70739">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.*;

def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def funcHandle = new ReadymadeFunctions();

def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser")
def provider = testRunner.testCase.testSuite.getPropertyValue("provider")
def email = testRunner.testCase.testSuite.getPropertyValue("wrongEmail")

def projectName = testRunner.testCase.testSuite.project.name
def testSuiteName = testRunner.testCase.testSuite.name
def testCaseName = testRunner.testCase.name
def testStepName = context.getCurrentStep().getLabel()

log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName)
boolean verification = funcHandle.addUser(seleniumHandle, javaHandle, browser, guiUrl, provider, email, "ReadOnlyUser", false, "Users email domain is not listed under valid email domain for provider "+provider+". Contact Admin");
assert verification == true;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Sel_RevertDomain" id="cdb4f70c-508a-4415-80f5-9ebc303265b8">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.*;

def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def funcHandle = new ReadymadeFunctions();

def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser")
def provider = testRunner.testCase.testSuite.getPropertyValue("provider")
def domain = testRunner.testCase.testSuite.getPropertyValue("currentDomain")

def projectName = testRunner.testCase.testSuite.project.name
def testSuiteName = testRunner.testCase.testSuite.name
def testCaseName = testRunner.testCase.name
def testStepName = context.getCurrentStep().getLabel()

log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName)
try {
	funcHandle.updateDomain(seleniumHandle, javaHandle, browser, guiUrl, "ADMIN", provider, domain);
} catch (Exception e) {
	testRunner.fail(e.getClass().getSimpleName());
}</script>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.time.TimeCategory
def now = String.format('%tFT%&lt;tT', new Date() )
testRunner.testCase.setPropertyValue("Now",now)</con:setupScript>
      <con:tearDownScript>import nl.coin.Selenium.*;
import groovy.sql.Sql;
def funcHandle = new ReadymadeFunctions();
def  con = funcHandle.createDBConObject(testSuite);
def correctEmail = testRunner.testCase.testSuite.getPropertyValue("correctEmail");
def query1 = con.execute("delete from overstappen.spr_usr where su_usr_id = (select id from overstappen.user where usr_username = '"+correctEmail+"')");
log.info ("Query result: "+ query1);
def query2 = con.execute("delete from overstappen.user where usr_username = '"+correctEmail+"'");
log.info ("Query result: "+ query2);
con.close();</con:tearDownScript>
      <con:properties/>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>122d3297-f22d-449f-ac52-c46f1bfb714e</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:properties>
      <con:property>
        <con:name>TimestampNOW</con:name>
        <con:value>${=String.format('%tFT%&lt;tT', new Date())}</con:value>
      </con:property>
      <con:property>
        <con:name>PollTime</con:name>
        <con:value>10000</con:value>
      </con:property>
      <con:property>
        <con:name>lineNumber</con:name>
        <con:value>0</con:value>
      </con:property>
      <con:property>
        <con:name>testdatafile</con:name>
        <con:value>Providers.csv</con:value>
      </con:property>
      <con:property>
        <con:name>browser</con:name>
        <con:value>firefox</con:value>
      </con:property>
      <con:property>
        <con:name>singleDomain</con:name>
        <con:value>test1.com</con:value>
      </con:property>
      <con:property>
        <con:name>multiDomain</con:name>
        <con:value>test1.com,test2.com</con:value>
      </con:property>
      <con:property>
        <con:name>correctEmail</con:name>
        <con:value>test1212@test1.com</con:value>
      </con:property>
      <con:property>
        <con:name>wrongEmail</con:name>
        <con:value>test1212@wrongtest.com</con:value>
      </con:property>
    </con:properties>
    <con:setupScript>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
import org.apache.commons.lang.RandomStringUtils
import groovy.time.TimeCategory
import nl.coin.Selenium.*;
SeleniumActions seleniumHandle = new SeleniumActions();
def funcHandle = new ReadymadeFunctions();
def directory = groovyUtils.projectPath + "/"
System.setProperty("projectfiledir", directory)
def Line = funcHandle.getTestDataAndIncreaseLinenumber(testSuite, directory);
String[] propData = Line.split(";")
testSuite.setPropertyValue("provider",propData[0])
testSuite.setPropertyValue("providerEmail",propData[1])
import groovy.sql.Sql;
def  con = funcHandle.createDBConObject(testSuite);
funcHandle.setProperty4mDB(testSuite, con, "select sd_domain from overstappen.spr_domain where sd_spr_id = (select id from overstappen.service_provider where spr_code='"+propData[0]+"')", "sd_domain", "currentDomain")</con:setupScript>
    <con:tearDownScript/>
    <con:reportParameters/>
  </con:testSuite>
  <con:testSuite name="OV-21" id="d7a875d9-9697-40d3-97ea-14de571dda09">
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="B2.1. CTR-CTRA blocking 11_NoProposeDate" searchProperties="true" id="6e33908a-0900-445d-bd21-e4fb20ec6851" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:settings>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">1000</con:setting>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting>
      </con:settings>
      <con:testStep type="request" name="CTR-Sunny Day" id="78b778f5-a97d-4766-bf7b-be1c18bc5dab">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>CompWebserviceSoap11</con:interface>
          <con:operation>SendMessages</con:operation>
          <con:request name="CTR-Sunny Day" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordText" id="3aa22f8f-37c1-4ea2-ba88-b80068a3761f">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#SoapUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="http://coin.nl/ws/schema">\r
   <soapenv:Header/>
   <soapenv:Body>
      <sch:SendMessagesRequest>
         <sch:Sender>${#TestSuite#recipient}</sch:Sender>
         <sch:Messages>
            <sch:Message>
               <sch:Text><![CDATA[<?xml version="1.0"?>
<message xmlns="http://www.coin.nl/Overstappen_MESSAGES">
<header>
<receiver>
<!--Optional:-->
<networkoperator>${#TestSuite#donor}</networkoperator>
<!--Optional:-->
<serviceprovider>${#TestSuite#donor}</serviceprovider>
</receiver>
<sender>
<!--Optional:-->
<networkoperator>${#TestSuite#recipient}</networkoperator>
<!--Optional:-->
<serviceprovider>${#TestSuite#recipient}</serviceprovider>
</sender>
<!--Optional:-->
<messageid>${#TestSuite#recipient}-${#TestCase#contractId}-01</messageid>
<timestamp>${#TestSuite#TimestampNOW}</timestamp>
</header>
<body>
<contractterminationrequest>
<${#TestSuite#soapVersion}>
<dossierid>${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01</dossierid>
<!--Optional:-->
<recipientserviceprovider>${#TestSuite#recipient}</recipientserviceprovider>
<!--Optional:-->
<recipientnetworkoperator>${#TestSuite#recipient}</recipientnetworkoperator>
<!--Optional:-->
<donornetworkoperator>${#TestSuite#donor}</donornetworkoperator>
<!--Optional:-->
<donorserviceprovider>${#TestSuite#donor}</donorserviceprovider>
<wishdatetime>${#TestCase#wishdate}</wishdatetime>
${#TestSuite#dossierType}
${#TestSuite#compensationOK}
<name>COIN</name>
<addressblock>
 	<postcode>1389SS</postcode>
	<housenr>99999</housenr>
</addressblock>
<numberseries>
     <start>0173112233</start>
     <end>0173112233</end>
</numberseries>
<validationblock>
    <name>contractid</name>
    <value>1-${#TestCase#contractID}</value>
 </validationblock>
<note>${#TestSuite#soapVersion} expect ${#TestSuite#donorSoapVersion}-linenumber ${#TestSuite#lineNumber}</note>
</${#TestSuite#soapVersion}>
</contractterminationrequest>
</body>
</message>]]]]>><![CDATA[</sch:Text>
            </sch:Message>
         </sch:Messages>
      </sch:SendMessagesRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="XPath Match" name="Match content of [ns2:TransactionId] using RegEx" id="1c471417-807a-4012-a734-b2dd5be94c8f">
              <con:configuration>
                <path>declare namespace ns2='http://coin.nl/ws/schema';
//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]/text()</path>
                <content>*</content>
                <allowWildcards>true</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" name="Check count of [ns2:TransactionId]" id="345c96a3-89a0-476e-9875-b0c18e04ef5b">
              <con:configuration>
                <path>declare namespace ns2='http://coin.nl/ws/schema';
count( //ns2:SendMessagesResponse/ns2:TransactionId)</path>
                <content>1</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert node [ns2:TransactionId]" id="63f77b9d-d209-4d74-ad56-a26982ab75c5">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
//def groovyUtilsPro = new com.eviware.soapui.support.GroovyUtilsPro( context )

def holder = new XmlHolder( messageExchange.responseContentAsXml )
holder.namespaces["ns2"] = "http://coin.nl/ws/schema"
def transactionId = holder.getNodeValue( "//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]" )
messageExchange.modelItem.testStep.testCase.setPropertyValue("transactionId",transactionId)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#TestSuite#recipientUserName}</con:username>
              <con:password>${#TestSuite#recipientPassWord}</con:password>
              <con:domain xsi:nil="true"/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://coin.nl/SendMessages"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_ST Table" id="0d13da80-de29-48ba-b7fc-b8585f38ed14">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_transactions 
where st_transaction_id = '${#TestCase#transactionId}'</con:query>
          <con:assertion type="Simple Contains" name="Contains: assert Results" id="cce0fb3e-4b85-4ba4-a7be-1dfa2e40d69e">
            <con:configuration>
              <token>Results</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify TransactionId" id="0314e1fa-b1cb-4932-bba8-55dd87029a85">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_TRANSACTION_ID[1]</path>
              <content>${#TestCase#transactionId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify ST_SEND_RECEIVED" id="9db0e630-c611-4fc1-b0bc-fb6028a6a7c3">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_SEND_RECEIVED[1]</path>
              <content>received</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" name="Contains: Contain message Type" id="85caea84-7bde-4674-9d00-009229cb7411">
            <con:configuration>
              <token>&amp;lt;contractterminationrequest&amp;gt;</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple NotContains" name="NotContains: Exception" id="aa4bbca5-9624-413e-9efd-d79347941338">
            <con:configuration>
              <token>Exception</token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>true</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="77af631e-a991-48c5-b7c6-43b4c54de0ad" name="Script: store SoapTransaction.id">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "Id");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="f0162b88-ccba-466c-a739-a3c4752862ff" name="Xpath: assert UserIP" disabled="true">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_IP/text()</path>
              <content>${#Project#UserIP}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="81071277-b8cc-4fa5-905c-667ed0fd1683" name="Xpath: assert UserName">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_NAME/text()</path>
              <content>${#TestSuite#recipientUserName}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b062752b-5fb1-46d8-aaee-d3de67a80768" name="Xpath: assert TechSender">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_TECHNICAL_SENDER/text()</path>
              <content>${#TestSuite#recipient}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Wait For Poller" id="e8e120c3-d162-4e75-b9ce-3d4a6193fada">
        <con:settings/>
        <con:config>
          <delay>${#TestSuite#PollTime}</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_RSXM Table_CTR" id="854d5c1b-4cf4-4770-8b30-89c4ebd29b85">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.raw_soap_xml_messages where rsxm_st_id = '${#TestCase#Id}'</con:query>
          <con:assertion type="Simple Contains" name="Contains: Contains" id="6f5c48fb-8cde-4644-a4bb-7eb10db16d15">
            <con:configuration>
              <token>Results</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple NotContains" name="NotContains: Exception" id="f38c5ce3-b090-4b36-863b-3601744c94ab">
            <con:configuration>
              <token>Exception</token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>true</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: XPath Match" id="14d90270-6f91-4150-993a-d24f2adbd507">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/RSXM_STATUS[1]</path>
              <content>Done</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="3afad4ec-156e-4704-9701-078bc20e849f" name="Script: SaveRSXM_DM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/RSXM_DM_ID[1]", "ctrDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="fabf14a8-9368-4409-ba75-826088e088ff" name="Script: SaveRSXM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctrRSXMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table_CTR" id="822f3f19-8c30-4d86-804d-a78908c829e3">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier where 
ctd_switchid = '${#TestSuite#Recipient}-${#TestSuite#Donor}-${#TestCase#ContractId}-01'</con:query>
          <con:assertion type="XPath Match" name="Xpath: assert CTD_DOSSIER_STATUS]" id="ac17d9f6-9653-435c-bd0c-9af6917f2aa6">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_DOSSIER_STATUS[1]/text()</path>
              <content>Pending</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert CTD_PROCESS_STATUS]" id="ede8cc08-99ab-46ca-baf4-97e9f0895428">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_PROCESS_STATUS[1]/text()</path>
              <content>Request</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: assert ion ctd_id">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def ctdid = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctdId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTR" id="42acbdf8-6edc-4c71-a3a1-3542d957aca2">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where dm_ctd_id = ${#TestCase#ctdId} 
and dm_mst_id=1 
order by createddate desc</con:query>
          <con:assertion type="XPath Match" id="22e366c7-6a4e-4580-9e30-c5cb86194c3d" name="Xpath: SoapVersion">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/IT_INTERFACE_TYPE[1]</path>
              <content>*${#TestSuite#soapVersion}*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="dced25a3-3aaf-4e5a-b3a4-e5131b6c563a" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/ID/text()</path>
              <content>${#TestCase#ctrDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="103cb639-1f44-403d-a115-8724e44cf05b" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctrDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_CheckOutGoingMsgType" id="cbb189b8-243d-4f8e-9357-2a32a77cf926">
        <con:settings/>
        <con:config>
          <script>def outtype = testRunner.testCase.testSuite.getPropertyValue("recipientOutMsg")

if (outtype == 'EMAIL') {
    	  testRunner.gotoStepByName( "JDBC _SXM Table_NoRecord")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Wait For Send Poller" id="4ea2df7d-c526-448e-860e-d91841ca17e9">
        <con:settings/>
        <con:config>
          <delay>${#TestSuite#PollTime}</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_ST Table_Send" id="80f3cf2e-0fbd-494f-b2d5-a55a8269336b">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_transactions 
where st_sender='${#TestSuite#recipient}' and st_receiver='${#TestSuite#donor}' and st_send_received='SEND' and id>${#TestCase#Id}
and st_message like '%${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01%'
order by id asc</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [ST_TRANSACTION_ID]" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//ST_TRANSACTION_ID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify SEND Status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//ST_SEND_RECEIVED</path>
              <content>SEND</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" name="Contains: Contains" id="a1e1b0ed-fff7-4f8c-9eba-dee62ae7b198">
            <con:configuration>
              <token>contractterminationrequest</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="399e0deb-1a5b-410a-a8d3-3bdd1a096037" name="Xpath: XPath Match">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_MESSAGE[1]</path>
              <content>*&lt;/contractterminationrequest>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="81b4fc10-36d1-4133-bd1d-d913492f371e" name="Script: SaveST_SXM_ID" disabled="true">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ST_SXM_ID[1]", "stSXMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_CTR" id="53ac32b1-565b-4a19-83b8-5fa65fc2e729">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where
sxm_xml_message like '%${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01%'
and sxm_xml_message like '%/${#TestSuite#donorSoapVersion}%'
and sxm_xml_message_type = 'Request'
and sxm_sender = '${#TestSuite#recipient}'
and sxm_receiver = '${#TestSuite#donor}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [ST_TRANSACTION_ID]" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//ID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" name="Contains: Contains" id="a1e1b0ed-fff7-4f8c-9eba-dee62ae7b198">
            <con:configuration>
              <token>contractterminationrequest</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="eb3bff08-4703-424d-b8ab-94a78fdd5221" name="Xpath: XPath match wishdatetime">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/SXM_XML_MESSAGE[1]</path>
              <content>*&lt;wishdatetime>${#TestCase#wishDate}&lt;/wishdatetime>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="0556b0e2-dbbc-4407-aae9-71a1337500f5" name="Xpath: header sender receiver">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/SXM_XML_MESSAGE[1]</path>
              <content><![CDATA[*<header>
      <receiver>
                  <networkoperator>${#TestSuite#donor}</networkoperator>
         	              <serviceprovider>${#TestSuite#donor}</serviceprovider>
               </receiver>
      <sender>
                  <networkoperator>${#TestSuite#recipient}</networkoperator>
         		          <serviceprovider>${#TestSuite#recipient}</serviceprovider>
               </sender>*]]></content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="eca6d213-b347-4cf5-9ee0-97d9c5a179f1" name="Xpath: contractterminationrequest tag">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/SXM_XML_MESSAGE[1]</path>
              <content>*&lt;/contractterminationrequest>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="de9aa95e-0d0e-47b5-833d-1454f3f4e133" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/SXM_DM_ID/text()</path>
              <content>${#TestCase#ctrDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="25e7940b-5a64-42ba-ac43-717970d3867c" name="Xpath: assert SXMID" disabled="true">
            <con:configuration>
              <path>/Results/ResultSet/Row/ID/text()</path>
              <content>${#TestCase#stSXMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_CheckOutGoingMsgType1" id="840db5e6-8e0e-4431-97b0-1c4a9a567fb6">
        <con:settings/>
        <con:config>
          <script>def outtype = testRunner.testCase.testSuite.getPropertyValue("recipientOutMsg")

if (outtype == 'SOAP') {
    	  testRunner.gotoStepByName( "CTRA-blocking")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_NoRecord_CTR" id="a36e64b2-e4f9-40c6-988d-f92bc9617fec">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where
sxm_xml_message like '%${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01%'
and sxm_xml_message_type = 'Request'
and sxm_sender = '${#TestSuite#recipient}'
and sxm_receiver = '${#TestSuite#donor}'</con:query>
          <con:assertion type="JDBC Status" id="0676eb61-69b4-4d97-bdeb-19df0009bcb6" name="JDBC Status OK"/>
          <con:assertion type="XPath Match" id="73cccc57-bdb5-4c93-9631-a9701592263f" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>0</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="CTRA-blocking" id="2c40bdc2-b169-4346-9d1b-7ac66168c974">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>CompWebserviceSoap11</con:interface>
          <con:operation>SendMessages</con:operation>
          <con:request name="CTRA-blocking" id="83d7229a-676a-4c41-81cc-3429f324fea1" wssPasswordType="PasswordText">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#SoapUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="http://coin.nl/ws/schema">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:SendMessagesRequest>
         <sch:Sender>${#TestSuite#donor}</sch:Sender>
         <sch:Messages>
            <sch:Message>
               <sch:Text><![CDATA[<?xml version="1.0"?>
<message xmlns="http://www.coin.nl/Overstappen_MESSAGES">
<header>
<receiver>
<!--Optional:-->
<networkoperator>${#TestSuite#recipient}</networkoperator>
<!--Optional:-->
<serviceprovider>${#TestSuite#recipient}</serviceprovider>
</receiver>
<sender>
<!--Optional:-->
<networkoperator>${#TestSuite#donor}</networkoperator>
<!--Optional:-->
<serviceprovider>${#TestSuite#donor}</serviceprovider>
</sender>
<!--Optional:-->
<messageid>${#TestSuite#recipient}-${#TestCase#contractId}-001</messageid>
<timestamp>${#TestSuite#TimestampNOW}</timestamp>
</header>
<body>
<contractterminationrequestanswer>
<${#TestSuite#donorSoapVersion}>
<dossierid>${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01</dossierid>
${#TestSuite#donorDossierType}
<blocking>Y</blocking>
<wishdatetime>${#TestCase#wishdate}</wishdatetime>
<blockingcode>11</blockingcode>

<note>Request Answer blocking ${#TestSuite#soapVersion} OK</note>
</${#TestSuite#donorSoapVersion}>
</contractterminationrequestanswer>
</body>
</message>]]]]>><![CDATA[</sch:Text>
            </sch:Message>
         </sch:Messages>
      </sch:SendMessagesRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="0408c23d-c32c-480c-b33e-7f633dc17c95"/>
            <con:assertion type="XPath Match" id="8131d7ae-9a5a-491b-aefe-ae2214c93e1b" name="XPath Match">
              <con:configuration>
                <path>declare namespace ns2='http://coin.nl/ws/schema';
//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]/text()</path>
                <content>*</content>
                <allowWildcards>true</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="8fd52b42-3f32-4928-9b32-f521197d004e" name="Script Assertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
//def groovyUtilsPro = new com.eviware.soapui.support.GroovyUtilsPro( context )

def holder = new XmlHolder( messageExchange.responseContentAsXml )
holder.namespaces["ns2"] = "http://coin.nl/ws/schema"
def transactionId = holder.getNodeValue( "//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]" )
messageExchange.modelItem.testStep.testCase.setPropertyValue("ctraTransactionId",transactionId)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#TestSuite#donorUserName}</con:username>
              <con:password>${#TestSuite#donorPassWord}</con:password>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_ST Table CTRA" id="c23f1815-d294-48cd-90fb-0c9be731084a">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_transactions 
where st_transaction_id = '${#TestCase#ctraTransactionId}'</con:query>
          <con:assertion type="Simple Contains" name="Contains: Contains" id="cce0fb3e-4b85-4ba4-a7be-1dfa2e40d69e">
            <con:configuration>
              <token>Results</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify TransactionId" id="0314e1fa-b1cb-4932-bba8-55dd87029a85">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_TRANSACTION_ID[1]</path>
              <content>${#TestCase#ctraTransactionId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify ST_SEND_RECEIVED" id="9db0e630-c611-4fc1-b0bc-fb6028a6a7c3">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_SEND_RECEIVED[1]</path>
              <content>received</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" name="Contains: Contain message Type" id="85caea84-7bde-4674-9d00-009229cb7411">
            <con:configuration>
              <token>contractterminationrequestanswer</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple NotContains" name="NotContains: Exception" id="aa4bbca5-9624-413e-9efd-d79347941338">
            <con:configuration>
              <token>Exception</token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>true</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script: assert node [ID]" id="919aa515-934c-4b10-bd9d-dcd08c81b41c">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctraId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="13a13fe3-57f1-4005-b168-2f8c06ded06d" name="Xpath: st_message &lt;/ctra>">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_MESSAGE[1]</path>
              <content>*&lt;/contractterminationrequestanswer>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="ef25a6a7-cba7-4e24-98fe-f93bc6e50d31" name="Xpath: assert UserIP" disabled="true">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_IP/text()</path>
              <content>${#Project#UserIP}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="502f0a6f-fcb1-42c5-9a79-4b0799ba7812" name="Xpath: assert UserName">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_NAME/text()</path>
              <content>${#TestSuite#donorUserName}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="7f9939ef-80a4-47db-b1ff-9fbe30a08abc" name="Xpath: assert TechSender">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_TECHNICAL_SENDER/text()</path>
              <content>${#TestSuite#donor}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Wait For Poller 2" id="875e9b05-1a90-434b-8411-8ebdc48fa947">
        <con:settings/>
        <con:config>
          <delay>${#TestSuite#PollTime}</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_RSXM Table_CTRA" id="509d77e7-ae54-477c-98e1-6642a1d408fc">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select RSXM_STATUS from overstappen.soap_transactions st, overstappen.raw_soap_xml_messages sxm 
where st.id=rsxm_st_id and st.st_transaction_id = '${#TestCase#ctraTransactionId}'</con:query>
          <con:assertion type="Simple Contains" name="Contains: Contains" id="6f5c48fb-8cde-4644-a4bb-7eb10db16d15">
            <con:configuration>
              <token>Results</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple NotContains" name="NotContains: Exception" id="f38c5ce3-b090-4b36-863b-3601744c94ab">
            <con:configuration>
              <token>Exception</token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>true</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: XPath Match" id="14d90270-6f91-4150-993a-d24f2adbd507">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/RSXM_STATUS[1]</path>
              <content>Failed</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="fe53a1c0-772f-4a2c-89dd-4c142d182ed2" name="Script: SaveRSXM_DM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/RSXM_DM_ID[1]", "ctrDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="7eac1082-4653-422a-bd2a-83ec72fa790e" name="Script: SaveRSXM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctraRSXMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table_CTRA" id="7ef0c678-16ca-49a9-9b74-1611b3a5eb34">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier 
where id='${#TestCase#ctdId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [ST_TRANSACTION_ID]" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//CTD_SWITCHID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_dossier_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_DOSSIER_STATUS</path>
              <content>Pending</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_process_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_PROCESS_STATUS</path>
              <content>Request</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="f1634f5b-7b26-4777-9ee7-2012c2678c07" name="Script: assert ion">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def ModifiedDate = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/MODIFIEDDATE[1]", "ModifiedDate");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTRA" id="419a916d-62b5-4f52-9e8a-208a1c1f509c">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where dm_ctd_id = ${#TestCase#ctdId} 
and dm_mst_id=3 
order by createddate desc</con:query>
          <con:assertion type="Simple Contains" id="1f7e0d13-4124-4348-a617-48e6a27c86f8" name="Contains: Contains">
            <con:configuration>
              <token>&lt;ResultSet fetchSize="0"</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="f90f4b5f-0e1e-43ab-8b3e-b71ed874517b" name="Contains: Contains">
            <con:configuration>
              <token/>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="0bf90492-fb91-4cb5-8052-2937dc838b15" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/ID/text()</path>
              <content>${#TestCase#ctrDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d8b572d0-0f4e-4a7a-9b97-3d94372aac25" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctraDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:setupScript>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import groovy.time.TimeCategory
def today = new Date() 
def now = String.format('%tFT%&lt;tT', new Date() )
def wishdate = today 
use(TimeCategory) {
	   wishdate = wishdate + 1.day
}
def wishdatestr = wishdate.format("yyyy-MM-dd'T'HH:mm:ss")
testRunner.testCase.setPropertyValue("Now",now)
testRunner.testCase.setPropertyValue("wishDate",wishdatestr)
String contractId = funcHandle.getRandomString()
testRunner.testCase.setPropertyValue("contractId",contractId)</con:setupScript>
      <con:tearDownScript/>
      <con:properties/>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>122d3297-f22d-449f-ac52-c46f1bfb714e</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="B2.1. CTR-CTRA blocking 11_91Days" searchProperties="true" id="07a60b45-f1cc-47f3-ba20-584a8ab27e41" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:settings>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">1000</con:setting>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting>
      </con:settings>
      <con:testStep type="request" name="CTR-Sunny Day" id="031af376-f42c-441c-b83d-5d567da0b672">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>CompWebserviceSoap11</con:interface>
          <con:operation>SendMessages</con:operation>
          <con:request name="CTR-Sunny Day" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordText" id="3aa22f8f-37c1-4ea2-ba88-b80068a3761f">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#SoapUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="http://coin.nl/ws/schema">\r
   <soapenv:Header/>
   <soapenv:Body>
      <sch:SendMessagesRequest>
         <sch:Sender>${#TestSuite#recipient}</sch:Sender>
         <sch:Messages>
            <sch:Message>
               <sch:Text><![CDATA[<?xml version="1.0"?>
<message xmlns="http://www.coin.nl/Overstappen_MESSAGES">
<header>
<receiver>
<!--Optional:-->
<networkoperator>${#TestSuite#donor}</networkoperator>
<!--Optional:-->
<serviceprovider>${#TestSuite#donor}</serviceprovider>
</receiver>
<sender>
<!--Optional:-->
<networkoperator>${#TestSuite#recipient}</networkoperator>
<!--Optional:-->
<serviceprovider>${#TestSuite#recipient}</serviceprovider>
</sender>
<!--Optional:-->
<messageid>${#TestSuite#recipient}-${#TestCase#contractId}-01</messageid>
<timestamp>${#TestSuite#TimestampNOW}</timestamp>
</header>
<body>
<contractterminationrequest>
<${#TestSuite#soapVersion}>
<dossierid>${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01</dossierid>
<!--Optional:-->
<recipientserviceprovider>${#TestSuite#recipient}</recipientserviceprovider>
<!--Optional:-->
<recipientnetworkoperator>${#TestSuite#recipient}</recipientnetworkoperator>
<!--Optional:-->
<donornetworkoperator>${#TestSuite#donor}</donornetworkoperator>
<!--Optional:-->
<donorserviceprovider>${#TestSuite#donor}</donorserviceprovider>
<wishdatetime>${#TestCase#wishdate}</wishdatetime>
${#TestSuite#dossierType}
${#TestSuite#compensationOK}
<name>COIN</name>
<addressblock>
 	<postcode>1389SS</postcode>
	<housenr>99999</housenr>
</addressblock>
<numberseries>
     <start>0173112233</start>
     <end>0173112233</end>
</numberseries>
<validationblock>
    <name>contractid</name>
    <value>1-${#TestCase#contractID}</value>
 </validationblock>
<note>${#TestSuite#soapVersion} expect ${#TestSuite#donorSoapVersion}-linenumber ${#TestSuite#lineNumber}</note>
</${#TestSuite#soapVersion}>
</contractterminationrequest>
</body>
</message>]]]]>><![CDATA[</sch:Text>
            </sch:Message>
         </sch:Messages>
      </sch:SendMessagesRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="XPath Match" name="Match content of [ns2:TransactionId] using RegEx" id="1c471417-807a-4012-a734-b2dd5be94c8f">
              <con:configuration>
                <path>declare namespace ns2='http://coin.nl/ws/schema';
//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]/text()</path>
                <content>*</content>
                <allowWildcards>true</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" name="Check count of [ns2:TransactionId]" id="345c96a3-89a0-476e-9875-b0c18e04ef5b">
              <con:configuration>
                <path>declare namespace ns2='http://coin.nl/ws/schema';
count( //ns2:SendMessagesResponse/ns2:TransactionId)</path>
                <content>1</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert node [ns2:TransactionId]" id="63f77b9d-d209-4d74-ad56-a26982ab75c5">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
//def groovyUtilsPro = new com.eviware.soapui.support.GroovyUtilsPro( context )

def holder = new XmlHolder( messageExchange.responseContentAsXml )
holder.namespaces["ns2"] = "http://coin.nl/ws/schema"
def transactionId = holder.getNodeValue( "//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]" )
messageExchange.modelItem.testStep.testCase.setPropertyValue("transactionId",transactionId)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#TestSuite#recipientUserName}</con:username>
              <con:password>${#TestSuite#recipientPassWord}</con:password>
              <con:domain xsi:nil="true"/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://coin.nl/SendMessages"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_ST Table" id="f31a2a23-b465-4e62-82a7-91c04417a90d">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_transactions 
where st_transaction_id = '${#TestCase#transactionId}'</con:query>
          <con:assertion type="Simple Contains" name="Contains: assert Results" id="cce0fb3e-4b85-4ba4-a7be-1dfa2e40d69e">
            <con:configuration>
              <token>Results</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify TransactionId" id="0314e1fa-b1cb-4932-bba8-55dd87029a85">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_TRANSACTION_ID[1]</path>
              <content>${#TestCase#transactionId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify ST_SEND_RECEIVED" id="9db0e630-c611-4fc1-b0bc-fb6028a6a7c3">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_SEND_RECEIVED[1]</path>
              <content>received</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" name="Contains: Contain message Type" id="85caea84-7bde-4674-9d00-009229cb7411">
            <con:configuration>
              <token>&amp;lt;contractterminationrequest&amp;gt;</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple NotContains" name="NotContains: Exception" id="aa4bbca5-9624-413e-9efd-d79347941338">
            <con:configuration>
              <token>Exception</token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>true</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="77af631e-a991-48c5-b7c6-43b4c54de0ad" name="Script: store SoapTransaction.id">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "Id");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="49cbc96f-442b-4524-9f2f-8f44bbac777b" name="Xpath: assert UserIP" disabled="true">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_IP/text()</path>
              <content>${#Project#UserIP}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="26d53d28-bce5-4343-9972-fcc2964280fa" name="Xpath: assert UserName">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_NAME/text()</path>
              <content>${#TestSuite#recipientUserName}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="f4ba656b-b2b4-43cd-8503-67908322d5d2" name="Xpath: assert TechSender">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_TECHNICAL_SENDER/text()</path>
              <content>${#TestSuite#recipient}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Wait For Poller" id="3f3dcf92-1746-4c76-b3b2-e2bb6dd17905">
        <con:settings/>
        <con:config>
          <delay>${#TestSuite#PollTime}</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_RSXM Table_CTR" id="f5254202-d958-40ca-ba7f-54cac5ccda6d">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.raw_soap_xml_messages where rsxm_st_id = '${#TestCase#Id}'</con:query>
          <con:assertion type="Simple Contains" name="Contains: Contains" id="6f5c48fb-8cde-4644-a4bb-7eb10db16d15">
            <con:configuration>
              <token>Results</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple NotContains" name="NotContains: Exception" id="f38c5ce3-b090-4b36-863b-3601744c94ab">
            <con:configuration>
              <token>Exception</token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>true</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: XPath Match" id="14d90270-6f91-4150-993a-d24f2adbd507">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/RSXM_STATUS[1]</path>
              <content>Done</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="dc3328a2-f364-4c61-8212-91e02cea17e2" name="Script: SaveRSXM_DM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/RSXM_DM_ID[1]", "ctrDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="1f12ba8b-82ee-4087-b2cb-2f181351aa70" name="Script: SaveRSXM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctrRSXMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table_CTR" id="af9831c9-5bd0-471e-b522-d62d72004546">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier where 
ctd_switchid = '${#TestSuite#Recipient}-${#TestSuite#Donor}-${#TestCase#ContractId}-01'</con:query>
          <con:assertion type="XPath Match" name="Xpath: assert CTD_DOSSIER_STATUS]" id="ac17d9f6-9653-435c-bd0c-9af6917f2aa6">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_DOSSIER_STATUS[1]/text()</path>
              <content>Pending</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert CTD_PROCESS_STATUS]" id="ede8cc08-99ab-46ca-baf4-97e9f0895428">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_PROCESS_STATUS[1]/text()</path>
              <content>Request</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: assert ion ctd_id">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def ctdid = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctdId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTR" id="0c9640ee-494c-4945-8440-3c2c08e9639d">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where dm_ctd_id = ${#TestCase#ctdId} 
and dm_mst_id=1 
order by createddate desc</con:query>
          <con:assertion type="XPath Match" id="22e366c7-6a4e-4580-9e30-c5cb86194c3d" name="Xpath: SoapVersion">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/IT_INTERFACE_TYPE[1]</path>
              <content>*${#TestSuite#soapVersion}*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="eda2e72d-6ee8-4992-b768-bb8100c3cd3e" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/ID/text()</path>
              <content>${#TestCase#ctrDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="57a9da59-e136-488c-a1db-407dc53668c5" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctrDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_CheckOutGoingMsgType" id="a3c4fbd9-c715-440a-86a0-9684d43954d6">
        <con:settings/>
        <con:config>
          <script>def outtype = testRunner.testCase.testSuite.getPropertyValue("recipientOutMsg")

if (outtype == 'EMAIL') {
    	  testRunner.gotoStepByName( "JDBC _SXM Table_NoRecord")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Wait For Send Poller" id="488f06c0-cfe6-436c-840c-0f4ae6811d61">
        <con:settings/>
        <con:config>
          <delay>${#TestSuite#PollTime}</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_ST Table_Send" id="662407c1-00fb-4a16-a8f0-a4bc84642b08">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_transactions 
where st_sender='${#TestSuite#recipient}' and st_receiver='${#TestSuite#donor}' and st_send_received='SEND' and id>${#TestCase#Id}
and st_message like '%${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01%'
order by id asc</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [ST_TRANSACTION_ID]" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//ST_TRANSACTION_ID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify SEND Status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//ST_SEND_RECEIVED</path>
              <content>SEND</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" name="Contains: Contains" id="a1e1b0ed-fff7-4f8c-9eba-dee62ae7b198">
            <con:configuration>
              <token>contractterminationrequest</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="399e0deb-1a5b-410a-a8d3-3bdd1a096037" name="Xpath: XPath Match">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_MESSAGE[1]</path>
              <content>*&lt;/contractterminationrequest>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="df3cd87e-81d3-45d1-b82a-629b1b54e087" name="Script: SaveST_SXM_ID" disabled="true">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ST_SXM_ID[1]", "stSXMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_CTR" id="42654b63-72be-45dc-ac35-6dda3e93cee7">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where
sxm_xml_message like '%${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01%'
and sxm_xml_message like '%/${#TestSuite#donorSoapVersion}%'
and sxm_xml_message_type = 'Request'
and sxm_sender = '${#TestSuite#recipient}'
and sxm_receiver = '${#TestSuite#donor}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [ST_TRANSACTION_ID]" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//ID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" name="Contains: Contains" id="a1e1b0ed-fff7-4f8c-9eba-dee62ae7b198">
            <con:configuration>
              <token>contractterminationrequest</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="eb3bff08-4703-424d-b8ab-94a78fdd5221" name="Xpath: XPath match wishdatetime">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/SXM_XML_MESSAGE[1]</path>
              <content>*&lt;wishdatetime>${#TestCase#wishDate}&lt;/wishdatetime>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="0556b0e2-dbbc-4407-aae9-71a1337500f5" name="Xpath: header sender receiver">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/SXM_XML_MESSAGE[1]</path>
              <content><![CDATA[*<header>
      <receiver>
                  <networkoperator>${#TestSuite#donor}</networkoperator>
         	              <serviceprovider>${#TestSuite#donor}</serviceprovider>
               </receiver>
      <sender>
                  <networkoperator>${#TestSuite#recipient}</networkoperator>
         		          <serviceprovider>${#TestSuite#recipient}</serviceprovider>
               </sender>*]]></content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="eca6d213-b347-4cf5-9ee0-97d9c5a179f1" name="Xpath: contractterminationrequest tag">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/SXM_XML_MESSAGE[1]</path>
              <content>*&lt;/contractterminationrequest>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="f8b69261-8b37-4713-af7e-bfee8ec6dfe4" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/SXM_DM_ID/text()</path>
              <content>${#TestCase#ctrDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="8777d064-1c1b-4612-8147-9482bde82a9a" name="Xpath: assert SXMID" disabled="true">
            <con:configuration>
              <path>/Results/ResultSet/Row/ID/text()</path>
              <content>${#TestCase#stSXMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_CheckOutGoingMsgType1" id="9e5234cb-60e3-4929-a603-54692d71b902">
        <con:settings/>
        <con:config>
          <script>def outtype = testRunner.testCase.testSuite.getPropertyValue("recipientOutMsg")

if (outtype == 'SOAP') {
    	  testRunner.gotoStepByName( "CTRA-blocking")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_NoRecord_CTR" id="9bc3be57-8436-469a-81a7-7b71a408aba8">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where
sxm_xml_message like '%${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01%'
and sxm_xml_message_type = 'Request'
and sxm_sender = '${#TestSuite#recipient}'
and sxm_receiver = '${#TestSuite#donor}'</con:query>
          <con:assertion type="JDBC Status" id="0676eb61-69b4-4d97-bdeb-19df0009bcb6" name="JDBC Status OK"/>
          <con:assertion type="XPath Match" id="dc9abbf1-2e2d-4dfb-987b-0b77224d5b90" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>0</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="CTRA-blocking" id="58a17281-104f-42fe-84e0-14c16122be81">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>CompWebserviceSoap11</con:interface>
          <con:operation>SendMessages</con:operation>
          <con:request name="CTRA-blocking" id="83d7229a-676a-4c41-81cc-3429f324fea1" wssPasswordType="PasswordText">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#SoapUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="http://coin.nl/ws/schema">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:SendMessagesRequest>
         <sch:Sender>${#TestSuite#donor}</sch:Sender>
         <sch:Messages>
            <sch:Message>
               <sch:Text><![CDATA[<?xml version="1.0"?>
<message xmlns="http://www.coin.nl/Overstappen_MESSAGES">
<header>
<receiver>
<!--Optional:-->
<networkoperator>${#TestSuite#recipient}</networkoperator>
<!--Optional:-->
<serviceprovider>${#TestSuite#recipient}</serviceprovider>
</receiver>
<sender>
<!--Optional:-->
<networkoperator>${#TestSuite#donor}</networkoperator>
<!--Optional:-->
<serviceprovider>${#TestSuite#donor}</serviceprovider>
</sender>
<!--Optional:-->
<messageid>${#TestSuite#recipient}-${#TestCase#contractId}-001</messageid>
<timestamp>${#TestSuite#TimestampNOW}</timestamp>
</header>
<body>
<contractterminationrequestanswer>
<${#TestSuite#donorSoapVersion}>
<dossierid>${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01</dossierid>
${#TestSuite#donorDossierType}
<blocking>Y</blocking>
<wishdatetime>2017-10-24T12:17:36</wishdatetime>
<blockingcode>11</blockingcode>
<proposeddatetime>${#TestCase#ProposedDate}</proposeddatetime>
<note>Request Answer blocking ${#TestSuite#soapVersion} OK</note>
</${#TestSuite#donorSoapVersion}>
</contractterminationrequestanswer>
</body>
</message>]]]]>><![CDATA[</sch:Text>
            </sch:Message>
         </sch:Messages>
      </sch:SendMessagesRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="0408c23d-c32c-480c-b33e-7f633dc17c95"/>
            <con:assertion type="XPath Match" id="8131d7ae-9a5a-491b-aefe-ae2214c93e1b" name="XPath Match">
              <con:configuration>
                <path>declare namespace ns2='http://coin.nl/ws/schema';
//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]/text()</path>
                <content>*</content>
                <allowWildcards>true</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="8fd52b42-3f32-4928-9b32-f521197d004e" name="Script Assertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
//def groovyUtilsPro = new com.eviware.soapui.support.GroovyUtilsPro( context )

def holder = new XmlHolder( messageExchange.responseContentAsXml )
holder.namespaces["ns2"] = "http://coin.nl/ws/schema"
def transactionId = holder.getNodeValue( "//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]" )
messageExchange.modelItem.testStep.testCase.setPropertyValue("ctraTransactionId",transactionId)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#TestSuite#donorUserName}</con:username>
              <con:password>${#TestSuite#donorPassWord}</con:password>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_ST Table CTRA" id="e2db5855-c51e-4b83-b42a-470d8004cee5">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_transactions 
where st_transaction_id = '${#TestCase#ctraTransactionId}'</con:query>
          <con:assertion type="Simple Contains" name="Contains: Contains" id="cce0fb3e-4b85-4ba4-a7be-1dfa2e40d69e">
            <con:configuration>
              <token>Results</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify TransactionId" id="0314e1fa-b1cb-4932-bba8-55dd87029a85">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_TRANSACTION_ID[1]</path>
              <content>${#TestCase#ctraTransactionId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify ST_SEND_RECEIVED" id="9db0e630-c611-4fc1-b0bc-fb6028a6a7c3">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_SEND_RECEIVED[1]</path>
              <content>received</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" name="Contains: Contain message Type" id="85caea84-7bde-4674-9d00-009229cb7411">
            <con:configuration>
              <token>contractterminationrequestanswer</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple NotContains" name="NotContains: Exception" id="aa4bbca5-9624-413e-9efd-d79347941338">
            <con:configuration>
              <token>Exception</token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>true</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script: assert node [ID]" id="919aa515-934c-4b10-bd9d-dcd08c81b41c">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctraId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="13a13fe3-57f1-4005-b168-2f8c06ded06d" name="Xpath: st_message &lt;/ctra>">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_MESSAGE[1]</path>
              <content>*&lt;/contractterminationrequestanswer>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="0578f24f-d2d0-472d-a0d4-b4990aa58478" name="Xpath: assert UserIP" disabled="true">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_IP/text()</path>
              <content>${#Project#UserIP}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="3254d212-c7de-4c65-9d86-f986afe034c3" name="Xpath: assert UserName">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_NAME/text()</path>
              <content>${#TestSuite#donorUserName}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="f315329c-d693-4817-9aa3-ca7563d264bb" name="Xpath: assert TechSender">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_TECHNICAL_SENDER/text()</path>
              <content>${#TestSuite#donor}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Wait For Poller 2" id="f960c6af-afd1-406d-ad4e-ec97d6c74626">
        <con:settings/>
        <con:config>
          <delay>${#TestSuite#PollTime}</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_RSXM Table_CTRA" id="3066569d-cdd0-49bd-896d-4c792c1be7eb">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select RSXM_STATUS from overstappen.soap_transactions st, overstappen.raw_soap_xml_messages sxm 
where st.id=rsxm_st_id and st.st_transaction_id = '${#TestCase#ctraTransactionId}'</con:query>
          <con:assertion type="Simple Contains" name="Contains: Contains" id="6f5c48fb-8cde-4644-a4bb-7eb10db16d15">
            <con:configuration>
              <token>Results</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple NotContains" name="NotContains: Exception" id="f38c5ce3-b090-4b36-863b-3601744c94ab">
            <con:configuration>
              <token>Exception</token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>true</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: XPath Match" id="14d90270-6f91-4150-993a-d24f2adbd507">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/RSXM_STATUS[1]</path>
              <content>Done</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="29a82230-7dec-49a5-b05b-ce6fa3642384" name="Script: SaveRSXM_DM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/RSXM_DM_ID[1]", "ctrDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="e06e876b-5b2d-4e54-8884-c5bfb937a529" name="Script: SaveRSXM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctraRSXMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table_CTRA" id="04662ce0-29b6-4992-8fdb-94ec1ae76a0e">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier 
where id='${#TestCase#ctdId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [ST_TRANSACTION_ID]" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//CTD_SWITCHID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_dossier_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_DOSSIER_STATUS</path>
              <content>Blocked</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_process_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_PROCESS_STATUS</path>
              <content>Request Answer Blocking</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="f1634f5b-7b26-4777-9ee7-2012c2678c07" name="Script: assert ion">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def ModifiedDate = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/MODIFIEDDATE[1]", "ModifiedDate");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTRA" id="2647d790-295b-457d-8cf8-985c8fe1474d">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where dm_ctd_id = ${#TestCase#ctdId} 
and dm_mst_id=3 
order by createddate desc</con:query>
          <con:assertion type="XQuery Match" id="40cc6fa1-0d78-43c5-a10b-f043ddf625c6" name="XQuery Match">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/IT_INTERFACE_TYPE[1]</path>
              <content>*${#TestSuite#donorSoapVersion}*</content>
              <allowWildcards>true</allowWildcards>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="78d3537b-6d18-493d-8ea2-ae4f89880e4c" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/ID/text()</path>
              <content>${#TestCase#ctrDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="ca68484d-e8be-4d79-bf18-5fa33d290d76" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctraDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:setupScript>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import groovy.time.TimeCategory
def today = new Date() 
def now = String.format('%tFT%&lt;tT', new Date() )
def wishdate = today 
use(TimeCategory) {
	   wishdate = wishdate + 1.day
}
def wishdatestr = wishdate.format("yyyy-MM-dd'T'HH:mm:ss")
testRunner.testCase.setPropertyValue("Now",now)
testRunner.testCase.setPropertyValue("wishDate",wishdatestr)
String contractId = funcHandle.getRandomString()
testRunner.testCase.setPropertyValue("contractId",contractId)
Calendar cal = Calendar.getInstance()
cal.setTime(today)
cal.add(Calendar.DATE, 90)
def proposeddate = cal.getTime()
def guiproposeddate =proposeddate.format("yyyy-MM-dd'T'HH:mm:ss")
testRunner.testCase.setPropertyValue("ProposedDate",guiproposeddate)</con:setupScript>
      <con:tearDownScript/>
      <con:properties/>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>122d3297-f22d-449f-ac52-c46f1bfb714e</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="B2.1. CTR-CTRA blocking 11_FarFuture" searchProperties="true" id="15bb5c3c-f931-4dc3-8199-083493c9ec78" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:settings>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">1000</con:setting>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting>
      </con:settings>
      <con:testStep type="request" name="CTR-Sunny Day" id="62c78fe8-d717-470b-a8c0-63e572b390d7">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>CompWebserviceSoap11</con:interface>
          <con:operation>SendMessages</con:operation>
          <con:request name="CTR-Sunny Day" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordText" id="3aa22f8f-37c1-4ea2-ba88-b80068a3761f">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#SoapUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="http://coin.nl/ws/schema">\r
   <soapenv:Header/>
   <soapenv:Body>
      <sch:SendMessagesRequest>
         <sch:Sender>${#TestSuite#recipient}</sch:Sender>
         <sch:Messages>
            <sch:Message>
               <sch:Text><![CDATA[<?xml version="1.0"?>
<message xmlns="http://www.coin.nl/Overstappen_MESSAGES">
<header>
<receiver>
<!--Optional:-->
<networkoperator>${#TestSuite#donor}</networkoperator>
<!--Optional:-->
<serviceprovider>${#TestSuite#donor}</serviceprovider>
</receiver>
<sender>
<!--Optional:-->
<networkoperator>${#TestSuite#recipient}</networkoperator>
<!--Optional:-->
<serviceprovider>${#TestSuite#recipient}</serviceprovider>
</sender>
<!--Optional:-->
<messageid>${#TestSuite#recipient}-${#TestCase#contractId}-01</messageid>
<timestamp>${#TestSuite#TimestampNOW}</timestamp>
</header>
<body>
<contractterminationrequest>
<${#TestSuite#soapVersion}>
<dossierid>${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01</dossierid>
<!--Optional:-->
<recipientserviceprovider>${#TestSuite#recipient}</recipientserviceprovider>
<!--Optional:-->
<recipientnetworkoperator>${#TestSuite#recipient}</recipientnetworkoperator>
<!--Optional:-->
<donornetworkoperator>${#TestSuite#donor}</donornetworkoperator>
<!--Optional:-->
<donorserviceprovider>${#TestSuite#donor}</donorserviceprovider>
<wishdatetime>${#TestCase#wishdate}</wishdatetime>
${#TestSuite#dossierType}
${#TestSuite#compensationOK}
<name>COIN</name>
<addressblock>
 	<postcode>1389SS</postcode>
	<housenr>99999</housenr>
</addressblock>
<numberseries>
     <start>0173112233</start>
     <end>0173112233</end>
</numberseries>
<validationblock>
    <name>contractid</name>
    <value>1-${#TestCase#contractID}</value>
 </validationblock>
<note>${#TestSuite#soapVersion} expect ${#TestSuite#donorSoapVersion}-linenumber ${#TestSuite#lineNumber}</note>
</${#TestSuite#soapVersion}>
</contractterminationrequest>
</body>
</message>]]]]>><![CDATA[</sch:Text>
            </sch:Message>
         </sch:Messages>
      </sch:SendMessagesRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="XPath Match" name="Match content of [ns2:TransactionId] using RegEx" id="1c471417-807a-4012-a734-b2dd5be94c8f">
              <con:configuration>
                <path>declare namespace ns2='http://coin.nl/ws/schema';
//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]/text()</path>
                <content>*</content>
                <allowWildcards>true</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" name="Check count of [ns2:TransactionId]" id="345c96a3-89a0-476e-9875-b0c18e04ef5b">
              <con:configuration>
                <path>declare namespace ns2='http://coin.nl/ws/schema';
count( //ns2:SendMessagesResponse/ns2:TransactionId)</path>
                <content>1</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert node [ns2:TransactionId]" id="63f77b9d-d209-4d74-ad56-a26982ab75c5">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
//def groovyUtilsPro = new com.eviware.soapui.support.GroovyUtilsPro( context )

def holder = new XmlHolder( messageExchange.responseContentAsXml )
holder.namespaces["ns2"] = "http://coin.nl/ws/schema"
def transactionId = holder.getNodeValue( "//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]" )
messageExchange.modelItem.testStep.testCase.setPropertyValue("transactionId",transactionId)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#TestSuite#recipientUserName}</con:username>
              <con:password>${#TestSuite#recipientPassWord}</con:password>
              <con:domain xsi:nil="true"/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://coin.nl/SendMessages"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_ST Table" id="db0e3270-7b06-4c30-a0d4-a5c0a552fbdd">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_transactions 
where st_transaction_id = '${#TestCase#transactionId}'</con:query>
          <con:assertion type="Simple Contains" name="Contains: assert Results" id="cce0fb3e-4b85-4ba4-a7be-1dfa2e40d69e">
            <con:configuration>
              <token>Results</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify TransactionId" id="0314e1fa-b1cb-4932-bba8-55dd87029a85">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_TRANSACTION_ID[1]</path>
              <content>${#TestCase#transactionId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify ST_SEND_RECEIVED" id="9db0e630-c611-4fc1-b0bc-fb6028a6a7c3">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_SEND_RECEIVED[1]</path>
              <content>received</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" name="Contains: Contain message Type" id="85caea84-7bde-4674-9d00-009229cb7411">
            <con:configuration>
              <token>&amp;lt;contractterminationrequest&amp;gt;</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple NotContains" name="NotContains: Exception" id="aa4bbca5-9624-413e-9efd-d79347941338">
            <con:configuration>
              <token>Exception</token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>true</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="77af631e-a991-48c5-b7c6-43b4c54de0ad" name="Script: store SoapTransaction.id">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "Id");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="ce1d97cf-04f2-47c9-9a7a-72c131173dc2" name="Xpath: assert UserIP" disabled="true">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_IP/text()</path>
              <content>${#Project#UserIP}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="30a3bdac-57ef-43ff-9351-f1b7f61ebec5" name="Xpath: assert UserName">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_NAME/text()</path>
              <content>${#TestSuite#recipientUserName}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="80217ddc-e134-4f2b-9d37-688db1992491" name="Xpath: assert TechSender">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_TECHNICAL_SENDER/text()</path>
              <content>${#TestSuite#recipient}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Wait For Poller" id="0a991df6-ee6a-462e-a930-1c2953232108">
        <con:settings/>
        <con:config>
          <delay>${#TestSuite#PollTime}</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_RSXM Table_CTR" id="6b034980-1a28-464d-bbab-9960d7cb8c03">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.raw_soap_xml_messages where rsxm_st_id = '${#TestCase#Id}'</con:query>
          <con:assertion type="Simple Contains" name="Contains: Contains" id="6f5c48fb-8cde-4644-a4bb-7eb10db16d15">
            <con:configuration>
              <token>Results</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple NotContains" name="NotContains: Exception" id="f38c5ce3-b090-4b36-863b-3601744c94ab">
            <con:configuration>
              <token>Exception</token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>true</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: XPath Match" id="14d90270-6f91-4150-993a-d24f2adbd507">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/RSXM_STATUS[1]</path>
              <content>Done</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="adb2512a-d3f7-49e8-8325-1bda2988540a" name="Script: SaveRSXM_DM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/RSXM_DM_ID[1]", "ctrDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="531a4aef-5917-4509-8655-b0ecc4f7ade3" name="Script: SaveRSXM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctrRSXMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table_CTR" id="394e87b3-7696-4950-87bd-54d31f5d7deb">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier where 
ctd_switchid = '${#TestSuite#Recipient}-${#TestSuite#Donor}-${#TestCase#ContractId}-01'</con:query>
          <con:assertion type="XPath Match" name="Xpath: assert CTD_DOSSIER_STATUS]" id="ac17d9f6-9653-435c-bd0c-9af6917f2aa6">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_DOSSIER_STATUS[1]/text()</path>
              <content>Pending</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert CTD_PROCESS_STATUS]" id="ede8cc08-99ab-46ca-baf4-97e9f0895428">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_PROCESS_STATUS[1]/text()</path>
              <content>Request</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: assert ion ctd_id">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def ctdid = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctdId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTR" id="15af87f9-5f56-49a4-a95f-7d8c6e4857f5">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where dm_ctd_id = ${#TestCase#ctdId} 
and dm_mst_id=1 
order by createddate desc</con:query>
          <con:assertion type="XPath Match" id="22e366c7-6a4e-4580-9e30-c5cb86194c3d" name="Xpath: SoapVersion">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/IT_INTERFACE_TYPE[1]</path>
              <content>*${#TestSuite#soapVersion}*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="0b3780fa-ce15-44d6-8d0b-976d224e5503" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/ID/text()</path>
              <content>${#TestCase#ctrDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d262ab26-d264-4843-8372-21236e0e64a6" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctrDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_CheckOutGoingMsgType" id="9a816645-2bea-43ca-88e4-3e09b129b81a">
        <con:settings/>
        <con:config>
          <script>def outtype = testRunner.testCase.testSuite.getPropertyValue("recipientOutMsg")

if (outtype == 'EMAIL') {
    	  testRunner.gotoStepByName( "JDBC _SXM Table_NoRecord")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Wait For Send Poller" id="aa3b243f-8f72-474a-a019-dfbc055a5dac">
        <con:settings/>
        <con:config>
          <delay>${#TestSuite#PollTime}</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_ST Table_Send" id="e33f8834-554b-4581-9861-f7164ad00a11">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_transactions 
where st_sender='${#TestSuite#recipient}' and st_receiver='${#TestSuite#donor}' and st_send_received='SEND' and id>${#TestCase#Id}
and st_message like '%${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01%'
order by id asc</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [ST_TRANSACTION_ID]" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//ST_TRANSACTION_ID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify SEND Status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//ST_SEND_RECEIVED</path>
              <content>SEND</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" name="Contains: Contains" id="a1e1b0ed-fff7-4f8c-9eba-dee62ae7b198">
            <con:configuration>
              <token>contractterminationrequest</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="399e0deb-1a5b-410a-a8d3-3bdd1a096037" name="Xpath: XPath Match">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_MESSAGE[1]</path>
              <content>*&lt;/contractterminationrequest>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="4af38013-a66d-4bba-855a-0e394942879f" name="Script: SaveST_SXM_ID" disabled="true">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ST_SXM_ID[1]", "stSXMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_CTR" id="f75b1720-6967-488c-a67a-386f269f8b46">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where
sxm_xml_message like '%${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01%'
and sxm_xml_message like '%/${#TestSuite#donorSoapVersion}%'
and sxm_xml_message_type = 'Request'
and sxm_sender = '${#TestSuite#recipient}'
and sxm_receiver = '${#TestSuite#donor}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [ST_TRANSACTION_ID]" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//ID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" name="Contains: Contains" id="a1e1b0ed-fff7-4f8c-9eba-dee62ae7b198">
            <con:configuration>
              <token>contractterminationrequest</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="eb3bff08-4703-424d-b8ab-94a78fdd5221" name="Xpath: XPath match wishdatetime">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/SXM_XML_MESSAGE[1]</path>
              <content>*&lt;wishdatetime>${#TestCase#wishDate}&lt;/wishdatetime>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="0556b0e2-dbbc-4407-aae9-71a1337500f5" name="Xpath: header sender receiver">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/SXM_XML_MESSAGE[1]</path>
              <content><![CDATA[*<header>
      <receiver>
                  <networkoperator>${#TestSuite#donor}</networkoperator>
         	              <serviceprovider>${#TestSuite#donor}</serviceprovider>
               </receiver>
      <sender>
                  <networkoperator>${#TestSuite#recipient}</networkoperator>
         		          <serviceprovider>${#TestSuite#recipient}</serviceprovider>
               </sender>*]]></content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="eca6d213-b347-4cf5-9ee0-97d9c5a179f1" name="Xpath: contractterminationrequest tag">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/SXM_XML_MESSAGE[1]</path>
              <content>*&lt;/contractterminationrequest>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="97de934c-a268-4e2d-a60b-ad19b968600d" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/SXM_DM_ID/text()</path>
              <content>${#TestCase#ctrDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="f81b1c57-7127-4181-b70d-a7797aecd521" name="Xpath: assert SXMID" disabled="true">
            <con:configuration>
              <path>/Results/ResultSet/Row/ID/text()</path>
              <content>${#TestCase#stSXMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_CheckOutGoingMsgType1" id="2055cf85-4d34-4851-b07c-378578ad033a">
        <con:settings/>
        <con:config>
          <script>def outtype = testRunner.testCase.testSuite.getPropertyValue("recipientOutMsg")

if (outtype == 'SOAP') {
    	  testRunner.gotoStepByName( "CTRA-blocking")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_NoRecord_CTR" id="44bafa1c-c18e-4813-8c11-f0956f173cdf">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where
sxm_xml_message like '%${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01%'
and sxm_xml_message_type = 'Request'
and sxm_sender = '${#TestSuite#recipient}'
and sxm_receiver = '${#TestSuite#donor}'</con:query>
          <con:assertion type="JDBC Status" id="0676eb61-69b4-4d97-bdeb-19df0009bcb6" name="JDBC Status OK"/>
          <con:assertion type="XPath Match" id="7ebb058e-3a3e-4d53-95f9-7aa6cfe30aa8" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>0</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="CTRA-blocking" id="c1f6acff-56be-45f6-809f-583b5f53e89c">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>CompWebserviceSoap11</con:interface>
          <con:operation>SendMessages</con:operation>
          <con:request name="CTRA-blocking" id="83d7229a-676a-4c41-81cc-3429f324fea1" wssPasswordType="PasswordText">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#SoapUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="http://coin.nl/ws/schema">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:SendMessagesRequest>
         <sch:Sender>${#TestSuite#donor}</sch:Sender>
         <sch:Messages>
            <sch:Message>
               <sch:Text><![CDATA[<?xml version="1.0"?>
<message xmlns="http://www.coin.nl/Overstappen_MESSAGES">
<header>
<receiver>
<!--Optional:-->
<networkoperator>${#TestSuite#recipient}</networkoperator>
<!--Optional:-->
<serviceprovider>${#TestSuite#recipient}</serviceprovider>
</receiver>
<sender>
<!--Optional:-->
<networkoperator>${#TestSuite#donor}</networkoperator>
<!--Optional:-->
<serviceprovider>${#TestSuite#donor}</serviceprovider>
</sender>
<!--Optional:-->
<messageid>${#TestSuite#recipient}-${#TestCase#contractId}-001</messageid>
<timestamp>${#TestSuite#TimestampNOW}</timestamp>
</header>
<body>
<contractterminationrequestanswer>
<${#TestSuite#donorSoapVersion}>
<dossierid>${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01</dossierid>
${#TestSuite#donorDossierType}
<blocking>Y</blocking>
<wishdatetime>${#TestCase#wishdate}</wishdatetime>
<blockingcode>11</blockingcode>
<proposeddatetime>${#TestCase#ProposedDate}</proposeddatetime>
<note>Request Answer blocking ${#TestSuite#soapVersion} OK</note>
</${#TestSuite#donorSoapVersion}>
</contractterminationrequestanswer>
</body>
</message>]]]]>><![CDATA[</sch:Text>
            </sch:Message>
         </sch:Messages>
      </sch:SendMessagesRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="0408c23d-c32c-480c-b33e-7f633dc17c95"/>
            <con:assertion type="XPath Match" id="8131d7ae-9a5a-491b-aefe-ae2214c93e1b" name="XPath Match">
              <con:configuration>
                <path>declare namespace ns2='http://coin.nl/ws/schema';
//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]/text()</path>
                <content>*</content>
                <allowWildcards>true</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="8fd52b42-3f32-4928-9b32-f521197d004e" name="Script Assertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
//def groovyUtilsPro = new com.eviware.soapui.support.GroovyUtilsPro( context )

def holder = new XmlHolder( messageExchange.responseContentAsXml )
holder.namespaces["ns2"] = "http://coin.nl/ws/schema"
def transactionId = holder.getNodeValue( "//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]" )
messageExchange.modelItem.testStep.testCase.setPropertyValue("ctraTransactionId",transactionId)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#TestSuite#donorUserName}</con:username>
              <con:password>${#TestSuite#donorPassWord}</con:password>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_ST Table CTRA" id="b5d177f4-8332-4224-9e77-99a6c6724fbb">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_transactions 
where st_transaction_id = '${#TestCase#ctraTransactionId}'</con:query>
          <con:assertion type="Simple Contains" name="Contains: Contains" id="cce0fb3e-4b85-4ba4-a7be-1dfa2e40d69e">
            <con:configuration>
              <token>Results</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify TransactionId" id="0314e1fa-b1cb-4932-bba8-55dd87029a85">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_TRANSACTION_ID[1]</path>
              <content>${#TestCase#ctraTransactionId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify ST_SEND_RECEIVED" id="9db0e630-c611-4fc1-b0bc-fb6028a6a7c3">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_SEND_RECEIVED[1]</path>
              <content>received</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" name="Contains: Contain message Type" id="85caea84-7bde-4674-9d00-009229cb7411">
            <con:configuration>
              <token>contractterminationrequestanswer</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple NotContains" name="NotContains: Exception" id="aa4bbca5-9624-413e-9efd-d79347941338">
            <con:configuration>
              <token>Exception</token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>true</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script: assert node [ID]" id="919aa515-934c-4b10-bd9d-dcd08c81b41c">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctraId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="13a13fe3-57f1-4005-b168-2f8c06ded06d" name="Xpath: st_message &lt;/ctra>">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_MESSAGE[1]</path>
              <content>*&lt;/contractterminationrequestanswer>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="e6cbfc0a-65ae-41bf-bcc6-dedd3e81b9e6" name="Xpath: assert UserIP" disabled="true">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_IP/text()</path>
              <content>${#Project#UserIP}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="dd9068a7-789a-4eba-978a-c7e0c4bc9227" name="Xpath: assert UserName">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_NAME/text()</path>
              <content>${#TestSuite#donorUserName}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="146aa1d0-f113-43f8-90e9-52a7fdd67174" name="Xpath: assert TechSender">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_TECHNICAL_SENDER/text()</path>
              <content>${#TestSuite#donor}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Wait For Poller 2" id="29ac55c5-231c-4beb-ad3c-e27644942ae3">
        <con:settings/>
        <con:config>
          <delay>${#TestSuite#PollTime}</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_RSXM Table_CTRA" id="d85d2c5f-ace9-42c4-8571-48ec28c676cf">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select RSXM_STATUS from overstappen.soap_transactions st, overstappen.raw_soap_xml_messages sxm 
where st.id=rsxm_st_id and st.st_transaction_id = '${#TestCase#ctraTransactionId}'</con:query>
          <con:assertion type="Simple Contains" name="Contains: Contains" id="6f5c48fb-8cde-4644-a4bb-7eb10db16d15">
            <con:configuration>
              <token>Results</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple NotContains" name="NotContains: Exception" id="f38c5ce3-b090-4b36-863b-3601744c94ab">
            <con:configuration>
              <token>Exception</token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>true</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: XPath Match" id="14d90270-6f91-4150-993a-d24f2adbd507">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/RSXM_STATUS[1]</path>
              <content>Done</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="cea1fa83-c89d-4f05-94d8-eeddb7321cc5" name="Script: SaveRSXM_DM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/RSXM_DM_ID[1]", "ctrDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="a9809911-3ce3-4658-a1af-5a8aefbe56da" name="Script: SaveRSXM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctraRSXMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table 1" id="05b229b1-27b4-4898-b5e4-4bddc5baf3cf">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier 
where id='${#TestCase#ctdId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [ST_TRANSACTION_ID]" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//CTD_SWITCHID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_dossier_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_DOSSIER_STATUS</path>
              <content>Blocked</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_process_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_PROCESS_STATUS</path>
              <content>Request Answer Blocking</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="f1634f5b-7b26-4777-9ee7-2012c2678c07" name="Script: assert ion">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def ModifiedDate = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/MODIFIEDDATE[1]", "ModifiedDate");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTRA" id="62ff4e0d-b10e-4090-98ba-3012c1aa6f10">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where dm_ctd_id = ${#TestCase#ctdId} 
and dm_mst_id=3 
order by createddate desc</con:query>
          <con:assertion type="XQuery Match" id="40cc6fa1-0d78-43c5-a10b-f043ddf625c6" name="XQuery Match">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/IT_INTERFACE_TYPE[1]</path>
              <content>*${#TestSuite#donorSoapVersion}*</content>
              <allowWildcards>true</allowWildcards>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="ecb68636-4d6a-490a-b1d6-bab967b8d4fe" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/ID/text()</path>
              <content>${#TestCase#ctrDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="eea36d1d-1e51-487c-a8f2-ac2c22426438" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctraDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:setupScript>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import groovy.time.TimeCategory
def today = new Date() 
def now = String.format('%tFT%&lt;tT', new Date() )
def wishdate = today 
use(TimeCategory) {
	   wishdate = wishdate + 1.day
}
def wishdatestr = wishdate.format("yyyy-MM-dd'T'HH:mm:ss")
testRunner.testCase.setPropertyValue("Now",now)
testRunner.testCase.setPropertyValue("wishDate",wishdatestr)
String contractId = funcHandle.getRandomString()
testRunner.testCase.setPropertyValue("contractId",contractId)
Calendar cal = Calendar.getInstance()
cal.setTime(today)
cal.add(Calendar.YEAR, 1)
def proposeddate = cal.getTime()
def guiproposeddate =proposeddate.format("yyyy-MM-dd'T'HH:mm:ss")
testRunner.testCase.setPropertyValue("ProposedDate",guiproposeddate)</con:setupScript>
      <con:tearDownScript/>
      <con:properties/>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>122d3297-f22d-449f-ac52-c46f1bfb714e</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="B2.1. CTR-CTRA blocking 11_Past" searchProperties="true" id="2ff2778a-9b4a-4e7e-b210-08618a38f573" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:settings>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">1000</con:setting>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting>
      </con:settings>
      <con:testStep type="request" name="CTR-Sunny Day" id="28750d39-a934-4f25-9538-d657776692f5">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>CompWebserviceSoap11</con:interface>
          <con:operation>SendMessages</con:operation>
          <con:request name="CTR-Sunny Day" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordText" id="3aa22f8f-37c1-4ea2-ba88-b80068a3761f">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#SoapUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="http://coin.nl/ws/schema">\r
   <soapenv:Header/>
   <soapenv:Body>
      <sch:SendMessagesRequest>
         <sch:Sender>${#TestSuite#recipient}</sch:Sender>
         <sch:Messages>
            <sch:Message>
               <sch:Text><![CDATA[<?xml version="1.0"?>
<message xmlns="http://www.coin.nl/Overstappen_MESSAGES">
<header>
<receiver>
<!--Optional:-->
<networkoperator>${#TestSuite#donor}</networkoperator>
<!--Optional:-->
<serviceprovider>${#TestSuite#donor}</serviceprovider>
</receiver>
<sender>
<!--Optional:-->
<networkoperator>${#TestSuite#recipient}</networkoperator>
<!--Optional:-->
<serviceprovider>${#TestSuite#recipient}</serviceprovider>
</sender>
<!--Optional:-->
<messageid>${#TestSuite#recipient}-${#TestCase#contractId}-01</messageid>
<timestamp>${#TestSuite#TimestampNOW}</timestamp>
</header>
<body>
<contractterminationrequest>
<${#TestSuite#soapVersion}>
<dossierid>${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01</dossierid>
<!--Optional:-->
<recipientserviceprovider>${#TestSuite#recipient}</recipientserviceprovider>
<!--Optional:-->
<recipientnetworkoperator>${#TestSuite#recipient}</recipientnetworkoperator>
<!--Optional:-->
<donornetworkoperator>${#TestSuite#donor}</donornetworkoperator>
<!--Optional:-->
<donorserviceprovider>${#TestSuite#donor}</donorserviceprovider>
<wishdatetime>${#TestCase#wishdate}</wishdatetime>
${#TestSuite#dossierType}
${#TestSuite#compensationOK}
<name>COIN</name>
<addressblock>
 	<postcode>1389SS</postcode>
	<housenr>99999</housenr>
</addressblock>
<numberseries>
     <start>0173112233</start>
     <end>0173112233</end>
</numberseries>
<validationblock>
    <name>contractid</name>
    <value>1-${#TestCase#contractID}</value>
 </validationblock>
<note>${#TestSuite#soapVersion} expect ${#TestSuite#donorSoapVersion}-linenumber ${#TestSuite#lineNumber}</note>
</${#TestSuite#soapVersion}>
</contractterminationrequest>
</body>
</message>]]]]>><![CDATA[</sch:Text>
            </sch:Message>
         </sch:Messages>
      </sch:SendMessagesRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="XPath Match" name="Match content of [ns2:TransactionId] using RegEx" id="1c471417-807a-4012-a734-b2dd5be94c8f">
              <con:configuration>
                <path>declare namespace ns2='http://coin.nl/ws/schema';
//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]/text()</path>
                <content>*</content>
                <allowWildcards>true</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" name="Check count of [ns2:TransactionId]" id="345c96a3-89a0-476e-9875-b0c18e04ef5b">
              <con:configuration>
                <path>declare namespace ns2='http://coin.nl/ws/schema';
count( //ns2:SendMessagesResponse/ns2:TransactionId)</path>
                <content>1</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert node [ns2:TransactionId]" id="63f77b9d-d209-4d74-ad56-a26982ab75c5">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
//def groovyUtilsPro = new com.eviware.soapui.support.GroovyUtilsPro( context )

def holder = new XmlHolder( messageExchange.responseContentAsXml )
holder.namespaces["ns2"] = "http://coin.nl/ws/schema"
def transactionId = holder.getNodeValue( "//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]" )
messageExchange.modelItem.testStep.testCase.setPropertyValue("transactionId",transactionId)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#TestSuite#recipientUserName}</con:username>
              <con:password>${#TestSuite#recipientPassWord}</con:password>
              <con:domain xsi:nil="true"/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://coin.nl/SendMessages"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_ST Table" id="ee79bbe9-0c94-4d1e-b243-91789a3d7344">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_transactions 
where st_transaction_id = '${#TestCase#transactionId}'</con:query>
          <con:assertion type="Simple Contains" name="Contains: assert Results" id="cce0fb3e-4b85-4ba4-a7be-1dfa2e40d69e">
            <con:configuration>
              <token>Results</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify TransactionId" id="0314e1fa-b1cb-4932-bba8-55dd87029a85">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_TRANSACTION_ID[1]</path>
              <content>${#TestCase#transactionId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify ST_SEND_RECEIVED" id="9db0e630-c611-4fc1-b0bc-fb6028a6a7c3">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_SEND_RECEIVED[1]</path>
              <content>received</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" name="Contains: Contain message Type" id="85caea84-7bde-4674-9d00-009229cb7411">
            <con:configuration>
              <token>&amp;lt;contractterminationrequest&amp;gt;</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple NotContains" name="NotContains: Exception" id="aa4bbca5-9624-413e-9efd-d79347941338">
            <con:configuration>
              <token>Exception</token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>true</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="77af631e-a991-48c5-b7c6-43b4c54de0ad" name="Script: store SoapTransaction.id">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "Id");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="f00e1048-7c2d-4cb8-9970-c6ec60702fbf" name="Xpath: assert UserIP" disabled="true">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_IP/text()</path>
              <content>${#Project#UserIP}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="dde19696-f766-4463-a870-488a7e030ded" name="Xpath: assert UserName">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_NAME/text()</path>
              <content>${#TestSuite#recipientUserName}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="08b3232f-0ac4-49aa-bcfd-ae7649e4df89" name="Xpath: assert TechSender">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_TECHNICAL_SENDER/text()</path>
              <content>${#TestSuite#recipient}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Wait For Poller" id="6060d1f4-f791-422b-99e0-a46a991a01c8">
        <con:settings/>
        <con:config>
          <delay>${#TestSuite#PollTime}</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_RSXM Table_CTR" id="152dd719-acfd-4cd9-bf8b-9434666df751">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.raw_soap_xml_messages where rsxm_st_id = '${#TestCase#Id}'</con:query>
          <con:assertion type="Simple Contains" name="Contains: Contains" id="6f5c48fb-8cde-4644-a4bb-7eb10db16d15">
            <con:configuration>
              <token>Results</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple NotContains" name="NotContains: Exception" id="f38c5ce3-b090-4b36-863b-3601744c94ab">
            <con:configuration>
              <token>Exception</token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>true</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: XPath Match" id="14d90270-6f91-4150-993a-d24f2adbd507">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/RSXM_STATUS[1]</path>
              <content>Done</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="724f2a6f-b424-4e65-8b5d-c9e3bc910187" name="Script: SaveRSXM_DM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/RSXM_DM_ID[1]", "ctrDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="00592fdc-0b9e-4b4b-9393-c2891e27932e" name="Script: SaveRSXM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctrRSXMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table_CTR" id="4de27b4f-85ff-4f0c-9ba6-02baaa4ec465">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier where 
ctd_switchid = '${#TestSuite#Recipient}-${#TestSuite#Donor}-${#TestCase#ContractId}-01'</con:query>
          <con:assertion type="XPath Match" name="Xpath: assert CTD_DOSSIER_STATUS]" id="ac17d9f6-9653-435c-bd0c-9af6917f2aa6">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_DOSSIER_STATUS[1]/text()</path>
              <content>Pending</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert CTD_PROCESS_STATUS]" id="ede8cc08-99ab-46ca-baf4-97e9f0895428">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_PROCESS_STATUS[1]/text()</path>
              <content>Request</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: assert ion ctd_id">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def ctdid = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctdId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTR" id="fd322bf7-92d6-479e-8651-84f55f8b8772">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where dm_ctd_id = ${#TestCase#ctdId} 
and dm_mst_id=1 
order by createddate desc</con:query>
          <con:assertion type="XPath Match" id="22e366c7-6a4e-4580-9e30-c5cb86194c3d" name="Xpath: SoapVersion">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/IT_INTERFACE_TYPE[1]</path>
              <content>*${#TestSuite#soapVersion}*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="e5cc695a-0adf-46fb-8259-171f32b4e7f3" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/ID/text()</path>
              <content>${#TestCase#ctrDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="fd8a5956-c953-41c0-9087-da68aa617460" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctrDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_CheckOutGoingMsgType" id="a54b0c6c-bc89-46e4-9a66-0ad1e7065e50">
        <con:settings/>
        <con:config>
          <script>def outtype = testRunner.testCase.testSuite.getPropertyValue("recipientOutMsg")

if (outtype == 'EMAIL') {
    	  testRunner.gotoStepByName( "JDBC _SXM Table_NoRecord")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Wait For Send Poller" id="66ace9fa-2c73-4147-92ab-39fce5cc3850">
        <con:settings/>
        <con:config>
          <delay>${#TestSuite#PollTime}</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_ST Table_Send" id="1e94d0c8-1314-4009-a329-74d91083ffa4">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_transactions 
where st_sender='${#TestSuite#recipient}' and st_receiver='${#TestSuite#donor}' and st_send_received='SEND' and id>${#TestCase#Id}
and st_message like '%${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01%'
order by id asc</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [ST_TRANSACTION_ID]" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//ST_TRANSACTION_ID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify SEND Status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//ST_SEND_RECEIVED</path>
              <content>SEND</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" name="Contains: Contains" id="a1e1b0ed-fff7-4f8c-9eba-dee62ae7b198">
            <con:configuration>
              <token>contractterminationrequest</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="399e0deb-1a5b-410a-a8d3-3bdd1a096037" name="Xpath: XPath Match">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_MESSAGE[1]</path>
              <content>*&lt;/contractterminationrequest>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="b4c15b58-612c-4b38-8bd2-2043658c0f44" name="Script: SaveST_SXM_ID" disabled="true">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ST_SXM_ID[1]", "stSXMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_CTR" id="c1ca54ca-9b9d-4adf-be3d-271417534ead">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where
sxm_xml_message like '%${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01%'
and sxm_xml_message like '%/${#TestSuite#donorSoapVersion}%'
and sxm_xml_message_type = 'Request'
and sxm_sender = '${#TestSuite#recipient}'
and sxm_receiver = '${#TestSuite#donor}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [ST_TRANSACTION_ID]" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//ID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" name="Contains: Contains" id="a1e1b0ed-fff7-4f8c-9eba-dee62ae7b198">
            <con:configuration>
              <token>contractterminationrequest</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="eb3bff08-4703-424d-b8ab-94a78fdd5221" name="Xpath: XPath match wishdatetime">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/SXM_XML_MESSAGE[1]</path>
              <content>*&lt;wishdatetime>${#TestCase#wishDate}&lt;/wishdatetime>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="0556b0e2-dbbc-4407-aae9-71a1337500f5" name="Xpath: header sender receiver">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/SXM_XML_MESSAGE[1]</path>
              <content><![CDATA[*<header>
      <receiver>
                  <networkoperator>${#TestSuite#donor}</networkoperator>
         	              <serviceprovider>${#TestSuite#donor}</serviceprovider>
               </receiver>
      <sender>
                  <networkoperator>${#TestSuite#recipient}</networkoperator>
         		          <serviceprovider>${#TestSuite#recipient}</serviceprovider>
               </sender>*]]></content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="eca6d213-b347-4cf5-9ee0-97d9c5a179f1" name="Xpath: contractterminationrequest tag">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/SXM_XML_MESSAGE[1]</path>
              <content>*&lt;/contractterminationrequest>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="ea4839dd-8573-42d1-8a45-c2c97ff63e21" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/SXM_DM_ID/text()</path>
              <content>${#TestCase#ctrDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="556461c2-9ef6-45cb-ae3a-8c1e73f857ad" name="Xpath: assert SXMID" disabled="true">
            <con:configuration>
              <path>/Results/ResultSet/Row/ID/text()</path>
              <content>${#TestCase#stSXMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_CheckOutGoingMsgType1" id="1a0fc397-5b0e-49d5-b3a5-b902e5e3c1c9">
        <con:settings/>
        <con:config>
          <script>def outtype = testRunner.testCase.testSuite.getPropertyValue("recipientOutMsg")

if (outtype == 'SOAP') {
    	  testRunner.gotoStepByName( "CTRA-blocking")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_NoRecord_CTR" id="6a6abf3f-48b1-4f06-a801-c38e65213edb">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where
sxm_xml_message like '%${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01%'
and sxm_xml_message_type = 'Request'
and sxm_sender = '${#TestSuite#recipient}'
and sxm_receiver = '${#TestSuite#donor}'</con:query>
          <con:assertion type="JDBC Status" id="0676eb61-69b4-4d97-bdeb-19df0009bcb6" name="JDBC Status OK"/>
          <con:assertion type="XPath Match" id="b66f6131-4089-4c43-82ad-1576ce9d6947" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>0</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="CTRA-blocking" id="4baa21a3-74c5-4afa-baf6-68c7c5346429">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>CompWebserviceSoap11</con:interface>
          <con:operation>SendMessages</con:operation>
          <con:request name="CTRA-blocking" id="83d7229a-676a-4c41-81cc-3429f324fea1" wssPasswordType="PasswordText">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#SoapUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="http://coin.nl/ws/schema">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:SendMessagesRequest>
         <sch:Sender>${#TestSuite#donor}</sch:Sender>
         <sch:Messages>
            <sch:Message>
               <sch:Text><![CDATA[<?xml version="1.0"?>
<message xmlns="http://www.coin.nl/Overstappen_MESSAGES">
<header>
<receiver>
<!--Optional:-->
<networkoperator>${#TestSuite#recipient}</networkoperator>
<!--Optional:-->
<serviceprovider>${#TestSuite#recipient}</serviceprovider>
</receiver>
<sender>
<!--Optional:-->
<networkoperator>${#TestSuite#donor}</networkoperator>
<!--Optional:-->
<serviceprovider>${#TestSuite#donor}</serviceprovider>
</sender>
<!--Optional:-->
<messageid>${#TestSuite#recipient}-${#TestCase#contractId}-001</messageid>
<timestamp>${#TestSuite#TimestampNOW}</timestamp>
</header>
<body>
<contractterminationrequestanswer>
<${#TestSuite#donorSoapVersion}>
<dossierid>${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01</dossierid>
${#TestSuite#donorDossierType}
<blocking>Y</blocking>
<wishdatetime>${#TestCase#wishdate}</wishdatetime>
<blockingcode>11</blockingcode>
<proposeddatetime>${#TestCase#ProposedDate}</proposeddatetime>
<note>Request Answer blocking ${#TestSuite#soapVersion} OK</note>
</${#TestSuite#donorSoapVersion}>
</contractterminationrequestanswer>
</body>
</message>]]]]>><![CDATA[</sch:Text>
            </sch:Message>
         </sch:Messages>
      </sch:SendMessagesRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="0408c23d-c32c-480c-b33e-7f633dc17c95"/>
            <con:assertion type="XPath Match" id="8131d7ae-9a5a-491b-aefe-ae2214c93e1b" name="XPath Match">
              <con:configuration>
                <path>declare namespace ns2='http://coin.nl/ws/schema';
//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]/text()</path>
                <content>*</content>
                <allowWildcards>true</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="8fd52b42-3f32-4928-9b32-f521197d004e" name="Script Assertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
//def groovyUtilsPro = new com.eviware.soapui.support.GroovyUtilsPro( context )

def holder = new XmlHolder( messageExchange.responseContentAsXml )
holder.namespaces["ns2"] = "http://coin.nl/ws/schema"
def transactionId = holder.getNodeValue( "//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]" )
messageExchange.modelItem.testStep.testCase.setPropertyValue("ctraTransactionId",transactionId)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#TestSuite#donorUserName}</con:username>
              <con:password>${#TestSuite#donorPassWord}</con:password>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_ST Table CTRA" id="992e4163-546c-4086-9e25-26e0b7e5c811">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_transactions 
where st_transaction_id = '${#TestCase#ctraTransactionId}'</con:query>
          <con:assertion type="Simple Contains" name="Contains: Contains" id="cce0fb3e-4b85-4ba4-a7be-1dfa2e40d69e">
            <con:configuration>
              <token>Results</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify TransactionId" id="0314e1fa-b1cb-4932-bba8-55dd87029a85">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_TRANSACTION_ID[1]</path>
              <content>${#TestCase#ctraTransactionId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify ST_SEND_RECEIVED" id="9db0e630-c611-4fc1-b0bc-fb6028a6a7c3">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_SEND_RECEIVED[1]</path>
              <content>received</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" name="Contains: Contain message Type" id="85caea84-7bde-4674-9d00-009229cb7411">
            <con:configuration>
              <token>contractterminationrequestanswer</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple NotContains" name="NotContains: Exception" id="aa4bbca5-9624-413e-9efd-d79347941338">
            <con:configuration>
              <token>Exception</token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>true</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script: assert node [ID]" id="919aa515-934c-4b10-bd9d-dcd08c81b41c">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctraId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="13a13fe3-57f1-4005-b168-2f8c06ded06d" name="Xpath: st_message &lt;/ctra>">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_MESSAGE[1]</path>
              <content>*&lt;/contractterminationrequestanswer>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b460b079-97ba-49ef-b6cf-e09fd517b697" name="Xpath: assert UserIP" disabled="true">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_IP/text()</path>
              <content>${#Project#UserIP}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="634e5f1e-7e35-4c09-9d38-8b68917ffd93" name="Xpath: assert UserName">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_NAME/text()</path>
              <content>${#TestSuite#donorUserName}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="767b5bd9-9cca-494c-873d-f916199448cd" name="Xpath: assert TechSender">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_TECHNICAL_SENDER/text()</path>
              <content>${#TestSuite#donor}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Wait For Poller 2" id="be02f06c-d95c-40e4-b81e-5776cb9d5683">
        <con:settings/>
        <con:config>
          <delay>${#TestSuite#PollTime}</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_RSXM Table_CTRA" id="e49db09d-d73e-4c26-a4bf-abb29aadcfc5">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select RSXM_STATUS from overstappen.soap_transactions st, overstappen.raw_soap_xml_messages sxm 
where st.id=rsxm_st_id and st.st_transaction_id = '${#TestCase#ctraTransactionId}'</con:query>
          <con:assertion type="Simple Contains" name="Contains: Contains" id="6f5c48fb-8cde-4644-a4bb-7eb10db16d15">
            <con:configuration>
              <token>Results</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple NotContains" name="NotContains: Exception" id="f38c5ce3-b090-4b36-863b-3601744c94ab">
            <con:configuration>
              <token>Exception</token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>true</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: XPath Match" id="14d90270-6f91-4150-993a-d24f2adbd507">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/RSXM_STATUS[1]</path>
              <content>Failed</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="af714072-0c32-4529-86b0-3d51b4fb949f" name="Script: SaveRSXM_DM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/RSXM_DM_ID[1]", "ctrDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="1f32544c-77c3-4d79-acc6-c1cad7d5fec0" name="Script: SaveRSXM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctraRSXMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table 1" id="3b2c5911-0f43-439d-88cf-af0e591f1146">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier 
where id='${#TestCase#ctdId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [ST_TRANSACTION_ID]" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//CTD_SWITCHID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_dossier_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_DOSSIER_STATUS</path>
              <content>Pending</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_process_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_PROCESS_STATUS</path>
              <content>Request</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="f1634f5b-7b26-4777-9ee7-2012c2678c07" name="Script: assert ion">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def ModifiedDate = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/MODIFIEDDATE[1]", "ModifiedDate");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTRA" id="57b17028-cc1f-4e37-a4cd-2ca225a185ed">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where dm_ctd_id = ${#TestCase#ctdId} 
and dm_mst_id=3 
order by createddate desc</con:query>
          <con:assertion type="Simple Contains" id="1f7e0d13-4124-4348-a617-48e6a27c86f8" name="Contains: Contains">
            <con:configuration>
              <token>&lt;ResultSet fetchSize="0"</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="7f93992c-d5d3-4157-a4ac-9c0f3719153a" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/ID/text()</path>
              <content>${#TestCase#ctrDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="a51deaf5-0bb3-4dfb-a31a-5143c0f04f82" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctraDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:setupScript>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import groovy.time.TimeCategory
def today = new Date() 
def now = String.format('%tFT%&lt;tT', new Date() )
def wishdate = today 
use(TimeCategory) {
	   wishdate = wishdate + 1.day
}
def wishdatestr = wishdate.format("yyyy-MM-dd'T'HH:mm:ss")
testRunner.testCase.setPropertyValue("Now",now)
testRunner.testCase.setPropertyValue("wishDate",wishdatestr)
String contractId = funcHandle.getRandomString()
testRunner.testCase.setPropertyValue("contractId",contractId)
Calendar cal = Calendar.getInstance()
cal.setTime(today)
cal.add(Calendar.YEAR, -1)
def proposeddate = cal.getTime()
def guiproposeddate =proposeddate.format("yyyy-MM-dd'T'HH:mm:ss")
testRunner.testCase.setPropertyValue("ProposedDate",guiproposeddate)</con:setupScript>
      <con:tearDownScript/>
      <con:properties/>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>122d3297-f22d-449f-ac52-c46f1bfb714e</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:properties>
      <con:property>
        <con:name>PollTime</con:name>
        <con:value>2000</con:value>
      </con:property>
      <con:property>
        <con:name>DBHostname</con:name>
        <con:value>127.0.0.1</con:value>
      </con:property>
      <con:property>
        <con:name>DBPort</con:name>
        <con:value>8088</con:value>
      </con:property>
      <con:property>
        <con:name>DBUser</con:name>
        <con:value>comp</con:value>
      </con:property>
      <con:property>
        <con:name>DBPassword</con:name>
        <con:value>comp</con:value>
      </con:property>
      <con:property>
        <con:name>DBDatabase</con:name>
        <con:value>compv3_4</con:value>
      </con:property>
      <con:property>
        <con:name>TimestampNOW</con:name>
        <con:value>${=String.format('%tFT%&lt;tT', new Date())}</con:value>
      </con:property>
      <con:property>
        <con:name>lineNumber</con:name>
        <con:value>0</con:value>
      </con:property>
      <con:property>
        <con:name>testdatafile</con:name>
        <con:value>soaptosoap.csv</con:value>
      </con:property>
      <con:property>
        <con:name>browser</con:name>
        <con:value>firefox</con:value>
      </con:property>
    </con:properties>
    <con:setupScript>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
import org.apache.commons.lang.RandomStringUtils
import groovy.time.TimeCategory
import nl.coin.Selenium.*;
def directory = groovyUtils.projectPath + "/"
System.setProperty("projectfiledir", directory)
def seleniumHandle = new SeleniumActions();
def funcHandle = new ReadymadeFunctions();
def Line = funcHandle.getTestDataAndIncreaseLinenumber(testSuite, directory);
String[] propData = Line.split(";")
funcHandle.setRecipientAndDonorSoapCredentials(seleniumHandle, testSuite, directory, propData[0], propData[1]);
testSuite.setPropertyValue("soapVersion",propData[2])
testSuite.setPropertyValue("dossierType",propData[3])
testSuite.setPropertyValue("compensationOK",propData[4])
import groovy.sql.Sql;
def  con = funcHandle.createDBConObject(testSuite);
def recepientDetails = funcHandle.setProperty4mDB(testSuite, con, "select spr_code, it_interface_type,business_gui_only from overstappen.service_provider inner join overstappen.interface_type on service_provider.spr_request_it_id = interface_type.id where service_provider.spr_code = '"+ propData[0]+"'", ["business_gui_only", "it_interface_type"] as String[], ["recipientbgo", "recipientif"] as String[]);
def donorDetails = funcHandle.setProperty4mDB(testSuite, con, "select spr_code, it_interface_type,business_gui_only from overstappen.service_provider inner join overstappen.interface_type on service_provider.spr_request_it_id = interface_type.id where service_provider.spr_code = '"+ propData[1]+"'", ["business_gui_only", "it_interface_type"] as String[], ["donorbgo", "donorif"] as String[]);
testSuite.setPropertyValue( "businessGuiOnly" , donorDetails[0])
def donorsoap = funcHandle.getDonorSoapVersionS2SAndSetProperty(testSuite, donorDetails[1], propData[3], "donorSoapVersion");
def donorbusiness = funcHandle.getDonorDossierTypeS2SAndSetProperty(testSuite, donorDetails[1], propData[3], "donorDossierType");
def donorMessage = funcHandle.getMessageTypeAndSetProperty(testSuite, donorDetails[1], propData[3], donorDetails[0], "donorMessage");
funcHandle.setProperty4mDB(testSuite, con, "select id from overstappen.service_provider where spr_code='"+ propData[0]+"'", "id", "recipientId")
funcHandle.setProperty4mDB(testSuite, con, "select id from overstappen.service_provider where spr_code='"+ propData[1]+"'", "id", "donorId");
funcHandle.getOutgoingMsgTypeAndSetProperty(testSuite, propData[3], recepientDetails[0], recepientDetails[1], "donorOutMsg");
funcHandle.getOutgoingMsgTypeAndSetProperty(testSuite, propData[3], donorDetails[0], donorDetails[1], "recipientOutMsg");
con.close()</con:setupScript>
    <con:tearDownScript/>
    <con:reportParameters/>
  </con:testSuite>
  <con:testSuite name="OV-21Gui" id="fd8c3bb8-4fe8-4697-b75b-b221f0bfcb7d">
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="1.1 Business CTR-Business CTRA-Wishdate-Todays date Proposed date-Todays date" searchProperties="true" id="ff362f8e-b294-4660-a05c-c9a7b73d44b8" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:settings>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">1000</con:setting>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting>
      </con:settings>
      <con:testStep type="groovy" name="Sel_CTR" id="310f3f1e-4db8-47e2-bcd6-b2ef7d7bdaab">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.*;

def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def funcHandle = new ReadymadeFunctions();

def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser")
def recipient = testRunner.testCase.testSuite.getPropertyValue("recipient")
def donor = testRunner.testCase.testSuite.getPropertyValue("donor")
def contractId = testRunner.testCase.getPropertyValue("contractId")
def dossierType = testRunner.testCase.testSuite.getPropertyValue("dossierType")
def wishDate = testRunner.testCase.getPropertyValue("wishDate")

def projectName = testRunner.testCase.testSuite.project.name
def testSuiteName = testRunner.testCase.testSuite.name
def testCaseName = testRunner.testCase.name
def testStepName = context.getCurrentStep().getLabel()

log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName)

try {
	def switchId = funcHandle.sendCTR(seleniumHandle, javaHandle, browser, guiUrl, recipient, "TP10", "&lt;business>Y&lt;/business>", "COIN", "1389SS", "99999", null, false, contractId, null, wishDate, null, null, null);

	testRunner.testCase.setPropertyValue("switchId",switchId);
} catch (Exception e) {
	testRunner.fail(e.getClass().getSimpleName());
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table_CTR" id="496c84bf-611c-4147-9a79-2e4501698aa0">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier where 
ctd_contractid = '${#TestCase#contractId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: assert CTD_DOSSIER_STATUS]" id="ac17d9f6-9653-435c-bd0c-9af6917f2aa6">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_DOSSIER_STATUS[1]/text()</path>
              <content>Pending</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [CTD_DOSSIER_STATUS]" id="d34e8994-e69d-4e40-b3f2-4e8d12c2cca7">
            <con:configuration>
              <path>exists( //Results/ResultSet/Row/CTD_DOSSIER_STATUS)</path>
              <content>true</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert CTD_PROCESS_STATUS]" id="ede8cc08-99ab-46ca-baf4-97e9f0895428">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_PROCESS_STATUS[1]/text()</path>
              <content>Request</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: assert ion ctd_id switchid">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def ctdid = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctdId");
def switchid = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/CTD_SWITCHID[1]", "switchId");
log.info("Testcase dossierid: " + switchid)</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTR" id="a1041605-584a-449b-a3e4-acd6eb9c4898">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where dm_ctd_id = ${#TestCase#ctdId} 
and dm_mst_id=1 
order by createddate desc</con:query>
          <con:assertion type="XPath Match" id="22e366c7-6a4e-4580-9e30-c5cb86194c3d" name="Xpath: SoapVersion">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/IT_INTERFACE_TYPE[1]</path>
              <content>*${#TestSuite#soapVersion}*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="91d929d5-dede-406a-bcba-2169f572f11f" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/ID/text()</path>
              <content>${#TestCase#ctrDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="af7ee83c-0eb1-4d6b-b56e-6aa30ca68ce7" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctrDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_CheckOutGoingMsgType" id="ed0a617d-42ca-411b-8b13-9622613ed2be">
        <con:settings/>
        <con:config>
          <script>def dossierType = testRunner.testCase.getPropertyValue( "dossierType" )
def busguionly = testRunner.testCase.getPropertyValue( "businessGuiOnly" )
if (dossierType == '&lt;business>Y&lt;/business>' &amp;&amp; busguionly == 'true'){
    	  testRunner.gotoStepByName( "JDBC_ST Table_NoSend")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_CheckOutGoingMsgType1" id="9469fc20-53b2-42c8-970e-b0926353730c">
        <con:settings/>
        <con:config>
          <script>def outtype = testRunner.testCase.testSuite.getPropertyValue("recipientOutMsg")

if (outtype == 'SOAP') {
    	  testRunner.gotoStepByName( "Sel-CTRA Blocking 11")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_ST Table_NoSend" id="288380c2-233b-466a-b5b9-aeef158b7747">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_transactions 
where st_sender='${#TestSuite#recipient}' and st_receiver='${#TestSuite#donor}' and st_send_received='SEND' and st_message like '%${#TestCase#switchId}%'</con:query>
          <con:assertion type="JDBC Status" id="cc45d6ef-2316-4378-b582-f321b46f2cc1" name="JDBC Status"/>
          <con:assertion type="Simple NotContains" id="9dc2a7bb-7c16-4bd1-980b-734fceb80acc" name="NotContains: Not Contains" disabled="true">
            <con:configuration>
              <token>&lt;Row rowNumber="1"></token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Sel-CTRA Blocking 11" id="f619a025-6c0b-474c-ba17-60812f1da567">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.SeleniumActions;
import nl.coin.Selenium.JavaActions;
def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser")
def recipient = testRunner.testCase.testSuite.getPropertyValue("recipient")
def donor = testRunner.testCase.testSuite.getPropertyValue("donor")
def contractId = testRunner.testCase.getPropertyValue("contractId")
def donorDossierType = testRunner.testCase.testSuite.getPropertyValue("donorDossierType")
def projectName = testRunner.testCase.testSuite.project.name
def testSuiteName = testRunner.testCase.testSuite.name
def testCaseName = testRunner.testCase.name
def testStepName = context.getCurrentStep().getLabel()
def switchId = testRunner.testCase.getPropertyValue("switchId")
//def dossierID = javaHandle.getDossierID(recipient, donor, contractId)
//log.info dossierID
log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName)
def driver = seleniumHandle.openBrowser(browser);
//Login to application
log.info seleniumHandle.browseURL(guiUrl);
log.info(driver.getTitle());
def sampleArray = seleniumHandle.getCredentials(donor)
log.info seleniumHandle.enterData("HomePage","userName", sampleArray[0]);
log.info seleniumHandle.enterData("HomePage","passWord", sampleArray[1]);
//log.info seleniumHandle.clickObject("HomePage","8HrsSession");
log.info seleniumHandle.clickObject("HomePage","login");
log.info seleniumHandle.clickObject("HomePage","dossiers");
log.info seleniumHandle.clickObject("HomePage","SearchTab");
log.info seleniumHandle.enterData("HomePage","DossierID",switchId);
sleep(1000)
log.info seleniumHandle.clickObject("HomePage","SearchButton");
log.info seleniumHandle.clickObject("HomePage","ViewDetailsSearch");
log.info seleniumHandle.enterDataSelectDropDown("HomePage","businessType", "Business");	
log.info seleniumHandle.enterDataSelectDropDownByValue("HomePage","blockingCode", "11");
//Need to add verify element present for blocking code 11
log.info seleniumHandle.enterData("HomePage","requestAnswerNote",switchId);
sleep(10000)
log.info seleniumHandle.clickObject("HomePage","CTRAProposedDateIcon");
def proposeddate = testRunner.testCase.getPropertyValue("proposedDate")
def onlyDate = javaHandle.getDateFromFormat(proposeddate, "yyyy-MM-dd")
def monthYear = javaHandle.convertDateFormat(proposeddate, "yyyy-MM-dd", "MMMM yyyy")
//move calander to required month &amp; year
log.info seleniumHandle.moveCalenderToMonth("HomePage", "CTRAProposedDateRightIcon", "HomePage", "CTRAProposedDateCalHeader", monthYear)
//Click on the date
log.info seleniumHandle.clickObject("xpath","//table[@id='errorBlockingCode11ProposedDateDpJs']//td[contains(@class,'selectable')]//a[text()="+onlyDate+"]", true);
log.info seleniumHandle.clickObject("HomePage","sendRequestAnswer");
sleep(1000)
log.info seleniumHandle.getText("HomePage","resultMessage");
 
log.info seleniumHandle.quitBrowser();</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table 1" id="d8346828-90e3-44a8-9183-6a086e527851">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier 
where id='${#TestCase#ctdId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [CTD_SWITCHID]" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//CTD_SWITCHID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_dossier_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_DOSSIER_STATUS</path>
              <content>Blocked</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_process_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_PROCESS_STATUS</path>
              <content>Request Answer Blocking</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="f1634f5b-7b26-4777-9ee7-2012c2678c07" name="Script: assert ion">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def ModifiedDate = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/CONTRACT_TERMINATION_DOSSIER.MODIFIEDDATE[1]", "ModifiedDate");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="f7e313a5-ef5e-4f86-9240-a10a978a2c21" name="Xpath: Verify ctp_buffering" disabled="true">
            <con:configuration>
              <path>//CTD_CTP_BUFFERING</path>
              <content>t</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTRA" id="0323e754-ac1d-455d-8b81-f775888d80ab">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where dm_ctd_id = ${#TestCase#ctdId} 
and dm_mst_id=3 
order by createddate desc</con:query>
          <con:assertion type="XQuery Match" id="40cc6fa1-0d78-43c5-a10b-f043ddf625c6" name="XQuery Match">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/IT_INTERFACE_TYPE[1]</path>
              <content>GUI</content>
              <allowWildcards>true</allowWildcards>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="8bd59c50-c463-4983-a286-9c7efa9c4bbf" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/ID/text()</path>
              <content>${#TestCase#ctrDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d67b73e3-8d66-490d-9f78-88cf3523e679" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctraDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Delay0" id="dedfaeef-f3c2-4fa3-a414-a78481de3eae">
        <con:settings/>
        <con:config>
          <delay>1</delay>
        </con:config>
      </con:testStep>
      <con:setupScript>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import groovy.time.TimeCategory
import java.util.Random
def today = new Date() 
def now = String.format('%tFT%&lt;tT', new Date() )
def wishdate = today 
def wishdatestr = wishdate.format("yyyy-MM-dd'T'HH:mm:ss")
def guiwishdatestr = wishdate.format("yyyy-MM-dd")
testRunner.testCase.setPropertyValue("Now",now)
testRunner.testCase.setPropertyValue("wishDate",wishdatestr)
testRunner.testCase.setPropertyValue("guiWishDate",guiwishdatestr)
String contractId = funcHandle.getRandomString(9, "2-");
testRunner.testCase.setPropertyValue("contractId",contractId)
def proposeddate = today
def guiproposeddate =proposeddate.format("yyyy-MM-dd")
testRunner.testCase.setPropertyValue("ProposedDate",guiproposeddate)</con:setupScript>
      <con:tearDownScript/>
      <con:properties/>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>122d3297-f22d-449f-ac52-c46f1bfb714e</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="1.2 Business CTR-Business CTRA Wish date -Todays date Proposed date-Todays date+90" searchProperties="true" id="09d16936-02ff-49cc-bbb9-da5cad9e0f17" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" disabled="true">
      <con:settings>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">1000</con:setting>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting>
      </con:settings>
      <con:testStep type="groovy" name="Sel_CTR" id="a434ee20-e754-4216-93f0-31c1e4abace0">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.*;

def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def funcHandle = new ReadymadeFunctions();

def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser")
def recipient = testRunner.testCase.testSuite.getPropertyValue("recipient")
def donor = testRunner.testCase.testSuite.getPropertyValue("donor")
def contractId = testRunner.testCase.getPropertyValue("contractId")
def dossierType = testRunner.testCase.testSuite.getPropertyValue("dossierType")
def wishDate = testRunner.testCase.getPropertyValue("wishDate")

def projectName = testRunner.testCase.testSuite.project.name
def testSuiteName = testRunner.testCase.testSuite.name
def testCaseName = testRunner.testCase.name
def testStepName = context.getCurrentStep().getLabel()

log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName)

try {
	def switchId = funcHandle.sendCTR(seleniumHandle, javaHandle, browser, guiUrl, recipient, "TP10", "&lt;business>Y&lt;/business>", "COIN", "1389SS", "99999", null, false, contractId, null, wishDate, null, null, null);

	testRunner.testCase.setPropertyValue("switchId",switchId);
} catch (Exception e) {
	testRunner.fail(e.getClass().getSimpleName());
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table_CTR" id="61c0fbaf-4a9f-4644-aa97-21ac78ed78f9">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier where 
ctd_contractid = '${#TestCase#contractId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: assert CTD_DOSSIER_STATUS]" id="ac17d9f6-9653-435c-bd0c-9af6917f2aa6">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_DOSSIER_STATUS[1]/text()</path>
              <content>Pending</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [CTD_DOSSIER_STATUS]" id="d34e8994-e69d-4e40-b3f2-4e8d12c2cca7">
            <con:configuration>
              <path>exists( //Results/ResultSet/Row/CTD_DOSSIER_STATUS)</path>
              <content>true</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert CTD_PROCESS_STATUS]" id="ede8cc08-99ab-46ca-baf4-97e9f0895428">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_PROCESS_STATUS[1]/text()</path>
              <content>Request</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: assert ion ctd_id switchid">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def ctdid = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctdId");
def switchid = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/CTD_SWITCHID[1]", "switchId");
log.info("Testcase dossierid: " + switchid)</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTR" id="57df422e-1de6-43a2-b83c-e981d8cc989a">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where dm_ctd_id = ${#TestCase#ctdId} 
and dm_mst_id=1 
order by createddate desc</con:query>
          <con:assertion type="XPath Match" id="22e366c7-6a4e-4580-9e30-c5cb86194c3d" name="Xpath: SoapVersion">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/IT_INTERFACE_TYPE[1]</path>
              <content>*${#TestSuite#soapVersion}*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="792aa3c2-c318-433f-bc97-6d30f3537157" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/ID/text()</path>
              <content>${#TestCase#ctrDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="cb1f0f17-6d58-40f3-b4e2-82d4ee50c3ab" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctrDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_CheckOutGoingMsgType" id="770020c5-1a23-4255-b809-0d4adcde3d66">
        <con:settings/>
        <con:config>
          <script>def dossierType = testRunner.testCase.getPropertyValue( "dossierType" )
def busguionly = testRunner.testCase.getPropertyValue( "businessGuiOnly" )
if (dossierType == '&lt;business>Y&lt;/business>' &amp;&amp; busguionly == 'true'){
    	  testRunner.gotoStepByName( "JDBC_ST Table_NoSend")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_CheckOutGoingMsgType1" id="bb523b60-ea8d-439f-a3e6-21656878405b">
        <con:settings/>
        <con:config>
          <script>def outtype = testRunner.testCase.testSuite.getPropertyValue("recipientOutMsg")

if (outtype == 'SOAP') {
    	  testRunner.gotoStepByName( "Sel-CTRA Blocking 11")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_ST Table_NoSend" id="a5b84dfb-f743-46ee-9a4a-48e19c3920a7">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_transactions 
where st_sender='${#TestSuite#recipient}' and st_receiver='${#TestSuite#donor}' and st_send_received='SEND' and st_message like '%${#TestCase#switchId}%'</con:query>
          <con:assertion type="JDBC Status" id="cc45d6ef-2316-4378-b582-f321b46f2cc1" name="JDBC Status"/>
          <con:assertion type="Simple NotContains" id="9dc2a7bb-7c16-4bd1-980b-734fceb80acc" name="NotContains: Not Contains" disabled="true">
            <con:configuration>
              <token>&lt;Row rowNumber="1"></token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Sel-CTRA Blocking 11" id="0219e407-e19d-4153-98ac-f11d2dc6a61a">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.*;

def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def funcHandle = new ReadymadeFunctions();

def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser");
def recipient = testRunner.testCase.testSuite.getPropertyValue("recipient");
def donor = testRunner.testCase.testSuite.getPropertyValue("donor");
def dossierID = testRunner.testCase.getPropertyValue("switchId");
def donorDossierType = testRunner.testCase.testSuite.getPropertyValue("donorDossierType");
def proposeddate = testRunner.testCase.getPropertyValue("proposedDate");

def projectName = testRunner.testCase.testSuite.project.name;
def testSuiteName = testRunner.testCase.testSuite.name;
def testCaseName = testRunner.testCase.name;
def testStepName = context.getCurrentStep().getLabel();

log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName);

try {
	funcHandle.sendCTRA(seleniumHandle, javaHandle, browser, guiUrl, donor, dossierID, "&lt;business>Y&lt;/business>", "11", proposeddate);
} catch (Exception e) {
	testRunner.fail(e.getClass().getSimpleName());
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table 1" id="3ab93818-d0b9-4079-a0a5-529a73fb0ef4">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier 
where id='${#TestCase#ctdId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [CTD_SWITCHID]" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//CTD_SWITCHID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_dossier_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_DOSSIER_STATUS</path>
              <content>Blocked</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_process_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_PROCESS_STATUS</path>
              <content>Request Answer Blocking</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="f1634f5b-7b26-4777-9ee7-2012c2678c07" name="Script: assert ion">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def ModifiedDate = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/CONTRACT_TERMINATION_DOSSIER.MODIFIEDDATE[1]", "ModifiedDate");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="f7e313a5-ef5e-4f86-9240-a10a978a2c21" name="Xpath: Verify ctp_buffering" disabled="true">
            <con:configuration>
              <path>//CTD_CTP_BUFFERING</path>
              <content>t</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTRA" id="01cdb41f-9225-4df0-a5a3-cf5476060651">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where dm_ctd_id = ${#TestCase#ctdId} 
and dm_mst_id=3 
order by createddate desc</con:query>
          <con:assertion type="XQuery Match" id="40cc6fa1-0d78-43c5-a10b-f043ddf625c6" name="XQuery Match">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/IT_INTERFACE_TYPE[1]</path>
              <content>GUI</content>
              <allowWildcards>true</allowWildcards>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="71f69b84-d236-4c56-b795-a1a1e3d13709" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/ID/text()</path>
              <content>${#TestCase#ctrDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="027babef-fe70-4547-baf7-25b239e3c349" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctraDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Delay0" id="c5c4e0b2-7841-4063-a4f4-a9206a195d62">
        <con:settings/>
        <con:config>
          <delay>1</delay>
        </con:config>
      </con:testStep>
      <con:setupScript>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import groovy.time.TimeCategory
import java.util.Random
def today = new Date() 
def now = String.format('%tFT%&lt;tT', new Date() )
def wishdate = today 
def wishdatestr = wishdate.format("yyyy-MM-dd'T'HH:mm:ss")
def guiwishdatestr = wishdate.format("yyyy-MM-dd")
testRunner.testCase.setPropertyValue("Now",now)
testRunner.testCase.setPropertyValue("wishDate",wishdatestr)
testRunner.testCase.setPropertyValue("guiWishDate",guiwishdatestr)
String contractId = funcHandle.getRandomString(9, "2-");
testRunner.testCase.setPropertyValue("contractId",contractId)
Calendar cal = Calendar.getInstance()
cal.setTime(today)
cal.add(Calendar.DATE, 90)
def proposeddate = cal.getTime()
def guiproposeddate =proposeddate.format("yyyy-MM-dd")
testRunner.testCase.setPropertyValue("ProposedDate",guiproposeddate)</con:setupScript>
      <con:tearDownScript/>
      <con:properties/>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>122d3297-f22d-449f-ac52-c46f1bfb714e</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="1.3 Business CTR-Business CTRA Wish date -Todays date Proposed date-Todays date+1 year" searchProperties="true" id="ae90a697-4a64-4de9-9555-974324985e7f" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" disabled="true">
      <con:settings>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">1000</con:setting>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting>
      </con:settings>
      <con:testStep type="groovy" name="Sel_CTR" id="4f9bfcca-7d29-41fd-b61b-37b9b8f93886">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.*;

def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def funcHandle = new ReadymadeFunctions();

def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser")
def recipient = testRunner.testCase.testSuite.getPropertyValue("recipient")
def donor = testRunner.testCase.testSuite.getPropertyValue("donor")
def contractId = testRunner.testCase.getPropertyValue("contractId")
def dossierType = testRunner.testCase.testSuite.getPropertyValue("dossierType")
def wishDate = testRunner.testCase.getPropertyValue("wishDate")

def projectName = testRunner.testCase.testSuite.project.name
def testSuiteName = testRunner.testCase.testSuite.name
def testCaseName = testRunner.testCase.name
def testStepName = context.getCurrentStep().getLabel()

log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName)

try {
	def switchId = funcHandle.sendCTR(seleniumHandle, javaHandle, browser, guiUrl, recipient, "TP10", "&lt;business>Y&lt;/business>", "COIN", "1389SS", "99999", null, false, contractId, null, wishDate, null, null, null);

	testRunner.testCase.setPropertyValue("switchId",switchId);
} catch (Exception e) {
	testRunner.fail(e.getClass().getSimpleName());
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table_CTR" id="9e485d6a-dab5-4afc-b178-c2e60f0222b3">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier where 
ctd_contractid = '${#TestCase#contractId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: assert CTD_DOSSIER_STATUS]" id="ac17d9f6-9653-435c-bd0c-9af6917f2aa6">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_DOSSIER_STATUS[1]/text()</path>
              <content>Pending</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [CTD_DOSSIER_STATUS]" id="d34e8994-e69d-4e40-b3f2-4e8d12c2cca7">
            <con:configuration>
              <path>exists( //Results/ResultSet/Row/CTD_DOSSIER_STATUS)</path>
              <content>true</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert CTD_PROCESS_STATUS]" id="ede8cc08-99ab-46ca-baf4-97e9f0895428">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_PROCESS_STATUS[1]/text()</path>
              <content>Request</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: assert ion ctd_id switchid">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def ctdid = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctdId");
def switchid = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/CTD_SWITCHID[1]", "switchId");
log.info("Testcase dossierid: " + switchid)</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTR" id="e5d3b037-f849-4bb8-a1a3-c38241fe8706">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where dm_ctd_id = ${#TestCase#ctdId} 
and dm_mst_id=1 
order by createddate desc</con:query>
          <con:assertion type="XPath Match" id="22e366c7-6a4e-4580-9e30-c5cb86194c3d" name="Xpath: SoapVersion">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/IT_INTERFACE_TYPE[1]</path>
              <content>*${#TestSuite#soapVersion}*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="4f8d4758-30e0-4fe3-b515-dbcdc7aff3a4" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/ID/text()</path>
              <content>${#TestCase#ctrDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="48863312-c766-405f-a631-81353d0628cd" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctrDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_CheckOutGoingMsgType" id="8c2a8695-838f-4fe1-a5b4-b3116028e5c4">
        <con:settings/>
        <con:config>
          <script>def dossierType = testRunner.testCase.getPropertyValue( "dossierType" )
def busguionly = testRunner.testCase.getPropertyValue( "businessGuiOnly" )
if (dossierType == '&lt;business>Y&lt;/business>' &amp;&amp; busguionly == 'true'){
    	  testRunner.gotoStepByName( "JDBC_ST Table_NoSend")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_CheckOutGoingMsgType1" id="c092361f-9e5a-4158-8972-ae45178e78de">
        <con:settings/>
        <con:config>
          <script>def outtype = testRunner.testCase.testSuite.getPropertyValue("recipientOutMsg")

if (outtype == 'SOAP') {
    	  testRunner.gotoStepByName( "Sel-CTRA Blocking 11")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_ST Table_NoSend" id="3a982046-bd04-4798-bee7-54a71a762ebd">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_transactions 
where st_sender='${#TestSuite#recipient}' and st_receiver='${#TestSuite#donor}' and st_send_received='SEND' and st_message like '%${#TestCase#switchId}%'</con:query>
          <con:assertion type="JDBC Status" id="cc45d6ef-2316-4378-b582-f321b46f2cc1" name="JDBC Status"/>
          <con:assertion type="Simple NotContains" id="9dc2a7bb-7c16-4bd1-980b-734fceb80acc" name="NotContains: Not Contains" disabled="true">
            <con:configuration>
              <token>&lt;Row rowNumber="1"></token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Sel-CTRA Blocking 11" id="27d377e3-fff1-4a29-b885-42c419a2714e">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.*;

def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def funcHandle = new ReadymadeFunctions();

def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser");
def recipient = testRunner.testCase.testSuite.getPropertyValue("recipient");
def donor = testRunner.testCase.testSuite.getPropertyValue("donor");
def dossierID = testRunner.testCase.getPropertyValue("switchId");
def donorDossierType = testRunner.testCase.testSuite.getPropertyValue("donorDossierType");
def proposeddate = testRunner.testCase.getPropertyValue("proposedDate");

def projectName = testRunner.testCase.testSuite.project.name;
def testSuiteName = testRunner.testCase.testSuite.name;
def testCaseName = testRunner.testCase.name;
def testStepName = context.getCurrentStep().getLabel();

log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName);

try {
	funcHandle.sendCTRA(seleniumHandle, javaHandle, browser, guiUrl, donor, dossierID, "&lt;business>Y&lt;/business>", "11", proposeddate);
} catch (Exception e) {
	testRunner.fail(e.getClass().getSimpleName());
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table 1" id="9a2de9dc-cf50-4362-aada-690a1139c5fb">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier 
where id='${#TestCase#ctdId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [ST_TRANSACTION_ID]" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//CTD_SWITCHID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_dossier_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_DOSSIER_STATUS</path>
              <content>Blocked</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_process_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_PROCESS_STATUS</path>
              <content>Request Answer Blocking</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="f1634f5b-7b26-4777-9ee7-2012c2678c07" name="Script: assert ion">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def ModifiedDate = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/CONTRACT_TERMINATION_DOSSIER.MODIFIEDDATE[1]", "ModifiedDate");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="f7e313a5-ef5e-4f86-9240-a10a978a2c21" name="Xpath: Verify ctp_buffering" disabled="true">
            <con:configuration>
              <path>//CTD_CTP_BUFFERING</path>
              <content>t</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTRA" id="32dfd0d2-7582-45d5-b605-77529cb5b41f">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where dm_ctd_id = ${#TestCase#ctdId} 
and dm_mst_id=3 
order by createddate desc</con:query>
          <con:assertion type="XQuery Match" id="40cc6fa1-0d78-43c5-a10b-f043ddf625c6" name="XQuery Match">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/IT_INTERFACE_TYPE[1]</path>
              <content>GUI</content>
              <allowWildcards>true</allowWildcards>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="34b170d1-7ea7-4747-9a6f-964459117ebd" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/ID/text()</path>
              <content>${#TestCase#ctrDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="5b785f35-68db-4c84-b229-fbc2afc4cca5" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctraDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Delay0" id="79983bc4-c8c3-4b55-b958-6839cfd667ea">
        <con:settings/>
        <con:config>
          <delay>1</delay>
        </con:config>
      </con:testStep>
      <con:setupScript>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import groovy.time.TimeCategory
import java.util.Random
def today = new Date() 
def now = String.format('%tFT%&lt;tT', new Date() )
def wishdate = today 
def wishdatestr = wishdate.format("yyyy-MM-dd'T'HH:mm:ss")
def guiwishdatestr = wishdate.format("yyyy-MM-dd")
testRunner.testCase.setPropertyValue("Now",now)
testRunner.testCase.setPropertyValue("wishDate",wishdatestr)
testRunner.testCase.setPropertyValue("guiWishDate",guiwishdatestr)
String contractId = funcHandle.getRandomString(9, "2-");
testRunner.testCase.setPropertyValue("contractId",contractId)
Calendar cal = Calendar.getInstance()
cal.setTime(today)
cal.add(Calendar.YEAR, 1)
def proposeddate = cal.getTime()
def guiproposeddate =proposeddate.format("yyyy-MM-dd")
testRunner.testCase.setPropertyValue("ProposedDate",guiproposeddate)</con:setupScript>
      <con:tearDownScript/>
      <con:properties/>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>122d3297-f22d-449f-ac52-c46f1bfb714e</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="1.4 Business CTR-Business CTRA Wish date -Todays date Proposed date-Todays date+2 year" searchProperties="true" id="7c8f2390-b173-49a3-8943-1e5bee620e58" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" disabled="true">
      <con:settings>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">1000</con:setting>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting>
      </con:settings>
      <con:testStep type="groovy" name="Sel_CTR" id="61267b1f-ec8e-4449-80d4-17b0f23d6e08">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.*;

def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def funcHandle = new ReadymadeFunctions();

def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser")
def recipient = testRunner.testCase.testSuite.getPropertyValue("recipient")
def donor = testRunner.testCase.testSuite.getPropertyValue("donor")
def contractId = testRunner.testCase.getPropertyValue("contractId")
def dossierType = testRunner.testCase.testSuite.getPropertyValue("dossierType")
def wishDate = testRunner.testCase.getPropertyValue("wishDate")

def projectName = testRunner.testCase.testSuite.project.name
def testSuiteName = testRunner.testCase.testSuite.name
def testCaseName = testRunner.testCase.name
def testStepName = context.getCurrentStep().getLabel()

log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName)

try {
	def switchId = funcHandle.sendCTR(seleniumHandle, javaHandle, browser, guiUrl, recipient, "TP10", "&lt;business>Y&lt;/business>", "COIN", "1389SS", "99999", null, false, contractId, null, wishDate, null, null, null);

	testRunner.testCase.setPropertyValue("switchId",switchId);
} catch (Exception e) {
	testRunner.fail(e.getClass().getSimpleName());
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table_CTR" id="f2b08343-8230-44a2-ba32-6862eae26af2">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier where 
ctd_contractid = '${#TestCase#contractId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: assert CTD_DOSSIER_STATUS]" id="ac17d9f6-9653-435c-bd0c-9af6917f2aa6">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_DOSSIER_STATUS[1]/text()</path>
              <content>Pending</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [CTD_DOSSIER_STATUS]" id="d34e8994-e69d-4e40-b3f2-4e8d12c2cca7">
            <con:configuration>
              <path>exists( //Results/ResultSet/Row/CTD_DOSSIER_STATUS)</path>
              <content>true</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert CTD_PROCESS_STATUS]" id="ede8cc08-99ab-46ca-baf4-97e9f0895428">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_PROCESS_STATUS[1]/text()</path>
              <content>Request</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: assert ion ctd_id switchid">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def ctdid = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctdId");
def switchid = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/CTD_SWITCHID[1]", "switchId");
log.info("Testcase dossierid: " + switchid)</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTR" id="cfa4b0e5-97cb-4ccc-ab0a-a4f8962e35c0">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where dm_ctd_id = ${#TestCase#ctdId} 
and dm_mst_id=1 
order by createddate desc</con:query>
          <con:assertion type="XPath Match" id="22e366c7-6a4e-4580-9e30-c5cb86194c3d" name="Xpath: SoapVersion">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/IT_INTERFACE_TYPE[1]</path>
              <content>*${#TestSuite#soapVersion}*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="76a6e578-1ef6-4480-a586-14213e41cc22" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/ID/text()</path>
              <content>${#TestCase#ctrDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="3735c17c-4761-422c-bbb3-11228a4acae8" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctrDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_CheckOutGoingMsgType" id="e9aa7ce2-0e1a-48ad-abff-dea69ec91c3f">
        <con:settings/>
        <con:config>
          <script>def dossierType = testRunner.testCase.getPropertyValue( "dossierType" )
def busguionly = testRunner.testCase.getPropertyValue( "businessGuiOnly" )
if (dossierType == '&lt;business>Y&lt;/business>' &amp;&amp; busguionly == 'true'){
    	  testRunner.gotoStepByName( "JDBC_ST Table_NoSend")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_CheckOutGoingMsgType1" id="0e73ea34-a83d-4b4a-a92e-95954c94a5e6">
        <con:settings/>
        <con:config>
          <script>def outtype = testRunner.testCase.testSuite.getPropertyValue("recipientOutMsg")

if (outtype == 'SOAP') {
    	  testRunner.gotoStepByName( "Sel-CTRA Blocking 11")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_ST Table_NoSend" id="278ab2b8-3a73-494f-a4e8-9d4eba36d014">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_transactions 
where st_sender='${#TestSuite#recipient}' and st_receiver='${#TestSuite#donor}' and st_send_received='SEND' and st_message like '%${#TestCase#switchId}%'</con:query>
          <con:assertion type="JDBC Status" id="cc45d6ef-2316-4378-b582-f321b46f2cc1" name="JDBC Status"/>
          <con:assertion type="Simple NotContains" id="9dc2a7bb-7c16-4bd1-980b-734fceb80acc" name="NotContains: Not Contains" disabled="true">
            <con:configuration>
              <token>&lt;Row rowNumber="1"></token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Sel-CTRA Blocking 11" id="0e5f663c-f31b-4907-9b89-58cef587eb7a">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.*;

def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def funcHandle = new ReadymadeFunctions();

def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser");
def recipient = testRunner.testCase.testSuite.getPropertyValue("recipient");
def donor = testRunner.testCase.testSuite.getPropertyValue("donor");
def dossierID = testRunner.testCase.getPropertyValue("switchId");
def donorDossierType = testRunner.testCase.testSuite.getPropertyValue("donorDossierType");
def proposeddate = testRunner.testCase.getPropertyValue("proposedDate");

def projectName = testRunner.testCase.testSuite.project.name;
def testSuiteName = testRunner.testCase.testSuite.name;
def testCaseName = testRunner.testCase.name;
def testStepName = context.getCurrentStep().getLabel();

log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName);

try {
	funcHandle.sendCTRA(seleniumHandle, javaHandle, browser, guiUrl, donor, dossierID, "&lt;business>Y&lt;/business>", "11", proposeddate);
} catch (Exception e) {
	testRunner.fail(e.getClass().getSimpleName());
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table 1" id="3ab0aea1-43b5-4c46-b8a6-b49642f2ecde">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier 
where id='${#TestCase#ctdId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [ST_TRANSACTION_ID]" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//CTD_SWITCHID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_dossier_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_DOSSIER_STATUS</path>
              <content>Blocked</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_process_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_PROCESS_STATUS</path>
              <content>Request Answer Blocking</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="f1634f5b-7b26-4777-9ee7-2012c2678c07" name="Script: assert ion">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def ModifiedDate = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/CONTRACT_TERMINATION_DOSSIER.MODIFIEDDATE[1]", "ModifiedDate");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="f7e313a5-ef5e-4f86-9240-a10a978a2c21" name="Xpath: Verify ctp_buffering" disabled="true">
            <con:configuration>
              <path>//CTD_CTP_BUFFERING</path>
              <content>t</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTRA" id="47bcd104-ec83-4bdc-baa7-e46c0fc73ba4">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where dm_ctd_id = ${#TestCase#ctdId} 
and dm_mst_id=3 
order by createddate desc</con:query>
          <con:assertion type="XQuery Match" id="40cc6fa1-0d78-43c5-a10b-f043ddf625c6" name="XQuery Match">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/IT_INTERFACE_TYPE[1]</path>
              <content>GUI</content>
              <allowWildcards>true</allowWildcards>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="5cf93f47-67b9-4b87-8be9-491bd21644e5" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/ID/text()</path>
              <content>${#TestCase#ctrDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="070b899f-7ae1-4485-8a24-198ba51d4324" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctraDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Delay0" id="d3757a4f-d8bc-41a3-b32e-a3090e473d82">
        <con:settings/>
        <con:config>
          <delay>1</delay>
        </con:config>
      </con:testStep>
      <con:setupScript>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import groovy.time.TimeCategory
import java.util.Random
def today = new Date() 
def now = String.format('%tFT%&lt;tT', new Date() )
def wishdate = today 
def wishdatestr = wishdate.format("yyyy-MM-dd'T'HH:mm:ss")
def guiwishdatestr = wishdate.format("yyyy-MM-dd")
testRunner.testCase.setPropertyValue("Now",now)
testRunner.testCase.setPropertyValue("wishDate",wishdatestr)
testRunner.testCase.setPropertyValue("guiWishDate",guiwishdatestr)
String contractId = funcHandle.getRandomString(9, "2-");
testRunner.testCase.setPropertyValue("contractId",contractId)
Calendar cal = Calendar.getInstance()
cal.setTime(today)
cal.add(Calendar.YEAR, 2)
def proposeddate = cal.getTime()
def guiproposeddate =proposeddate.format("yyyy-MM-dd")
testRunner.testCase.setPropertyValue("ProposedDate",guiproposeddate)</con:setupScript>
      <con:tearDownScript/>
      <con:properties/>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>122d3297-f22d-449f-ac52-c46f1bfb714e</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="1.5 Business CTR-Business CTRA Wish date -Todays date Proposed date-Todays date+2 year and 1 day" searchProperties="true" id="9e96867e-6841-456e-8fe7-505aa49094df" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" disabled="true">
      <con:settings>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">1000</con:setting>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting>
      </con:settings>
      <con:testStep type="groovy" name="Sel_CTR" id="08d89803-8e89-4fd1-a95e-7fcaa8e9e437">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.*;

def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def funcHandle = new ReadymadeFunctions();

def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser")
def recipient = testRunner.testCase.testSuite.getPropertyValue("recipient")
def donor = testRunner.testCase.testSuite.getPropertyValue("donor")
def contractId = testRunner.testCase.getPropertyValue("contractId")
def dossierType = testRunner.testCase.testSuite.getPropertyValue("dossierType")
def wishDate = testRunner.testCase.getPropertyValue("wishDate")

def projectName = testRunner.testCase.testSuite.project.name
def testSuiteName = testRunner.testCase.testSuite.name
def testCaseName = testRunner.testCase.name
def testStepName = context.getCurrentStep().getLabel()

log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName)

try {
	def switchId = funcHandle.sendCTR(seleniumHandle, javaHandle, browser, guiUrl, recipient, "TP10", "&lt;business>Y&lt;/business>", "COIN", "1389SS", "99999", null, false, contractId, null, wishDate, null, null, null);

	testRunner.testCase.setPropertyValue("switchId",switchId);
} catch (Exception e) {
	testRunner.fail(e.getClass().getSimpleName());
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table_CTR" id="150bd0d8-bf5d-44e3-aa14-6addbe16d5ea">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier where 
ctd_contractid = '${#TestCase#contractId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: assert CTD_DOSSIER_STATUS]" id="ac17d9f6-9653-435c-bd0c-9af6917f2aa6">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_DOSSIER_STATUS[1]/text()</path>
              <content>Pending</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [CTD_DOSSIER_STATUS]" id="d34e8994-e69d-4e40-b3f2-4e8d12c2cca7">
            <con:configuration>
              <path>exists( //Results/ResultSet/Row/CTD_DOSSIER_STATUS)</path>
              <content>true</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert CTD_PROCESS_STATUS]" id="ede8cc08-99ab-46ca-baf4-97e9f0895428">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_PROCESS_STATUS[1]/text()</path>
              <content>Request</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: assert ion ctd_id switchid">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def ctdid = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctdId");
def switchid = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/CTD_SWITCHID[1]", "switchId");
log.info("Testcase dossierid: " + switchid)</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTR" id="68b6ef16-a195-4726-b79b-91b66eb55e65">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where dm_ctd_id = ${#TestCase#ctdId} 
and dm_mst_id=1 
order by createddate desc</con:query>
          <con:assertion type="XPath Match" id="22e366c7-6a4e-4580-9e30-c5cb86194c3d" name="Xpath: SoapVersion">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/IT_INTERFACE_TYPE[1]</path>
              <content>*${#TestSuite#soapVersion}*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="fb0030ed-73dc-479c-8ff1-66d87caeb517" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/ID/text()</path>
              <content>${#TestCase#ctrDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="38714845-e2d9-4ae6-a244-bf26110d4b18" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctrDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_CheckOutGoingMsgType" id="6f9bcaf6-e883-44cb-8b35-2278563bfb52">
        <con:settings/>
        <con:config>
          <script>def outtype = testRunner.testCase.testSuite.getPropertyValue("recipientOutMsg")

if (outtype == 'EMAIL') {
    	  testRunner.gotoStepByName( "JDBC_ST Table_NoSend")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_CTR" id="ce8cdfc4-5a4c-4380-8466-26b486cbdfad">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where
sxm_xml_message like '%${#TestCase#switchId}%'
and sxm_xml_message_type = 'Request'
and sxm_sender = '${#TestSuite#recipient}'
and sxm_receiver = '${#TestSuite#donor}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [ST_TRANSACTION_ID]" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//ID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" name="Contains: Contains" id="a1e1b0ed-fff7-4f8c-9eba-dee62ae7b198">
            <con:configuration>
              <token>contractterminationrequest</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6aa44612-36c9-414d-9194-790351155363" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/SXM_DM_ID/text()</path>
              <content>${#TestCase#ctrDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="33fbdbcd-2864-46b9-acf2-60c9f0374336" name="Xpath: assert SXMID" disabled="true">
            <con:configuration>
              <path>/Results/ResultSet/Row/ID/text()</path>
              <content>${#TestCase#stSXMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_CheckOutGoingMsgType1" id="d441a372-a201-4b96-b664-186569108404">
        <con:settings/>
        <con:config>
          <script>def outtype = testRunner.testCase.testSuite.getPropertyValue("recipientOutMsg")

if (outtype == 'SOAP') {
    	  testRunner.gotoStepByName( "Sel-CTRA Blocking 11")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_ST Table_NoSend" id="e9963a05-b53e-4c0e-821f-61fd9f420ba4">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_transactions 
where st_sender='${#TestSuite#recipient}' and st_receiver='${#TestSuite#donor}' and st_send_received='SEND' and st_message like '%${#TestCase#switchId}%'</con:query>
          <con:assertion type="JDBC Status" id="cc45d6ef-2316-4378-b582-f321b46f2cc1" name="JDBC Status"/>
          <con:assertion type="Simple NotContains" id="9dc2a7bb-7c16-4bd1-980b-734fceb80acc" name="NotContains: Not Contains">
            <con:configuration>
              <token>&lt;Row rowNumber="1"></token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Sel-CTRA Blocking 11" id="857c2082-3b60-40f6-bf6f-2f9fc930696d">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.SeleniumActions;
import nl.coin.Selenium.JavaActions;
def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser")
def recipient = testRunner.testCase.testSuite.getPropertyValue("recipient")
def donor = testRunner.testCase.testSuite.getPropertyValue("donor")
def contractId = testRunner.testCase.getPropertyValue("contractId")
def donorDossierType = testRunner.testCase.testSuite.getPropertyValue("donorDossierType")
def projectName = testRunner.testCase.testSuite.project.name
def testSuiteName = testRunner.testCase.testSuite.name
def testCaseName = testRunner.testCase.name
def testStepName = context.getCurrentStep().getLabel()
def switchId = testRunner.testCase.getPropertyValue("switchId")
//def dossierID = javaHandle.getDossierID(recipient, donor, contractId)
//log.info dossierID
log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName)
def driver = seleniumHandle.openBrowser(browser);
//Login to application
log.info seleniumHandle.browseURL(guiUrl);
log.info(driver.getTitle());
def sampleArray = seleniumHandle.getCredentials(donor)
log.info seleniumHandle.enterData("HomePage","userName", sampleArray[0]);
log.info seleniumHandle.enterData("HomePage","passWord", sampleArray[1]);
//log.info seleniumHandle.clickObject("HomePage","8HrsSession");
log.info seleniumHandle.clickObject("HomePage","login");
log.info seleniumHandle.clickObject("HomePage","dossiers");
log.info seleniumHandle.clickObject("HomePage","SearchTab");
log.info seleniumHandle.enterData("HomePage","DossierID",switchId);
sleep(1000)
log.info seleniumHandle.clickObject("HomePage","SearchButton");
log.info seleniumHandle.clickObject("HomePage","ViewDetailsSearch");
log.info seleniumHandle.enterDataSelectDropDown("HomePage","businessType", "Business");	
log.info seleniumHandle.enterDataSelectDropDownByValue("HomePage","blockingCode", "11");
//Need to add verify element present for blocking code 11
log.info seleniumHandle.enterData("HomePage","requestAnswerNote",switchId);
sleep(10000)
log.info seleniumHandle.clickObject("HomePage","CTRAProposedDateIcon");
def proposeddate = testRunner.testCase.getPropertyValue("proposedDate")
def onlyDate = javaHandle.getDateFromFormat(proposeddate, "yyyy-MM-dd")
def monthYear = javaHandle.convertDateFormat(proposeddate, "yyyy-MM-dd", "MMMM yyyy")
//move calander to required month &amp; year
log.info seleniumHandle.moveCalenderToMonth("HomePage", "CTRAProposedDateRightIcon", "HomePage", "CTRAProposedDateCalHeader", monthYear)
//Click on the date
log.info seleniumHandle.verifyAttributeValue("xpath","//table[@id='errorBlockingCode11ProposedDateDpJs']//td//a[text()="+onlyDate+"]//following::td[1]", true,"class","select");
log.info "Cannot select Proposed date for  more than 2 years "
log.info seleniumHandle.clickObject("HomePage","sendRequestAnswer");
sleep(1000)
log.info seleniumHandle.getText("HomePage","ErrorresultMessage");
log.info seleniumHandle.quitBrowser();</script>
        </con:config>
      </con:testStep>
      <con:setupScript>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import groovy.time.TimeCategory
import java.util.Random
def today = new Date() 
def now = String.format('%tFT%&lt;tT', new Date() )
def wishdate = today 
def wishdatestr = wishdate.format("yyyy-MM-dd'T'HH:mm:ss")
def guiwishdatestr = wishdate.format("yyyy-MM-dd")
testRunner.testCase.setPropertyValue("Now",now)
testRunner.testCase.setPropertyValue("wishDate",wishdatestr)
testRunner.testCase.setPropertyValue("guiWishDate",guiwishdatestr)
String contractId = funcHandle.getRandomString(9, "2-");
testRunner.testCase.setPropertyValue("contractId",contractId)
Calendar cal = Calendar.getInstance()
cal.setTime(today)
cal.add(Calendar.YEAR, 2)
def proposeddate = cal.getTime()
def guiproposeddate =proposeddate.format("yyyy-MM-dd")
testRunner.testCase.setPropertyValue("ProposedDate",guiproposeddate)</con:setupScript>
      <con:tearDownScript/>
      <con:properties/>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>122d3297-f22d-449f-ac52-c46f1bfb714e</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="2.1 Busiesss CTR-Consumer CTRA-Wishdate-Todays date Proposed date-Todays date" searchProperties="true" id="d49ad730-ecbc-4a7b-a5a5-0bb1116aba77" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" disabled="true">
      <con:settings>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">1000</con:setting>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting>
      </con:settings>
      <con:testStep type="groovy" name="Sel_CTR" id="aa3bf0fd-ea8e-4b43-a834-1e74fc4a6167">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.*;

def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def funcHandle = new ReadymadeFunctions();

def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser")
def recipient = testRunner.testCase.testSuite.getPropertyValue("recipient")
def donor = testRunner.testCase.testSuite.getPropertyValue("donor")
def contractId = testRunner.testCase.getPropertyValue("contractId")
def dossierType = testRunner.testCase.testSuite.getPropertyValue("dossierType")
def wishDate = testRunner.testCase.getPropertyValue("wishDate")

def projectName = testRunner.testCase.testSuite.project.name
def testSuiteName = testRunner.testCase.testSuite.name
def testCaseName = testRunner.testCase.name
def testStepName = context.getCurrentStep().getLabel()

log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName)

try {
	def switchId = funcHandle.sendCTR(seleniumHandle, javaHandle, browser, guiUrl, recipient, "TP10", "&lt;business>Y&lt;/business>", "COIN", "1389SS", "99999", null, false, contractId, null, wishDate, null, null, null);

	testRunner.testCase.setPropertyValue("switchId",switchId);
} catch (Exception e) {
	testRunner.fail(e.getClass().getSimpleName());
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table_CTR" id="5e42d9e5-3619-4379-9292-6c0afeb7554a">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier where 
ctd_contractid = '${#TestCase#contractId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: assert CTD_DOSSIER_STATUS]" id="ac17d9f6-9653-435c-bd0c-9af6917f2aa6">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_DOSSIER_STATUS[1]/text()</path>
              <content>Pending</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [CTD_DOSSIER_STATUS]" id="d34e8994-e69d-4e40-b3f2-4e8d12c2cca7">
            <con:configuration>
              <path>exists( //Results/ResultSet/Row/CTD_DOSSIER_STATUS)</path>
              <content>true</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert CTD_PROCESS_STATUS]" id="ede8cc08-99ab-46ca-baf4-97e9f0895428">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_PROCESS_STATUS[1]/text()</path>
              <content>Request</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: assert ion ctd_id switchid">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def ctdid = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctdId");
def switchid = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/CTD_SWITCHID[1]", "switchId");
log.info("Testcase dossierid: " + switchid)</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTR" id="2a2a8791-cff6-4b37-992b-86771f5d000e">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where dm_ctd_id = ${#TestCase#ctdId} 
and dm_mst_id=1 
order by createddate desc</con:query>
          <con:assertion type="XPath Match" id="22e366c7-6a4e-4580-9e30-c5cb86194c3d" name="Xpath: SoapVersion">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/IT_INTERFACE_TYPE[1]</path>
              <content>*${#TestSuite#soapVersion}*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="335f9b91-5a79-44bf-9b43-6efb1ee50a49" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/ID/text()</path>
              <content>${#TestCase#ctrDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="8973a2f7-9fc9-4f06-bf69-b2a6e2f7a850" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctrDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_CheckOutGoingMsgType" id="37bb381d-873f-45b0-9f39-735ef9670646">
        <con:settings/>
        <con:config>
          <script>def dossierType = testRunner.testCase.getPropertyValue( "dossierType" )
def busguionly = testRunner.testCase.getPropertyValue( "businessGuiOnly" )
if (dossierType == '&lt;business>Y&lt;/business>' &amp;&amp; busguionly == 'true'){
    	  testRunner.gotoStepByName( "JDBC_ST Table_NoSend")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_CheckOutGoingMsgType1" id="c87c00f5-4235-4428-9e66-368b76ea9a35">
        <con:settings/>
        <con:config>
          <script>def outtype = testRunner.testCase.testSuite.getPropertyValue("recipientOutMsg")

if (outtype == 'SOAP') {
    	  testRunner.gotoStepByName( "Sel-CTRA Blocking 11")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_ST Table_NoSend" id="772e0a55-2fb8-4382-8378-e7ee48ad8fae">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_transactions 
where st_sender='${#TestSuite#recipient}' and st_receiver='${#TestSuite#donor}' and st_send_received='SEND' and st_message like '%${#TestCase#switchId}%'</con:query>
          <con:assertion type="JDBC Status" id="cc45d6ef-2316-4378-b582-f321b46f2cc1" name="JDBC Status"/>
          <con:assertion type="Simple NotContains" id="9dc2a7bb-7c16-4bd1-980b-734fceb80acc" name="NotContains: Not Contains" disabled="true">
            <con:configuration>
              <token>&lt;Row rowNumber="1"></token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Sel-CTRA Blocking 11" id="ae0c3b7e-786e-4b5f-b2db-a1eb6bebe2b2">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.*;

def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def funcHandle = new ReadymadeFunctions();

def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser");
def recipient = testRunner.testCase.testSuite.getPropertyValue("recipient");
def donor = testRunner.testCase.testSuite.getPropertyValue("donor");
def dossierID = testRunner.testCase.getPropertyValue("switchId");
def donorDossierType = testRunner.testCase.testSuite.getPropertyValue("donorDossierType");
def proposeddate = testRunner.testCase.getPropertyValue("proposedDate");

def projectName = testRunner.testCase.testSuite.project.name;
def testSuiteName = testRunner.testCase.testSuite.name;
def testCaseName = testRunner.testCase.name;
def testStepName = context.getCurrentStep().getLabel();

log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName);

try {
	funcHandle.sendCTRA(seleniumHandle, javaHandle, browser, guiUrl, donor, dossierID, "", "11", proposeddate);
} catch (Exception e) {
	testRunner.fail(e.getClass().getSimpleName());
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table 1" id="0af14b12-58a1-4de9-be7f-a6490507ac49">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier 
where id='${#TestCase#ctdId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [ST_TRANSACTION_ID]" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//CTD_SWITCHID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_dossier_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_DOSSIER_STATUS</path>
              <content>Blocked</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_process_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_PROCESS_STATUS</path>
              <content>Request Answer Blocking</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="f1634f5b-7b26-4777-9ee7-2012c2678c07" name="Script: assert ion">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def ModifiedDate = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/CONTRACT_TERMINATION_DOSSIER.MODIFIEDDATE[1]", "ModifiedDate");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="f7e313a5-ef5e-4f86-9240-a10a978a2c21" name="Xpath: Verify ctp_buffering" disabled="true">
            <con:configuration>
              <path>//CTD_CTP_BUFFERING</path>
              <content>t</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTRA" id="d3cf5789-a508-464a-81f6-e17ec5d5d985">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where dm_ctd_id = ${#TestCase#ctdId} 
and dm_mst_id=3 
order by createddate desc</con:query>
          <con:assertion type="XQuery Match" id="40cc6fa1-0d78-43c5-a10b-f043ddf625c6" name="XQuery Match">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/IT_INTERFACE_TYPE[1]</path>
              <content>GUI</content>
              <allowWildcards>true</allowWildcards>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="8a2be056-7322-4922-8e04-cf7a284c70c2" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/ID/text()</path>
              <content>${#TestCase#ctrDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="e8377e1d-0d64-4c52-be07-df968b4abd31" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctraDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Delay0" id="deedf459-de35-48fe-ae56-fdca97d37908">
        <con:settings/>
        <con:config>
          <delay>1</delay>
        </con:config>
      </con:testStep>
      <con:setupScript>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import groovy.time.TimeCategory
import java.util.Random
def today = new Date() 
def now = String.format('%tFT%&lt;tT', new Date() )
def wishdate = today 
def wishdatestr = wishdate.format("yyyy-MM-dd'T'HH:mm:ss")
def guiwishdatestr = wishdate.format("yyyy-MM-dd")
testRunner.testCase.setPropertyValue("Now",now)
testRunner.testCase.setPropertyValue("wishDate",wishdatestr)
testRunner.testCase.setPropertyValue("guiWishDate",guiwishdatestr)
String contractId = funcHandle.getRandomString(9, "2-");
testRunner.testCase.setPropertyValue("contractId",contractId)
def proposeddate = today
def guiproposeddate =proposeddate.format("yyyy-MM-dd")
testRunner.testCase.setPropertyValue("ProposedDate",guiproposeddate)</con:setupScript>
      <con:tearDownScript/>
      <con:properties/>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>122d3297-f22d-449f-ac52-c46f1bfb714e</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="2.2 Business CTR-Consumer CTRA Wish date -Todays date Proposed date-Todays date+90" searchProperties="true" id="68182f05-f75d-4684-a894-790c264cbd1b" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" disabled="true">
      <con:settings>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">1000</con:setting>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting>
      </con:settings>
      <con:testStep type="groovy" name="Sel_CTR" id="1d4108a0-533a-489e-b035-d990f21a5b15">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.*;

def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def funcHandle = new ReadymadeFunctions();

def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser")
def recipient = testRunner.testCase.testSuite.getPropertyValue("recipient")
def donor = testRunner.testCase.testSuite.getPropertyValue("donor")
def contractId = testRunner.testCase.getPropertyValue("contractId")
def dossierType = testRunner.testCase.testSuite.getPropertyValue("dossierType")
def wishDate = testRunner.testCase.getPropertyValue("wishDate")

def projectName = testRunner.testCase.testSuite.project.name
def testSuiteName = testRunner.testCase.testSuite.name
def testCaseName = testRunner.testCase.name
def testStepName = context.getCurrentStep().getLabel()

log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName)

try {
	def switchId = funcHandle.sendCTR(seleniumHandle, javaHandle, browser, guiUrl, recipient, "TP10", "&lt;business>Y&lt;/business>", "COIN", "1389SS", "99999", null, false, contractId, null, wishDate, null, null, null);

	testRunner.testCase.setPropertyValue("switchId",switchId);
} catch (Exception e) {
	testRunner.fail(e.getClass().getSimpleName());
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table_CTR" id="a02aeafc-7f1e-45b6-b68d-5549fe2ae373">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier where 
ctd_contractid = '${#TestCase#contractId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: assert CTD_DOSSIER_STATUS]" id="ac17d9f6-9653-435c-bd0c-9af6917f2aa6">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_DOSSIER_STATUS[1]/text()</path>
              <content>Pending</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [CTD_DOSSIER_STATUS]" id="d34e8994-e69d-4e40-b3f2-4e8d12c2cca7">
            <con:configuration>
              <path>exists( //Results/ResultSet/Row/CTD_DOSSIER_STATUS)</path>
              <content>true</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert CTD_PROCESS_STATUS]" id="ede8cc08-99ab-46ca-baf4-97e9f0895428">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_PROCESS_STATUS[1]/text()</path>
              <content>Request</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: assert ion ctd_id switchid">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def ctdid = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctdId");
def switchid = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/CTD_SWITCHID[1]", "switchId");
log.info("Testcase dossierid: " + switchid)</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTR" id="fc199ec2-526b-42c0-b46c-2b42933b5ce9">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where dm_ctd_id = ${#TestCase#ctdId} 
and dm_mst_id=1 
order by createddate desc</con:query>
          <con:assertion type="XPath Match" id="22e366c7-6a4e-4580-9e30-c5cb86194c3d" name="Xpath: SoapVersion">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/IT_INTERFACE_TYPE[1]</path>
              <content>*${#TestSuite#soapVersion}*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="c73f0429-fb97-4fe1-a89b-fe673b09bb50" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/ID/text()</path>
              <content>${#TestCase#ctrDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="5f4c51fa-e7b8-4ee0-9efe-56a846e921f0" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctrDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_CheckOutGoingMsgType" id="6a6b30a0-59e2-4583-9d5c-4eb2000e6632">
        <con:settings/>
        <con:config>
          <script>def dossierType = testRunner.testCase.getPropertyValue( "dossierType" )
def busguionly = testRunner.testCase.getPropertyValue( "businessGuiOnly" )
if (dossierType == '&lt;business>Y&lt;/business>' &amp;&amp; busguionly == 'true'){
    	  testRunner.gotoStepByName( "JDBC_ST Table_NoSend")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_CheckOutGoingMsgType1" id="f1b771a8-5f02-4f2c-ab7d-b2baed92f578">
        <con:settings/>
        <con:config>
          <script>def outtype = testRunner.testCase.testSuite.getPropertyValue("recipientOutMsg")

if (outtype == 'SOAP') {
    	  testRunner.gotoStepByName( "Sel-CTRA Blocking 11")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_ST Table_NoSend" id="7142a97a-8c7a-4bfe-9491-bcaf150d72d1">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_transactions 
where st_sender='${#TestSuite#recipient}' and st_receiver='${#TestSuite#donor}' and st_send_received='SEND' and st_message like '%${#TestCase#switchId}%'</con:query>
          <con:assertion type="JDBC Status" id="cc45d6ef-2316-4378-b582-f321b46f2cc1" name="JDBC Status"/>
          <con:assertion type="Simple NotContains" id="9dc2a7bb-7c16-4bd1-980b-734fceb80acc" name="NotContains: Not Contains" disabled="true">
            <con:configuration>
              <token>&lt;Row rowNumber="1"></token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Sel-CTRA Blocking 11" id="5011d469-2d57-499e-afe0-5c0be92cdb67">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.*;

def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def funcHandle = new ReadymadeFunctions();

def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser");
def recipient = testRunner.testCase.testSuite.getPropertyValue("recipient");
def donor = testRunner.testCase.testSuite.getPropertyValue("donor");
def dossierID = testRunner.testCase.getPropertyValue("switchId");
def donorDossierType = testRunner.testCase.testSuite.getPropertyValue("donorDossierType");
def proposeddate = testRunner.testCase.getPropertyValue("proposedDate");

def projectName = testRunner.testCase.testSuite.project.name;
def testSuiteName = testRunner.testCase.testSuite.name;
def testCaseName = testRunner.testCase.name;
def testStepName = context.getCurrentStep().getLabel();

log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName);

try {
	funcHandle.sendCTRA(seleniumHandle, javaHandle, browser, guiUrl, donor, dossierID, "", "11", proposeddate);
} catch (Exception e) {
	testRunner.fail(e.getClass().getSimpleName());
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table 1" id="3072f815-0507-4f48-8786-c2522bb96caa">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier 
where id='${#TestCase#ctdId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [ST_TRANSACTION_ID]" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//CTD_SWITCHID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_dossier_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_DOSSIER_STATUS</path>
              <content>Blocked</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_process_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_PROCESS_STATUS</path>
              <content>Request Answer Blocking</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="f1634f5b-7b26-4777-9ee7-2012c2678c07" name="Script: assert ion">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def ModifiedDate = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/CONTRACT_TERMINATION_DOSSIER.MODIFIEDDATE[1]", "ModifiedDate");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="f7e313a5-ef5e-4f86-9240-a10a978a2c21" name="Xpath: Verify ctp_buffering" disabled="true">
            <con:configuration>
              <path>//CTD_CTP_BUFFERING</path>
              <content>t</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTRA" id="c8f579ad-a946-4e8b-b445-6b1f7e9a9a4c">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where dm_ctd_id = ${#TestCase#ctdId} 
and dm_mst_id=3 
order by createddate desc</con:query>
          <con:assertion type="XQuery Match" id="40cc6fa1-0d78-43c5-a10b-f043ddf625c6" name="XQuery Match">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/IT_INTERFACE_TYPE[1]</path>
              <content>GUI</content>
              <allowWildcards>true</allowWildcards>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="472e9bab-1a96-46d6-a823-8c6d72e28af7" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/ID/text()</path>
              <content>${#TestCase#ctrDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="c7368c72-986f-45df-854b-cbfb2c19b38d" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctraDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Delay0" id="0f154443-8301-40c2-bd3e-fa3d9d7e05d4">
        <con:settings/>
        <con:config>
          <delay>1</delay>
        </con:config>
      </con:testStep>
      <con:setupScript>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import groovy.time.TimeCategory
import java.util.Random
def today = new Date() 
def now = String.format('%tFT%&lt;tT', new Date() )
def wishdate = today 
def wishdatestr = wishdate.format("yyyy-MM-dd'T'HH:mm:ss")
def guiwishdatestr = wishdate.format("yyyy-MM-dd")
testRunner.testCase.setPropertyValue("Now",now)
testRunner.testCase.setPropertyValue("wishDate",wishdatestr)
testRunner.testCase.setPropertyValue("guiWishDate",guiwishdatestr)
String contractId = funcHandle.getRandomString(9, "2-");
testRunner.testCase.setPropertyValue("contractId",contractId)
Calendar cal = Calendar.getInstance()
cal.setTime(today)
cal.add(Calendar.DATE, 90)
def proposeddate = cal.getTime()
def guiproposeddate =proposeddate.format("yyyy-MM-dd")
testRunner.testCase.setPropertyValue("ProposedDate",guiproposeddate)</con:setupScript>
      <con:tearDownScript/>
      <con:properties/>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>122d3297-f22d-449f-ac52-c46f1bfb714e</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="2.3 Business CTR-Consumer CTRA Wish date -Todays date Proposed date-Todays date+1 year" searchProperties="true" id="1a758458-700b-47e5-9abc-2fa6671f90e3" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" disabled="true">
      <con:settings>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">1000</con:setting>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting>
      </con:settings>
      <con:testStep type="groovy" name="Sel_CTR" id="c6253c07-12d8-4571-925c-06e4f4268dc5">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.*;

def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def funcHandle = new ReadymadeFunctions();

def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser")
def recipient = testRunner.testCase.testSuite.getPropertyValue("recipient")
def donor = testRunner.testCase.testSuite.getPropertyValue("donor")
def contractId = testRunner.testCase.getPropertyValue("contractId")
def dossierType = testRunner.testCase.testSuite.getPropertyValue("dossierType")
def wishDate = testRunner.testCase.getPropertyValue("wishDate")

def projectName = testRunner.testCase.testSuite.project.name
def testSuiteName = testRunner.testCase.testSuite.name
def testCaseName = testRunner.testCase.name
def testStepName = context.getCurrentStep().getLabel()

log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName)

try {
	def switchId = funcHandle.sendCTR(seleniumHandle, javaHandle, browser, guiUrl, recipient, "TP10", "&lt;business>Y&lt;/business>", "COIN", "1389SS", "99999", null, false, contractId, null, wishDate, null, null, null);

	testRunner.testCase.setPropertyValue("switchId",switchId);
} catch (Exception e) {
	testRunner.fail(e.getClass().getSimpleName());
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table_CTR" id="8f80a1dc-c808-4352-820c-27cb605ee4ee">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier where 
ctd_contractid = '${#TestCase#contractId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: assert CTD_DOSSIER_STATUS]" id="ac17d9f6-9653-435c-bd0c-9af6917f2aa6">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_DOSSIER_STATUS[1]/text()</path>
              <content>Pending</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [CTD_DOSSIER_STATUS]" id="d34e8994-e69d-4e40-b3f2-4e8d12c2cca7">
            <con:configuration>
              <path>exists( //Results/ResultSet/Row/CTD_DOSSIER_STATUS)</path>
              <content>true</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert CTD_PROCESS_STATUS]" id="ede8cc08-99ab-46ca-baf4-97e9f0895428">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_PROCESS_STATUS[1]/text()</path>
              <content>Request</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: assert ion ctd_id switchid">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def ctdid = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctdId");
def switchid = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/CTD_SWITCHID[1]", "switchId");
log.info("Testcase dossierid: " + switchid)</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTR" id="2aaf032b-0712-4e34-a84d-8983fd890c91">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where dm_ctd_id = ${#TestCase#ctdId} 
and dm_mst_id=1 
order by createddate desc</con:query>
          <con:assertion type="XPath Match" id="22e366c7-6a4e-4580-9e30-c5cb86194c3d" name="Xpath: SoapVersion">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/IT_INTERFACE_TYPE[1]</path>
              <content>*${#TestSuite#soapVersion}*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="ca6dd690-beae-45f2-9776-731f93c50765" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/ID/text()</path>
              <content>${#TestCase#ctrDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="f735e37d-f530-4aa3-bfc6-0d6241bb92f5" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctrDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_CheckOutGoingMsgType" id="5dc5bfc7-4041-4cac-b18f-3a261863f084">
        <con:settings/>
        <con:config>
          <script>def dossierType = testRunner.testCase.getPropertyValue( "dossierType" )
def busguionly = testRunner.testCase.getPropertyValue( "businessGuiOnly" )
if (dossierType == '&lt;business>Y&lt;/business>' &amp;&amp; busguionly == 'true'){
    	  testRunner.gotoStepByName( "JDBC_ST Table_NoSend")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_CheckOutGoingMsgType1" id="bdd4a49e-b702-4175-a8cd-186a1bd93b50">
        <con:settings/>
        <con:config>
          <script>def outtype = testRunner.testCase.testSuite.getPropertyValue("recipientOutMsg")

if (outtype == 'SOAP') {
    	  testRunner.gotoStepByName( "Sel-CTRA Blocking 11")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_ST Table_NoSend" id="364f3735-7514-4809-b2f8-382532909177">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_transactions 
where st_sender='${#TestSuite#recipient}' and st_receiver='${#TestSuite#donor}' and st_send_received='SEND' and st_message like '%${#TestCase#switchId}%'</con:query>
          <con:assertion type="JDBC Status" id="cc45d6ef-2316-4378-b582-f321b46f2cc1" name="JDBC Status"/>
          <con:assertion type="Simple NotContains" id="9dc2a7bb-7c16-4bd1-980b-734fceb80acc" name="NotContains: Not Contains" disabled="true">
            <con:configuration>
              <token>&lt;Row rowNumber="1"></token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Sel-CTRA Blocking 11" id="ae25bb7f-dcf3-486d-b2db-85e6110cbde4">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.*;

def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def funcHandle = new ReadymadeFunctions();

def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser");
def recipient = testRunner.testCase.testSuite.getPropertyValue("recipient");
def donor = testRunner.testCase.testSuite.getPropertyValue("donor");
def dossierID = testRunner.testCase.getPropertyValue("switchId");
def donorDossierType = testRunner.testCase.testSuite.getPropertyValue("donorDossierType");
def proposeddate = testRunner.testCase.getPropertyValue("proposedDate");

def projectName = testRunner.testCase.testSuite.project.name;
def testSuiteName = testRunner.testCase.testSuite.name;
def testCaseName = testRunner.testCase.name;
def testStepName = context.getCurrentStep().getLabel();

log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName);

try {
	funcHandle.sendCTRA(seleniumHandle, javaHandle, browser, guiUrl, donor, dossierID, "", "11", proposeddate);
} catch (Exception e) {
	testRunner.fail(e.getClass().getSimpleName());
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table 1" id="6d5c82e6-b5cc-4bdc-a96b-e0e1605e3d24">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier 
where id='${#TestCase#ctdId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [ST_TRANSACTION_ID]" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//CTD_SWITCHID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_dossier_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_DOSSIER_STATUS</path>
              <content>Blocked</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_process_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_PROCESS_STATUS</path>
              <content>Request Answer Blocking</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="f1634f5b-7b26-4777-9ee7-2012c2678c07" name="Script: assert ion">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def ModifiedDate = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/CONTRACT_TERMINATION_DOSSIER.MODIFIEDDATE[1]", "ModifiedDate");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="f7e313a5-ef5e-4f86-9240-a10a978a2c21" name="Xpath: Verify ctp_buffering" disabled="true">
            <con:configuration>
              <path>//CTD_CTP_BUFFERING</path>
              <content>t</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTRA" id="3458675e-52f9-40e1-a0d2-1dfed41b9ada">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where dm_ctd_id = ${#TestCase#ctdId} 
and dm_mst_id=3 
order by createddate desc</con:query>
          <con:assertion type="XQuery Match" id="40cc6fa1-0d78-43c5-a10b-f043ddf625c6" name="XQuery Match">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/IT_INTERFACE_TYPE[1]</path>
              <content>GUI</content>
              <allowWildcards>true</allowWildcards>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="21389917-676a-4960-854d-5e83bad4edcb" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/ID/text()</path>
              <content>${#TestCase#ctrDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="dbf9c7e3-d8d8-41ca-93e4-4b119f6b76d0" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctraDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Delay0" id="cac2ae00-543d-42a1-962a-591c38f5a848">
        <con:settings/>
        <con:config>
          <delay>1</delay>
        </con:config>
      </con:testStep>
      <con:setupScript>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import groovy.time.TimeCategory
import java.util.Random
def today = new Date() 
def now = String.format('%tFT%&lt;tT', new Date() )
def wishdate = today 
def wishdatestr = wishdate.format("yyyy-MM-dd'T'HH:mm:ss")
def guiwishdatestr = wishdate.format("yyyy-MM-dd")
testRunner.testCase.setPropertyValue("Now",now)
testRunner.testCase.setPropertyValue("wishDate",wishdatestr)
testRunner.testCase.setPropertyValue("guiWishDate",guiwishdatestr)
String contractId = funcHandle.getRandomString(9, "2-");
testRunner.testCase.setPropertyValue("contractId",contractId)
Calendar cal = Calendar.getInstance()
cal.setTime(today)
cal.add(Calendar.YEAR, 1)
def proposeddate = cal.getTime()
def guiproposeddate =proposeddate.format("yyyy-MM-dd")
testRunner.testCase.setPropertyValue("ProposedDate",guiproposeddate)</con:setupScript>
      <con:tearDownScript/>
      <con:properties/>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>122d3297-f22d-449f-ac52-c46f1bfb714e</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="2.4 Business CTR-Consumer CTRA Wish date -Todays date Proposed date-Todays date+2 year" searchProperties="true" id="f14de93d-35bd-4083-9155-ec688dd23009" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" disabled="true">
      <con:settings>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">1000</con:setting>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting>
      </con:settings>
      <con:testStep type="groovy" name="Sel_CTR" id="4c4daf7e-cc3f-4668-a55b-f52de56fbbd7">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.*;

def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def funcHandle = new ReadymadeFunctions();

def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser")
def recipient = testRunner.testCase.testSuite.getPropertyValue("recipient")
def donor = testRunner.testCase.testSuite.getPropertyValue("donor")
def contractId = testRunner.testCase.getPropertyValue("contractId")
def dossierType = testRunner.testCase.testSuite.getPropertyValue("dossierType")
def wishDate = testRunner.testCase.getPropertyValue("wishDate")

def projectName = testRunner.testCase.testSuite.project.name
def testSuiteName = testRunner.testCase.testSuite.name
def testCaseName = testRunner.testCase.name
def testStepName = context.getCurrentStep().getLabel()

log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName)

try {
	def switchId = funcHandle.sendCTR(seleniumHandle, javaHandle, browser, guiUrl, recipient, "TP10", "&lt;business>Y&lt;/business>", "COIN", "1389SS", "99999", null, false, contractId, null, wishDate, null, null, null);

	testRunner.testCase.setPropertyValue("switchId",switchId);
} catch (Exception e) {
	testRunner.fail(e.getClass().getSimpleName());
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table_CTR" id="e672fc78-b372-40e3-b003-6385d9a45508">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier where 
ctd_contractid = '${#TestCase#contractId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: assert CTD_DOSSIER_STATUS]" id="ac17d9f6-9653-435c-bd0c-9af6917f2aa6">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_DOSSIER_STATUS[1]/text()</path>
              <content>Pending</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [CTD_DOSSIER_STATUS]" id="d34e8994-e69d-4e40-b3f2-4e8d12c2cca7">
            <con:configuration>
              <path>exists( //Results/ResultSet/Row/CTD_DOSSIER_STATUS)</path>
              <content>true</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert CTD_PROCESS_STATUS]" id="ede8cc08-99ab-46ca-baf4-97e9f0895428">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_PROCESS_STATUS[1]/text()</path>
              <content>Request</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: assert ion ctd_id switchid">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def ctdid = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctdId");
def switchid = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/CTD_SWITCHID[1]", "switchId");
log.info("Testcase dossierid: " + switchid)</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTR" id="77568729-14fa-41a9-b126-590b7f3bb496">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where dm_ctd_id = ${#TestCase#ctdId} 
and dm_mst_id=1 
order by createddate desc</con:query>
          <con:assertion type="XPath Match" id="22e366c7-6a4e-4580-9e30-c5cb86194c3d" name="Xpath: SoapVersion">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/IT_INTERFACE_TYPE[1]</path>
              <content>*${#TestSuite#soapVersion}*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="18bc5439-b445-4e31-9e4f-80538aadd058" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/ID/text()</path>
              <content>${#TestCase#ctrDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d3845ad1-3a3c-4fb7-9eb3-f9a974e69be6" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctrDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_CheckOutGoingMsgType" id="eb164089-d3cc-4d31-a19a-55707bcc27c9">
        <con:settings/>
        <con:config>
          <script>def dossierType = testRunner.testCase.getPropertyValue( "dossierType" )
def busguionly = testRunner.testCase.getPropertyValue( "businessGuiOnly" )
if (dossierType == '&lt;business>Y&lt;/business>' &amp;&amp; busguionly == 'true'){
    	  testRunner.gotoStepByName( "JDBC_ST Table_NoSend")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_CheckOutGoingMsgType1" id="2e97fce3-8b89-4a0d-9345-604374014807">
        <con:settings/>
        <con:config>
          <script>def outtype = testRunner.testCase.testSuite.getPropertyValue("recipientOutMsg")

if (outtype == 'SOAP') {
    	  testRunner.gotoStepByName( "Sel-CTRA Blocking 11")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_ST Table_NoSend" id="20e25dd3-11ec-4368-b26f-1d448b6147ff">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_transactions 
where st_sender='${#TestSuite#recipient}' and st_receiver='${#TestSuite#donor}' and st_send_received='SEND' and st_message like '%${#TestCase#switchId}%'</con:query>
          <con:assertion type="JDBC Status" id="cc45d6ef-2316-4378-b582-f321b46f2cc1" name="JDBC Status"/>
          <con:assertion type="Simple NotContains" id="9dc2a7bb-7c16-4bd1-980b-734fceb80acc" name="NotContains: Not Contains" disabled="true">
            <con:configuration>
              <token>&lt;Row rowNumber="1"></token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Sel-CTRA Blocking 11" id="4bbd5c4d-30f3-40be-813f-4ba617706601">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.*;

def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def funcHandle = new ReadymadeFunctions();

def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser");
def recipient = testRunner.testCase.testSuite.getPropertyValue("recipient");
def donor = testRunner.testCase.testSuite.getPropertyValue("donor");
def dossierID = testRunner.testCase.getPropertyValue("switchId");
def donorDossierType = testRunner.testCase.testSuite.getPropertyValue("donorDossierType");
def proposeddate = testRunner.testCase.getPropertyValue("proposedDate");

def projectName = testRunner.testCase.testSuite.project.name;
def testSuiteName = testRunner.testCase.testSuite.name;
def testCaseName = testRunner.testCase.name;
def testStepName = context.getCurrentStep().getLabel();

log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName);

try {
	funcHandle.sendCTRA(seleniumHandle, javaHandle, browser, guiUrl, donor, dossierID, "", "11", proposeddate);
} catch (Exception e) {
	testRunner.fail(e.getClass().getSimpleName());
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table 1" id="dc171475-0165-427d-a15f-f90f9801342c">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier 
where id='${#TestCase#ctdId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [ST_TRANSACTION_ID]" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//CTD_SWITCHID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_dossier_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_DOSSIER_STATUS</path>
              <content>Blocked</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_process_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_PROCESS_STATUS</path>
              <content>Request Answer Blocking</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="f1634f5b-7b26-4777-9ee7-2012c2678c07" name="Script: assert ion">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def ModifiedDate = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/CONTRACT_TERMINATION_DOSSIER.MODIFIEDDATE[1]", "ModifiedDate");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="f7e313a5-ef5e-4f86-9240-a10a978a2c21" name="Xpath: Verify ctp_buffering" disabled="true">
            <con:configuration>
              <path>//CTD_CTP_BUFFERING</path>
              <content>t</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTRA" id="384f81eb-3b82-4683-83c1-d92f10622339">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where dm_ctd_id = ${#TestCase#ctdId} 
and dm_mst_id=3 
order by createddate desc</con:query>
          <con:assertion type="XQuery Match" id="40cc6fa1-0d78-43c5-a10b-f043ddf625c6" name="XQuery Match">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/IT_INTERFACE_TYPE[1]</path>
              <content>GUI</content>
              <allowWildcards>true</allowWildcards>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="5d4dc9f4-44bb-4049-a30d-e5eb2053899a" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/ID/text()</path>
              <content>${#TestCase#ctrDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="6a9d5141-221b-46b1-a797-5f59e8aa8bce" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctraDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Delay0" id="7f9cfb75-2a43-4dc7-8002-dbb3bd7283fc">
        <con:settings/>
        <con:config>
          <delay>1</delay>
        </con:config>
      </con:testStep>
      <con:setupScript>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import groovy.time.TimeCategory
import java.util.Random
def today = new Date() 
def now = String.format('%tFT%&lt;tT', new Date() )
def wishdate = today 
def wishdatestr = wishdate.format("yyyy-MM-dd'T'HH:mm:ss")
def guiwishdatestr = wishdate.format("yyyy-MM-dd")
testRunner.testCase.setPropertyValue("Now",now)
testRunner.testCase.setPropertyValue("wishDate",wishdatestr)
testRunner.testCase.setPropertyValue("guiWishDate",guiwishdatestr)
String contractId = funcHandle.getRandomString(9, "2-");
testRunner.testCase.setPropertyValue("contractId",contractId)
Calendar cal = Calendar.getInstance()
cal.setTime(today)
cal.add(Calendar.YEAR, 2)
def proposeddate = cal.getTime()
def guiproposeddate =proposeddate.format("yyyy-MM-dd")
testRunner.testCase.setPropertyValue("ProposedDate",guiproposeddate)</con:setupScript>
      <con:tearDownScript/>
      <con:properties/>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>122d3297-f22d-449f-ac52-c46f1bfb714e</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="2.5 Business CTR-Consumer CTRA Wish date -Todays date Proposed date-Todays date+2 year and 1 day" searchProperties="true" id="c8197ca2-677c-4be3-9197-13e8ff8f14de" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" disabled="true">
      <con:settings>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">1000</con:setting>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting>
      </con:settings>
      <con:testStep type="groovy" name="Sel_CTR" id="88997475-723a-46b8-aa29-c9f4cd92d34c">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.*;

def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def funcHandle = new ReadymadeFunctions();

def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser")
def recipient = testRunner.testCase.testSuite.getPropertyValue("recipient")
def donor = testRunner.testCase.testSuite.getPropertyValue("donor")
def contractId = testRunner.testCase.getPropertyValue("contractId")
def dossierType = testRunner.testCase.testSuite.getPropertyValue("dossierType")
def wishDate = testRunner.testCase.getPropertyValue("wishDate")

def projectName = testRunner.testCase.testSuite.project.name
def testSuiteName = testRunner.testCase.testSuite.name
def testCaseName = testRunner.testCase.name
def testStepName = context.getCurrentStep().getLabel()

log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName)

try {
	def switchId = funcHandle.sendCTR(seleniumHandle, javaHandle, browser, guiUrl, recipient, "TP10", "&lt;business>Y&lt;/business>", "COIN", "1389SS", "99999", null, false, contractId, null, wishDate, null, null, null);

	testRunner.testCase.setPropertyValue("switchId",switchId);
} catch (Exception e) {
	testRunner.fail(e.getClass().getSimpleName());
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table_CTR" id="c9533474-daa9-411f-b977-94cefb2334d4">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier where 
ctd_contractid = '${#TestCase#contractId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: assert CTD_DOSSIER_STATUS]" id="ac17d9f6-9653-435c-bd0c-9af6917f2aa6">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_DOSSIER_STATUS[1]/text()</path>
              <content>Pending</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [CTD_DOSSIER_STATUS]" id="d34e8994-e69d-4e40-b3f2-4e8d12c2cca7">
            <con:configuration>
              <path>exists( //Results/ResultSet/Row/CTD_DOSSIER_STATUS)</path>
              <content>true</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert CTD_PROCESS_STATUS]" id="ede8cc08-99ab-46ca-baf4-97e9f0895428">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_PROCESS_STATUS[1]/text()</path>
              <content>Request</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: assert ion ctd_id switchid">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def ctdid = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctdId");
def switchid = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/CTD_SWITCHID[1]", "switchId");
log.info("Testcase dossierid: " + switchid)</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTR" id="668b76bb-da5c-4b50-bdba-4db3b14f8b72">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where dm_ctd_id = ${#TestCase#ctdId} 
and dm_mst_id=1 
order by createddate desc</con:query>
          <con:assertion type="XPath Match" id="22e366c7-6a4e-4580-9e30-c5cb86194c3d" name="Xpath: SoapVersion">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/IT_INTERFACE_TYPE[1]</path>
              <content>*${#TestSuite#soapVersion}*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6a47c0af-002a-4e01-91b7-b531a49dcc6d" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/ID/text()</path>
              <content>${#TestCase#ctrDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="a8bc6a7a-36ba-4155-8f1d-871e1d140a70" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctrDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_CheckOutGoingMsgType" id="a368e08e-bd61-45e2-95a9-41e7abbf4351">
        <con:settings/>
        <con:config>
          <script>def dossierType = testRunner.testCase.getPropertyValue( "dossierType" )
def busguionly = testRunner.testCase.getPropertyValue( "businessGuiOnly" )
if (dossierType == '&lt;business>Y&lt;/business>' &amp;&amp; busguionly == 'true'){
    	  testRunner.gotoStepByName( "JDBC_ST Table_NoSend")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_CheckOutGoingMsgType1" id="57fff9b9-f9ef-4052-936e-756482f838e9">
        <con:settings/>
        <con:config>
          <script>def outtype = testRunner.testCase.testSuite.getPropertyValue("recipientOutMsg")

if (outtype == 'SOAP') {
    	  testRunner.gotoStepByName( "Sel-CTRA Blocking 11")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_ST Table_NoSend" id="caeec680-2472-4dfd-8505-70d85d7898c1">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_transactions 
where st_sender='${#TestSuite#recipient}' and st_receiver='${#TestSuite#donor}' and st_send_received='SEND' and st_message like '%${#TestCase#switchId}%'</con:query>
          <con:assertion type="JDBC Status" id="cc45d6ef-2316-4378-b582-f321b46f2cc1" name="JDBC Status"/>
          <con:assertion type="Simple NotContains" id="9dc2a7bb-7c16-4bd1-980b-734fceb80acc" name="NotContains: Not Contains" disabled="true">
            <con:configuration>
              <token>&lt;Row rowNumber="1"></token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Sel-CTRA Blocking 11" id="20652a5e-a7e1-4582-9290-bef8a08e0113">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.SeleniumActions;
import nl.coin.Selenium.JavaActions;
def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser")
def recipient = testRunner.testCase.testSuite.getPropertyValue("recipient")
def donor = testRunner.testCase.testSuite.getPropertyValue("donor")
def contractId = testRunner.testCase.getPropertyValue("contractId")
def donorDossierType = testRunner.testCase.testSuite.getPropertyValue("donorDossierType")
def projectName = testRunner.testCase.testSuite.project.name
def testSuiteName = testRunner.testCase.testSuite.name
def testCaseName = testRunner.testCase.name
def testStepName = context.getCurrentStep().getLabel()
def switchId = testRunner.testCase.getPropertyValue("switchId")
//def dossierID = javaHandle.getDossierID(recipient, donor, contractId)
//log.info dossierID
log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName)
def driver = seleniumHandle.openBrowser(browser);
//Login to application
log.info seleniumHandle.browseURL(guiUrl);
log.info(driver.getTitle());
def sampleArray = seleniumHandle.getCredentials(donor)
log.info seleniumHandle.enterData("HomePage","userName", sampleArray[0]);
log.info seleniumHandle.enterData("HomePage","passWord", sampleArray[1]);
//log.info seleniumHandle.clickObject("HomePage","8HrsSession");
log.info seleniumHandle.clickObject("HomePage","login");
log.info seleniumHandle.clickObject("HomePage","dossiers");
log.info seleniumHandle.clickObject("HomePage","SearchTab");
log.info seleniumHandle.enterData("HomePage","DossierID",switchId);
sleep(1000)
log.info seleniumHandle.clickObject("HomePage","SearchButton");
log.info seleniumHandle.clickObject("HomePage","ViewDetailsSearch");
log.info seleniumHandle.enterDataSelectDropDown("HomePage","businessType", "Consumer");	
log.info seleniumHandle.enterDataSelectDropDownByValue("HomePage","ConsumerCTRAblockingCode", "11");
//Need to add verify element present for blocking code 11
log.info seleniumHandle.enterData("HomePage","requestAnswerNote",switchId);
sleep(10000)
log.info seleniumHandle.clickObject("HomePage","CTRAProposedDateIcon");
def proposeddate = testRunner.testCase.getPropertyValue("proposedDate")
def onlyDate = javaHandle.getDateFromFormat(proposeddate, "yyyy-MM-dd")
def monthYear = javaHandle.convertDateFormat(proposeddate, "yyyy-MM-dd", "MMMM yyyy")
//move calander to required month &amp; year
log.info seleniumHandle.moveCalenderToMonth("HomePage", "CTRAProposedDateRightIcon", "HomePage", "CTRAProposedDateCalHeader", monthYear)
//Click on the date
//log.info seleniumHandle.clickObject("xpath","//table[@id='errorBlockingCode11ProposedDateDpJs']//td[contains(@class,'selectable')]//a[text()="+onlyDate+"]", true);log.info seleniumHandle.verifyAttributeValue("xpath","//table[@id='errorBlockingCode11ProposedDateDpJs']//td//a[text()="+onlyDate+"]//following::td[1]", true,"class","select");
log.info "Cannot select Proposed date for  more than 2 years "
log.info seleniumHandle.clickObject("HomePage","sendRequestAnswer");
sleep(1000)
log.info seleniumHandle.getText("HomePage","ErrorresultMessage");
log.info seleniumHandle.quitBrowser();</script>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Delay0" id="ece1c506-accb-43de-841c-1591fbfe1d4f">
        <con:settings/>
        <con:config>
          <delay>1</delay>
        </con:config>
      </con:testStep>
      <con:setupScript>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import groovy.time.TimeCategory
import java.util.Random
def today = new Date() 
def now = String.format('%tFT%&lt;tT', new Date() )
def wishdate = today 
def wishdatestr = wishdate.format("yyyy-MM-dd'T'HH:mm:ss")
def guiwishdatestr = wishdate.format("yyyy-MM-dd")
testRunner.testCase.setPropertyValue("Now",now)
testRunner.testCase.setPropertyValue("wishDate",wishdatestr)
testRunner.testCase.setPropertyValue("guiWishDate",guiwishdatestr)
String contractId = funcHandle.getRandomString(9, "2-");
testRunner.testCase.setPropertyValue("contractId",contractId)
Calendar cal = Calendar.getInstance()
cal.setTime(today)
cal.add(Calendar.YEAR, 2)
def proposeddate = cal.getTime()
def guiproposeddate =proposeddate.format("yyyy-MM-dd")
testRunner.testCase.setPropertyValue("ProposedDate",guiproposeddate)</con:setupScript>
      <con:tearDownScript/>
      <con:properties/>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>122d3297-f22d-449f-ac52-c46f1bfb714e</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="3.1 Consumer CTR-Business CTRA-No-Blocking code 11" searchProperties="true" id="da9d83d9-1489-4f2f-a82b-20e4d0eb704f" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" disabled="true">
      <con:settings>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">1000</con:setting>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting>
      </con:settings>
      <con:testStep type="groovy" name="Sel_CTR" id="05c781af-06ac-45bd-8dbf-720fedcbf9a7">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.*;

def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def funcHandle = new ReadymadeFunctions();

def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser")
def recipient = testRunner.testCase.testSuite.getPropertyValue("recipient")
def donor = testRunner.testCase.testSuite.getPropertyValue("donor")
def contractId = testRunner.testCase.getPropertyValue("contractId")
def dossierType = testRunner.testCase.testSuite.getPropertyValue("dossierType")
def wishDate = testRunner.testCase.getPropertyValue("wishDate")

def projectName = testRunner.testCase.testSuite.project.name
def testSuiteName = testRunner.testCase.testSuite.name
def testCaseName = testRunner.testCase.name
def testStepName = context.getCurrentStep().getLabel()

log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName)

try {
	def switchId = funcHandle.sendCTR(seleniumHandle, javaHandle, browser, guiUrl, recipient, "TP10", "", "COIN", "1389SS", "99999", null, false, contractId, null, wishDate, null, null, null);

	testRunner.testCase.setPropertyValue("switchId",switchId);
} catch (Exception e) {
	testRunner.fail(e.getClass().getSimpleName());
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table_CTR" id="442d3ab6-0162-4d14-a4a2-70e9c45cb5b4">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier where 
ctd_contractid = '${#TestCase#contractId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: assert CTD_DOSSIER_STATUS]" id="ac17d9f6-9653-435c-bd0c-9af6917f2aa6">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_DOSSIER_STATUS[1]/text()</path>
              <content>Pending</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [CTD_DOSSIER_STATUS]" id="d34e8994-e69d-4e40-b3f2-4e8d12c2cca7">
            <con:configuration>
              <path>exists( //Results/ResultSet/Row/CTD_DOSSIER_STATUS)</path>
              <content>true</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert CTD_PROCESS_STATUS]" id="ede8cc08-99ab-46ca-baf4-97e9f0895428">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_PROCESS_STATUS[1]/text()</path>
              <content>Request</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: assert ion ctd_id switchid">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def ctdid = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctdId");
def switchid = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/CTD_SWITCHID[1]", "switchId");
log.info("Testcase dossierid: " + switchid)</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTR" id="162c1efd-6efb-485f-8ad0-211cd3aa0b6d">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where dm_ctd_id = ${#TestCase#ctdId} 
and dm_mst_id=1 
order by createddate desc</con:query>
          <con:assertion type="XPath Match" id="22e366c7-6a4e-4580-9e30-c5cb86194c3d" name="Xpath: SoapVersion">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/IT_INTERFACE_TYPE[1]</path>
              <content>*${#TestSuite#soapVersion}*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b7dcb237-65d1-427f-bb43-02ecbfa32134" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/ID/text()</path>
              <content>${#TestCase#ctrDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="7d05ef2f-8d04-4cf1-bcc9-18a78ed8fe3c" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctrDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_CheckOutGoingMsgType" id="d6f55682-b0d7-48bc-b668-7dd54f1ddbe0">
        <con:settings/>
        <con:config>
          <script>def outtype = testRunner.testCase.testSuite.getPropertyValue("recipientOutMsg")

if (outtype == 'EMAIL') {
    	  testRunner.gotoStepByName( "JDBC_ST Table_NoSend")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_CTR" id="72f27dab-d6bb-4a21-8b08-1ea901f7dfe5">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where
sxm_xml_message like '%${#TestCase#switchId}%'
and sxm_xml_message_type = 'Request'
and sxm_sender = '${#TestSuite#recipient}'
and sxm_receiver = '${#TestSuite#donor}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [ST_TRANSACTION_ID]" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//ID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" name="Contains: Contains" id="a1e1b0ed-fff7-4f8c-9eba-dee62ae7b198">
            <con:configuration>
              <token>contractterminationrequest</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6c4dac59-737d-4969-bf30-85d9166e950e" name="Xpath: 1">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/SXM_XML_MESSAGE[1]</path>
              <content>*&lt;/${#TestSuite#donorSoapVersion}>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="0e3b3ffb-e031-4743-b0cb-971e01700e67" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/SXM_DM_ID/text()</path>
              <content>${#TestCase#ctrDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="86682f29-a391-4244-9b74-cb0da266bde5" name="Xpath: assert SXMID" disabled="true">
            <con:configuration>
              <path>/Results/ResultSet/Row/ID/text()</path>
              <content>${#TestCase#stSXMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_CheckOutGoingMsgType1" id="f5039899-287f-4654-8b0a-52140e63c267">
        <con:settings/>
        <con:config>
          <script>def outtype = testRunner.testCase.testSuite.getPropertyValue("recipientOutMsg")

if (outtype == 'SOAP') {
    	  testRunner.gotoStepByName( "Sel-CTRA Blocking 11")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_ST Table_NoSend" id="c966914c-b978-488c-9101-680ef770c053">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_transactions 
where st_sender='${#TestSuite#recipient}' and st_receiver='${#TestSuite#donor}' and st_send_received='SEND' and st_message like '%${#TestCase#switchId}%'</con:query>
          <con:assertion type="JDBC Status" id="cc45d6ef-2316-4378-b582-f321b46f2cc1" name="JDBC Status"/>
          <con:assertion type="Simple NotContains" id="9dc2a7bb-7c16-4bd1-980b-734fceb80acc" name="NotContains: Not Contains">
            <con:configuration>
              <token>&lt;Row rowNumber="1"></token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Sel-CTRA Blocking 11" id="9defbb5a-a8c5-4515-980d-cae423a29f8e">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.*;

def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def funcHandle = new ReadymadeFunctions();

def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser");
def recipient = testRunner.testCase.testSuite.getPropertyValue("recipient");
def donor = testRunner.testCase.testSuite.getPropertyValue("donor");
def dossierID = testRunner.testCase.getPropertyValue("switchId");
def donorDossierType = testRunner.testCase.testSuite.getPropertyValue("donorDossierType");
def proposeddate = testRunner.testCase.getPropertyValue("proposedDate");

def projectName = testRunner.testCase.testSuite.project.name;
def testSuiteName = testRunner.testCase.testSuite.name;
def testCaseName = testRunner.testCase.name;
def testStepName = context.getCurrentStep().getLabel();

log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName);

try {
	funcHandle.sendCTRA(seleniumHandle, javaHandle, browser, guiUrl, donor, dossierID, "", "11", proposeddate);
} catch (Exception e) {
	testRunner.fail(e.getClass().getSimpleName());
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table 1" id="b7beff0c-4f20-49d1-9d5d-1b86a9889152">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier 
where id='${#TestCase#ctdId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [ST_TRANSACTION_ID]" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//CTD_SWITCHID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_dossier_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_DOSSIER_STATUS</path>
              <content>Blocked</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_process_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_PROCESS_STATUS</path>
              <content>Request Answer Blocking</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="f1634f5b-7b26-4777-9ee7-2012c2678c07" name="Script: assert ion">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def ModifiedDate = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/CONTRACT_TERMINATION_DOSSIER.MODIFIEDDATE[1]", "ModifiedDate");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="f7e313a5-ef5e-4f86-9240-a10a978a2c21" name="Xpath: Verify ctp_buffering" disabled="true">
            <con:configuration>
              <path>//CTD_CTP_BUFFERING</path>
              <content>t</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTRA" id="215e08fe-50fb-422f-90cb-159869471800">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where dm_ctd_id = ${#TestCase#ctdId} 
and dm_mst_id=3 
order by createddate desc</con:query>
          <con:assertion type="XQuery Match" id="40cc6fa1-0d78-43c5-a10b-f043ddf625c6" name="XQuery Match">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/IT_INTERFACE_TYPE[1]</path>
              <content>GUI</content>
              <allowWildcards>true</allowWildcards>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="8a33541b-3720-4064-9572-6398e3a00019" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/ID/text()</path>
              <content>${#TestCase#ctrDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="ebd0036a-cb00-4737-b59b-51aa133bc3af" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctraDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_check SXM Create_CTRA" id="6a769743-10df-45ff-b4de-e15dca266970">
        <con:settings/>
        <con:config>
          <script>def outtype = testRunner.testCase.testSuite.getPropertyValue("donorOutMsg")

if (outtype == 'EMAIL') {
    	  testRunner.gotoStepByName("JDBC_SXM Table_NoRecord_CTRA")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_CTR" id="a7f8a54f-5bf0-435f-8800-4a63e55a976d">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where
sxm_xml_message like '%${#TestCase#switchId}%'
and sxm_xml_message_type = 'Request answer'
and sxm_sender = '${#TestSuite#donor}'
and sxm_receiver = '${#TestSuite#recipient}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [SXM_ID]" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//ID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="05ae5fdf-78e9-4f49-bb59-edefc9ff0d94" name="Xpath: XPath Match">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/SXM_XML_MESSAGE[1]</path>
              <content>*&lt;/${#TestSuite#recSoap}>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="81ff77ff-f8eb-43aa-b40d-42cb951150d9" name="Xpath: soapversion">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/SXM_XML_MESSAGE[1]</path>
              <content>*&lt;/${#TestSuite#recSoap}>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_check SXM Create1_CTRA" id="3725e78f-ff85-48db-be54-b1d2c55d219a">
        <con:settings/>
        <con:config>
          <script>def outtype = testRunner.testCase.testSuite.getPropertyValue("donorOutMsg")

if (outtype == 'SOAP') {
    	  testRunner.gotoStepByName( "send CTP")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_NoRecord_CTRA" id="aa8add4a-03e3-4976-9a02-13965d154aad">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where
sxm_xml_message like '%${#TestCase#switchId}%'
and sxm_xml_message_type = 'Request answer'
and sxm_sender = '${#TestSuite#donor}'
and sxm_receiver = '${#TestSuite#recipient}'
--and sxm_retry_count &lt;=1</con:query>
          <con:assertion type="Simple NotContains" id="b6d5ae98-57ce-4e00-9ffd-14dd43eb4e5f" name="NotContains: Not Contains">
            <con:configuration>
              <token>&lt;Row rowNumber="1"></token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="7794bbea-cce8-479d-8258-d1afc5a5912d" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>0</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Delay0" id="13d50a05-0f95-4e23-86ed-148e2fe9e1e3">
        <con:settings/>
        <con:config>
          <delay>1</delay>
        </con:config>
      </con:testStep>
      <con:setupScript>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import groovy.time.TimeCategory
import java.util.Random
def maxdays = testRunner.testCase.testSuite.getPropertyValue("MaxDays")
def maxbusdays = testRunner.testCase.testSuite.getPropertyValue("MaxBusinessDays")
def business = testRunner.testCase.testSuite.getPropertyValue("dossierType")
int maxadddays = 0
if (business == '&lt;business>Y&lt;/business>'){
     maxadddays = maxbusdays as int
}
else {
     maxadddays = maxdays as int
}
Random rnd = new Random()
int plusdays = 1 + rnd.nextInt(maxadddays)
def today = new Date() 
def now = String.format('%tFT%&lt;tT', new Date() )
def wishdate = today 
def wishdatestr = wishdate.format("yyyy-MM-dd'T'HH:mm:ss")
def guiwishdatestr = wishdate.format("yyyy-MM-dd")
testRunner.testCase.setPropertyValue("Now",now)
testRunner.testCase.setPropertyValue("wishDate",wishdatestr)
testRunner.testCase.setPropertyValue("guiWishDate",guiwishdatestr)
String contractId = funcHandle.getRandomString(9, "2-");
testRunner.testCase.setPropertyValue("contractId",contractId)
def proposeddate = today
def guiproposeddate =proposeddate.format("yyyy-MM-dd")
testRunner.testCase.setPropertyValue("ProposedDate",guiproposeddate)</con:setupScript>
      <con:tearDownScript/>
      <con:properties/>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>122d3297-f22d-449f-ac52-c46f1bfb714e</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="3.2 Consumer CTR-Consumer CTRA-No-Blocking code 11" searchProperties="true" id="ddd9433f-3be7-4db9-a68d-092ed9c340b4" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" disabled="true">
      <con:settings>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">1000</con:setting>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting>
      </con:settings>
      <con:testStep type="groovy" name="Sel_CTR" id="81db70d1-59c0-4063-9a62-531de33c5d87">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.*;

def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def funcHandle = new ReadymadeFunctions();

def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser")
def recipient = testRunner.testCase.testSuite.getPropertyValue("recipient")
def donor = testRunner.testCase.testSuite.getPropertyValue("donor")
def contractId = testRunner.testCase.getPropertyValue("contractId")
def dossierType = testRunner.testCase.testSuite.getPropertyValue("dossierType")
def wishDate = testRunner.testCase.getPropertyValue("wishDate")

def projectName = testRunner.testCase.testSuite.project.name
def testSuiteName = testRunner.testCase.testSuite.name
def testCaseName = testRunner.testCase.name
def testStepName = context.getCurrentStep().getLabel()

log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName)

try {
	def switchId = funcHandle.sendCTR(seleniumHandle, javaHandle, browser, guiUrl, recipient, "TP10", "", "COIN", "1389SS", "99999", null, false, contractId, null, wishDate, null, null, null);

	testRunner.testCase.setPropertyValue("switchId",switchId);
} catch (Exception e) {
	testRunner.fail(e.getClass().getSimpleName());
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table_CTR" id="ac3d0706-da32-4a27-a314-b66b3a8571f6">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier where 
ctd_contractid = '${#TestCase#contractId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: assert CTD_DOSSIER_STATUS]" id="ac17d9f6-9653-435c-bd0c-9af6917f2aa6">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_DOSSIER_STATUS[1]/text()</path>
              <content>Pending</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [CTD_DOSSIER_STATUS]" id="d34e8994-e69d-4e40-b3f2-4e8d12c2cca7">
            <con:configuration>
              <path>exists( //Results/ResultSet/Row/CTD_DOSSIER_STATUS)</path>
              <content>true</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert CTD_PROCESS_STATUS]" id="ede8cc08-99ab-46ca-baf4-97e9f0895428">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_PROCESS_STATUS[1]/text()</path>
              <content>Request</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: assert ion ctd_id switchid">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def ctdid = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctdId");
def switchid = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/CTD_SWITCHID[1]", "switchId");
log.info("Testcase dossierid: " + switchid)</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTR" id="cb32ae13-4ca8-4162-865b-574cacc3d720">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where dm_ctd_id = ${#TestCase#ctdId} 
and dm_mst_id=1 
order by createddate desc</con:query>
          <con:assertion type="XPath Match" id="22e366c7-6a4e-4580-9e30-c5cb86194c3d" name="Xpath: SoapVersion">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/IT_INTERFACE_TYPE[1]</path>
              <content>*${#TestSuite#soapVersion}*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="8a0b2cce-1916-4c8d-b420-db952087c0a6" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/ID/text()</path>
              <content>${#TestCase#ctrDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="c92a2a1f-2d4b-4d2a-aaf5-0de1f9e909d1" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctrDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_CheckOutGoingMsgType" id="be3a9175-c9da-482a-be68-5db715fe9f7c">
        <con:settings/>
        <con:config>
          <script>def outtype = testRunner.testCase.testSuite.getPropertyValue("recipientOutMsg")

if (outtype == 'EMAIL') {
    	  testRunner.gotoStepByName( "JDBC_ST Table_NoSend")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_CTR" id="a6d9b643-af6e-4e24-92b4-cf44d2721d0f">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where
sxm_xml_message like '%${#TestCase#switchId}%'
and sxm_xml_message_type = 'Request'
and sxm_sender = '${#TestSuite#recipient}'
and sxm_receiver = '${#TestSuite#donor}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [ST_TRANSACTION_ID]" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//ID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" name="Contains: Contains" id="a1e1b0ed-fff7-4f8c-9eba-dee62ae7b198">
            <con:configuration>
              <token>contractterminationrequest</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6c4dac59-737d-4969-bf30-85d9166e950e" name="Xpath: 1">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/SXM_XML_MESSAGE[1]</path>
              <content>*&lt;/${#TestSuite#donorSoapVersion}>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="bd6e8874-d099-409c-a39a-d9ffee3a2269" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/SXM_DM_ID/text()</path>
              <content>${#TestCase#ctrDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="d19f64bc-6341-47ce-81c7-a9a44bffb24d" name="Xpath: assert SXMID" disabled="true">
            <con:configuration>
              <path>/Results/ResultSet/Row/ID/text()</path>
              <content>${#TestCase#stSXMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_CheckOutGoingMsgType1" id="14c72fdb-a89c-47bb-a543-b4b44bec8a12">
        <con:settings/>
        <con:config>
          <script>def outtype = testRunner.testCase.testSuite.getPropertyValue("recipientOutMsg")

if (outtype == 'SOAP') {
    	  testRunner.gotoStepByName( "Sel-CTRA Blocking 11")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_ST Table_NoSend" id="ae55f99d-a2cd-4d82-aef4-390d5f4babba">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_transactions 
where st_sender='${#TestSuite#recipient}' and st_receiver='${#TestSuite#donor}' and st_send_received='SEND' and st_message like '%${#TestCase#switchId}%'</con:query>
          <con:assertion type="JDBC Status" id="cc45d6ef-2316-4378-b582-f321b46f2cc1" name="JDBC Status"/>
          <con:assertion type="Simple NotContains" id="9dc2a7bb-7c16-4bd1-980b-734fceb80acc" name="NotContains: Not Contains">
            <con:configuration>
              <token>&lt;Row rowNumber="1"></token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Sel-CTRA Blocking 11" id="259bc1e2-3013-4ff7-bbc2-0e0d2ed59cde">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.*;

def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def funcHandle = new ReadymadeFunctions();

def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser");
def recipient = testRunner.testCase.testSuite.getPropertyValue("recipient");
def donor = testRunner.testCase.testSuite.getPropertyValue("donor");
def dossierID = testRunner.testCase.getPropertyValue("switchId");
def donorDossierType = testRunner.testCase.testSuite.getPropertyValue("donorDossierType");
def proposeddate = testRunner.testCase.getPropertyValue("proposedDate");

def projectName = testRunner.testCase.testSuite.project.name;
def testSuiteName = testRunner.testCase.testSuite.name;
def testCaseName = testRunner.testCase.name;
def testStepName = context.getCurrentStep().getLabel();

log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName);

try {
	funcHandle.sendCTRA(seleniumHandle, javaHandle, browser, guiUrl, donor, dossierID, "", "11", proposeddate);
} catch (Exception e) {
	testRunner.fail(e.getClass().getSimpleName());
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table 1" id="0bdd177b-b98a-41ef-8355-0cd8fd647508">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier 
where id='${#TestCase#ctdId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [ST_TRANSACTION_ID]" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//CTD_SWITCHID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_dossier_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_DOSSIER_STATUS</path>
              <content>Blocked</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_process_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_PROCESS_STATUS</path>
              <content>Request Answer Blocking</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="f1634f5b-7b26-4777-9ee7-2012c2678c07" name="Script: assert ion">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def ModifiedDate = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/CONTRACT_TERMINATION_DOSSIER.MODIFIEDDATE[1]", "ModifiedDate");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="f7e313a5-ef5e-4f86-9240-a10a978a2c21" name="Xpath: Verify ctp_buffering" disabled="true">
            <con:configuration>
              <path>//CTD_CTP_BUFFERING</path>
              <content>t</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTRA" id="4fdff66e-0a97-4eef-be81-946c4e5b541e">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where dm_ctd_id = ${#TestCase#ctdId} 
and dm_mst_id=3 
order by createddate desc</con:query>
          <con:assertion type="XQuery Match" id="40cc6fa1-0d78-43c5-a10b-f043ddf625c6" name="XQuery Match">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/IT_INTERFACE_TYPE[1]</path>
              <content>GUI</content>
              <allowWildcards>true</allowWildcards>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="185c8882-1aa3-4800-bde7-ec860e9b0f23" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/ID/text()</path>
              <content>${#TestCase#ctrDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="bdf489bd-ff8f-4ebe-be68-2b8d27d0bfad" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctraDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_check SXM Create_CTRA" id="2f732ca5-9b77-4676-af5c-a87fba8842dd">
        <con:settings/>
        <con:config>
          <script>def outtype = testRunner.testCase.testSuite.getPropertyValue("donorOutMsg")

if (outtype == 'EMAIL') {
    	  testRunner.gotoStepByName("JDBC_SXM Table_NoRecord_CTRA")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_CTR" id="a3144f7b-bfb8-411a-a42f-4b45429eebb8">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where
sxm_xml_message like '%${#TestCase#switchId}%'
and sxm_xml_message_type = 'Request answer'
and sxm_sender = '${#TestSuite#donor}'
and sxm_receiver = '${#TestSuite#recipient}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [SXM_ID]" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//ID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="05ae5fdf-78e9-4f49-bb59-edefc9ff0d94" name="Xpath: XPath Match">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/SXM_XML_MESSAGE[1]</path>
              <content>*&lt;/${#TestSuite#recSoap}>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="81ff77ff-f8eb-43aa-b40d-42cb951150d9" name="Xpath: soapversion">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/SXM_XML_MESSAGE[1]</path>
              <content>*&lt;/${#TestSuite#recSoap}>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_check SXM Create1_CTRA" id="677967ed-1697-429e-9731-710218b4d35f">
        <con:settings/>
        <con:config>
          <script>def outtype = testRunner.testCase.testSuite.getPropertyValue("donorOutMsg")

if (outtype == 'SOAP') {
    	  testRunner.gotoStepByName( "send CTP")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_NoRecord_CTRA" id="9396d4ce-2f88-442b-982a-db04d1676531">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#TestSuite#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where
sxm_xml_message like '%${#TestCase#switchId}%'
and sxm_xml_message_type = 'Request answer'
and sxm_sender = '${#TestSuite#donor}'
and sxm_receiver = '${#TestSuite#recipient}'
--and sxm_retry_count &lt;=1</con:query>
          <con:assertion type="Simple NotContains" id="b6d5ae98-57ce-4e00-9ffd-14dd43eb4e5f" name="NotContains: Not Contains">
            <con:configuration>
              <token>&lt;Row rowNumber="1"></token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="627785c6-a43e-4e02-834d-a571844d18b3" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>0</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Delay0" id="bdce7e94-b4dc-49cb-8eae-61ee1eb2a5e1">
        <con:settings/>
        <con:config>
          <delay>1</delay>
        </con:config>
      </con:testStep>
      <con:setupScript>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import groovy.time.TimeCategory
import java.util.Random
def maxdays = testRunner.testCase.testSuite.getPropertyValue("MaxDays")
def maxbusdays = testRunner.testCase.testSuite.getPropertyValue("MaxBusinessDays")
def business = testRunner.testCase.testSuite.getPropertyValue("dossierType")
int maxadddays = 0
if (business == '&lt;business>Y&lt;/business>'){
     maxadddays = maxbusdays as int
}
else {
     maxadddays = maxdays as int
}
Random rnd = new Random()
int plusdays = 1 + rnd.nextInt(maxadddays)
def today = new Date() 
def now = String.format('%tFT%&lt;tT', new Date() )
def wishdate = today 
def wishdatestr = wishdate.format("yyyy-MM-dd'T'HH:mm:ss")
def guiwishdatestr = wishdate.format("yyyy-MM-dd")
testRunner.testCase.setPropertyValue("Now",now)
testRunner.testCase.setPropertyValue("wishDate",wishdatestr)
testRunner.testCase.setPropertyValue("guiWishDate",guiwishdatestr)
String contractId = funcHandle.getRandomString(9, "2-");
testRunner.testCase.setPropertyValue("contractId",contractId)
def proposeddate = today
def guiproposeddate =proposeddate.format("yyyy-MM-dd")
testRunner.testCase.setPropertyValue("ProposedDate",guiproposeddate)</con:setupScript>
      <con:tearDownScript/>
      <con:properties/>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>122d3297-f22d-449f-ac52-c46f1bfb714e</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:properties>
      <con:property>
        <con:name>PollTime</con:name>
        <con:value>20000</con:value>
      </con:property>
      <con:property>
        <con:name>DBHostname</con:name>
        <con:value>127.0.0.1</con:value>
      </con:property>
      <con:property>
        <con:name>DBPort</con:name>
        <con:value>8088</con:value>
      </con:property>
      <con:property>
        <con:name>DBUser</con:name>
        <con:value>comp</con:value>
      </con:property>
      <con:property>
        <con:name>DBPassword</con:name>
        <con:value>comp</con:value>
      </con:property>
      <con:property>
        <con:name>DBDatabase</con:name>
        <con:value>compv3_4</con:value>
      </con:property>
      <con:property>
        <con:name>lineNumber</con:name>
        <con:value>0</con:value>
      </con:property>
      <con:property>
        <con:name>InterfaceType</con:name>
        <con:value>GUI</con:value>
      </con:property>
      <con:property>
        <con:name>testdatafile</con:name>
        <con:value>ov21gui.csv</con:value>
      </con:property>
      <con:property>
        <con:name>browser</con:name>
        <con:value>firefox</con:value>
      </con:property>
    </con:properties>
    <con:setupScript>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
import org.apache.commons.lang.RandomStringUtils
import groovy.time.TimeCategory
import nl.coin.Selenium.*;
def directory = groovyUtils.projectPath + "/"
System.setProperty("projectfiledir", directory)
def seleniumHandle = new SeleniumActions();
def funcHandle = new ReadymadeFunctions();
def Line = funcHandle.getTestDataAndIncreaseLinenumber(testSuite, directory);
String[] propData = Line.split(";")
//Split the first line into a string array and assign the array elements to various test case properties
funcHandle.setRecipientAndDonorSoapCredentials(seleniumHandle, testSuite, directory, propData[0], propData[1]);
testSuite.setPropertyValue("InterfaceType",propData[2])
import groovy.sql.Sql;
def  con = funcHandle.createDBConObject(testSuite);
funcHandle.setProperty4mDB(testSuite, con, "select id from overstappen.service_provider where spr_code='"+ propData[0]+"'", "id", "recipientId")
funcHandle.setProperty4mDB(testSuite, con, "select id from overstappen.service_provider where spr_code='"+ propData[1]+"'", "id", "donorId");
def recepientDetails = funcHandle.setProperty4mDB(testSuite, con, "select spr_code, it_interface_type,business_gui_only from overstappen.service_provider inner join overstappen.interface_type on service_provider.spr_request_it_id = interface_type.id where service_provider.spr_code = '"+ propData[0]+"'", ["business_gui_only", "it_interface_type"] as String[], ["recipientbgo", "recipientif"] as String[]);
def donorDetails = funcHandle.setProperty4mDB(testSuite, con, "select spr_code, it_interface_type,business_gui_only from overstappen.service_provider inner join overstappen.interface_type on service_provider.spr_request_it_id = interface_type.id where service_provider.spr_code = '"+ propData[1]+"'", ["business_gui_only", "it_interface_type"] as String[], ["donorbgo", "donorif"] as String[]);
funcHandle.getOutgoingMsgTypeAndSetProperty(testSuite, propData[3], recepientDetails[0], recepientDetails[1], "donorOutMsg");
funcHandle.getOutgoingMsgTypeAndSetProperty(testSuite, propData[3], donorDetails[0], donorDetails[1], "recipientOutMsg");
con.close()</con:setupScript>
    <con:tearDownScript/>
    <con:reportParameters/>
  </con:testSuite>
  <con:testSuite name="OV-42" id="6a380617-60bc-4f08-80f9-58ae4ac5f936">
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="start block with 20 digits" searchProperties="true" id="0290c133-7033-4d25-baba-6fe4532744ce" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:settings>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">1000</con:setting>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting>
      </con:settings>
      <con:testStep type="request" name="CTR-Sunny Day" id="7dfc0912-ba09-4d0d-9316-2966ec603789">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>CompWebserviceSoap11</con:interface>
          <con:operation>SendMessages</con:operation>
          <con:request name="CTR-Sunny Day" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordText" id="3aa22f8f-37c1-4ea2-ba88-b80068a3761f">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#SoapUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="http://coin.nl/ws/schema">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:SendMessagesRequest>
         <sch:Sender>${#TestSuite#recipient}</sch:Sender>
         <sch:Messages>
            <sch:Message>
               <sch:Text><![CDATA[<?xml version="1.0"?>
<message xmlns="http://www.coin.nl/Overstappen_MESSAGES">
<header>
<receiver>
<!--Optional:-->
<networkoperator>${#TestSuite#donor}</networkoperator>
<!--Optional:-->
<serviceprovider>${#TestSuite#donor}</serviceprovider>
</receiver>
<sender>
<!--Optional:-->
<networkoperator>${#TestSuite#recipient}</networkoperator>
<!--Optional:-->
<serviceprovider>${#TestSuite#recipient}</serviceprovider>
</sender>
<!--Optional:-->
<messageid>${#TestSuite#recipient}-${#TestCase#contractId}-01</messageid>
<timestamp>${#TestSuite#TimestampNOW}</timestamp>
</header>
<body>
<contractterminationrequest>
<${#TestSuite#soapVersion}>
<dossierid>${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01</dossierid>
<!--Optional:-->
<recipientserviceprovider>${#TestSuite#recipient}</recipientserviceprovider>
<!--Optional:-->
<recipientnetworkoperator>${#TestSuite#recipient}</recipientnetworkoperator>
<!--Optional:-->
<donornetworkoperator>${#TestSuite#donor}</donornetworkoperator>
<!--Optional:-->
<donorserviceprovider>${#TestSuite#donor}</donorserviceprovider>
<wishdatetime>${#TestCase#wishdate}</wishdatetime>
${#TestSuite#dossierType}
${#TestSuite#compensationOK}
<name>COIN</name>
<addressblock>
 	<postcode>1389SS</postcode>
	<housenr>99999</housenr>
</addressblock>
<numberseries>
     <start>01234567890123456789</start>
     <end>0173112233</end>
</numberseries>
<validationblock>
    <name>contractid</name>
    <value>2-${#TestCase#contractID}</value>
 </validationblock>
<note>Sunny day-sent ${#TestSuite#soapVersion} expect ${#TestSuite#donorSoapVersion}-linenr. ${#TestSuite#lineNumber}</note>
</${#TestSuite#soapVersion}>
</contractterminationrequest>
</body>
</message>]]]]>><![CDATA[</sch:Text>
            </sch:Message>
         </sch:Messages>
      </sch:SendMessagesRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="XPath Match" name="Match content of [ns2:TransactionId] using RegEx" id="1c471417-807a-4012-a734-b2dd5be94c8f">
              <con:configuration>
                <path>declare namespace ns2='http://coin.nl/ws/schema';
//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]/text()</path>
                <content>*</content>
                <allowWildcards>true</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" name="Check count of [ns2:TransactionId]" id="345c96a3-89a0-476e-9875-b0c18e04ef5b">
              <con:configuration>
                <path>declare namespace ns2='http://coin.nl/ws/schema';
count( //ns2:SendMessagesResponse/ns2:TransactionId)</path>
                <content>1</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert node [ns2:TransactionId]" id="63f77b9d-d209-4d74-ad56-a26982ab75c5">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
//def groovyUtilsPro = new com.eviware.soapui.support.GroovyUtilsPro( context )

def holder = new XmlHolder( messageExchange.responseContentAsXml )
holder.namespaces["ns2"] = "http://coin.nl/ws/schema"
def transactionId = holder.getNodeValue( "//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]" )
messageExchange.modelItem.testStep.testCase.setPropertyValue("transactionId",transactionId)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#TestSuite#recipientUserName}</con:username>
              <con:password>${#TestSuite#recipientPassWord}</con:password>
              <con:domain xsi:nil="true"/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://coin.nl/SendMessages"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_ST Table" id="3961dd78-98df-4750-a064-ea1d2765fa75">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_transactions 
where st_transaction_id = '${#TestCase#transactionId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Verify TransactionId" id="0314e1fa-b1cb-4932-bba8-55dd87029a85">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_TRANSACTION_ID[1]</path>
              <content>${#TestCase#transactionId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify ST_SEND_RECEIVED" id="9db0e630-c611-4fc1-b0bc-fb6028a6a7c3">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_SEND_RECEIVED[1]</path>
              <content>received</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" name="Contains: Contain message Type" id="85caea84-7bde-4674-9d00-009229cb7411">
            <con:configuration>
              <token>&amp;lt;contractterminationrequest&amp;gt;</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="77af631e-a991-48c5-b7c6-43b4c54de0ad" name="Script: store SoapTransaction.id">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "Id");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="f07eb502-0db3-4f37-9b45-96de0e252fba" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="6d306476-bff4-46ae-818c-5ebc90b256b6" name="Xpath: assert UserIP" disabled="true">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_IP/text()</path>
              <content>${#Project#UserIP}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="06f7c2d7-b388-4a79-b2cc-2bfba91ea9ad" name="Xpath: assert UserName">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_NAME/text()</path>
              <content>${#TestSuite#recipientUserName}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="1af27510-c527-4d36-8f8b-2f1183ee0738" name="Xpath: assert TechSender">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_TECHNICAL_SENDER/text()</path>
              <content>${#TestSuite#recipient}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Wait For Poller" id="3504e946-be3f-4228-bc25-8f2fda599651">
        <con:settings/>
        <con:config>
          <delay>${#TestSuite#PollTime}</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_RSXM Table_CTR" id="96f23823-bb83-4c09-8088-57f47e0ee241">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.raw_soap_xml_messages where rsxm_st_id = '${#TestCase#Id}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: XPath Match" id="14d90270-6f91-4150-993a-d24f2adbd507">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/RSXM_STATUS[1]</path>
              <content>Failed</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="f5b5866b-5944-49c5-a7c3-15e86ef2f5eb" name="JDBC Status"/>
          <con:assertion type="GroovyScriptAssertion" id="60c0d61c-e87b-45d2-9be9-7657593bd332" name="Script: SaveRSXM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctrRSXMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_MSL Table_CTR" id="b882a398-064e-429b-ba81-5b10d6e7dd23">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>Select * from overstappen.message_logging where 
msl_soap_transaction_id = '${#TestCase#transactionId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: assert MSL_CLC_ID]" id="e99eef8e-047f-4dff-930b-7b92f2348249">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/MSL_CLC_ID[1]/text()</path>
              <content>57</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="a38a600d-9175-40f3-8442-37550aeb0a90" name="Contains: assert 201 -XML etc">
            <con:configuration>
              <token>503 - Marking message as commit success - Dossier Message Saved successfully</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="ed4aff4f-22a7-4a87-be0e-7ef1c91d039a" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="158a67ba-339b-4cd4-b4ff-ac1534e316e4" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:setupScript>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import groovy.time.TimeCategory
def today = new Date() 
def now = String.format('%tFT%&lt;tT', new Date() )
def wishdate = today 
use(TimeCategory) {
	   wishdate = wishdate + 1.day
}
def wishdatestr = wishdate.format("yyyy-MM-dd'T'HH:mm:ss")
testRunner.testCase.setPropertyValue("Now",now)
testRunner.testCase.setPropertyValue("wishDate",wishdatestr)
String contractId = funcHandle.getRandomString()
testRunner.testCase.setPropertyValue("contractId",contractId)</con:setupScript>
      <con:tearDownScript/>
      <con:properties/>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>122d3297-f22d-449f-ac52-c46f1bfb714e</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Missing endblock" searchProperties="true" id="dcd83c64-fbc9-436c-9663-b1ac10c84b5a" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:settings>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">1000</con:setting>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting>
      </con:settings>
      <con:testStep type="delay" name="Delay" id="b67869a9-cf83-4538-9668-9476777c5955">
        <con:settings/>
        <con:config>
          <delay>1000</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="CTR-Sunny Day" id="def6ff48-0dec-44c0-998f-a73bee872eee">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>CompWebserviceSoap11</con:interface>
          <con:operation>SendMessages</con:operation>
          <con:request name="CTR-Sunny Day" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordText" id="3aa22f8f-37c1-4ea2-ba88-b80068a3761f">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#SoapUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="http://coin.nl/ws/schema">\r
   <soapenv:Header/>
   <soapenv:Body>
      <sch:SendMessagesRequest>
         <sch:Sender>${#TestSuite#recipient}</sch:Sender>
         <sch:Messages>
            <sch:Message>
               <sch:Text><![CDATA[<?xml version="1.0"?>
<message xmlns="http://www.coin.nl/Overstappen_MESSAGES">
<header>
<receiver>
<!--Optional:-->
<networkoperator>${#TestSuite#donor}</networkoperator>
<!--Optional:-->
<serviceprovider>${#TestSuite#donor}</serviceprovider>
</receiver>
<sender>
<!--Optional:-->
<networkoperator>${#TestSuite#recipient}</networkoperator>
<!--Optional:-->
<serviceprovider>${#TestSuite#recipient}</serviceprovider>
</sender>
<!--Optional:-->
<messageid>${#TestSuite#recipient}-${#TestCase#contractId}-01</messageid>
<timestamp>${#TestSuite#TimestampNOW}</timestamp>
</header>
<body>
<contractterminationrequest>
<${#TestSuite#soapVersion}>
<dossierid>${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01</dossierid>
<!--Optional:-->
<recipientserviceprovider>${#TestSuite#recipient}</recipientserviceprovider>
<!--Optional:-->
<recipientnetworkoperator>${#TestSuite#recipient}</recipientnetworkoperator>
<!--Optional:-->
<donornetworkoperator>${#TestSuite#donor}</donornetworkoperator>
<!--Optional:-->
<donorserviceprovider>${#TestSuite#donor}</donorserviceprovider>
<wishdatetime>${#TestCase#wishdate}</wishdatetime>
${#TestSuite#dossierType}
${#TestSuite#compensationOK}
<name>COIN</name>
<addressblock>
 	<postcode>1389SS</postcode>
	<housenr>99999</housenr>
</addressblock>
<numberseries>
     <start>0173112233</start>
    </numberseries>
<validationblock>
    <name>contractid</name>
    <value>2-${#TestCase#contractID}</value>
 </validationblock>
<note>Sunny day-sent ${#TestSuite#soapVersion} expect ${#TestSuite#donorSoapVersion}-linenr. ${#TestSuite#lineNumber}</note>
</${#TestSuite#soapVersion}>
</contractterminationrequest>
</body>
</message>]]]]>><![CDATA[</sch:Text>
            </sch:Message>
         </sch:Messages>
      </sch:SendMessagesRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="XPath Match" name="Match content of [ns2:TransactionId] using RegEx" id="1c471417-807a-4012-a734-b2dd5be94c8f">
              <con:configuration>
                <path>declare namespace ns2='http://coin.nl/ws/schema';
//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]/text()</path>
                <content>*</content>
                <allowWildcards>true</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" name="Check count of [ns2:TransactionId]" id="345c96a3-89a0-476e-9875-b0c18e04ef5b">
              <con:configuration>
                <path>declare namespace ns2='http://coin.nl/ws/schema';
count( //ns2:SendMessagesResponse/ns2:TransactionId)</path>
                <content>1</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert node [ns2:TransactionId]" id="63f77b9d-d209-4d74-ad56-a26982ab75c5">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
//def groovyUtilsPro = new com.eviware.soapui.support.GroovyUtilsPro( context )

def holder = new XmlHolder( messageExchange.responseContentAsXml )
holder.namespaces["ns2"] = "http://coin.nl/ws/schema"
def transactionId = holder.getNodeValue( "//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]" )
messageExchange.modelItem.testStep.testCase.setPropertyValue("transactionId",transactionId)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#TestSuite#recipientUserName}</con:username>
              <con:password>${#TestSuite#recipientPassWord}</con:password>
              <con:domain xsi:nil="true"/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://coin.nl/SendMessages"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_ST Table" id="51864f14-0852-4f7c-a6af-8bb8867bbf8c">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_transactions 
where st_transaction_id = '${#TestCase#transactionId}'</con:query>
          <con:assertion type="Simple Contains" name="Contains: assert Results" id="cce0fb3e-4b85-4ba4-a7be-1dfa2e40d69e">
            <con:configuration>
              <token>&lt;Row rowNumber="1"></token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify TransactionId" id="0314e1fa-b1cb-4932-bba8-55dd87029a85">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_TRANSACTION_ID[1]</path>
              <content>${#TestCase#transactionId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify ST_SEND_RECEIVED" id="9db0e630-c611-4fc1-b0bc-fb6028a6a7c3">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_SEND_RECEIVED[1]</path>
              <content>received</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" name="Contains: Contain message Type" id="85caea84-7bde-4674-9d00-009229cb7411">
            <con:configuration>
              <token>contractterminationrequest</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="77af631e-a991-48c5-b7c6-43b4c54de0ad" name="Script: store SoapTransaction.id">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "Id");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="25403817-abc1-4578-9f80-7b8821bd2725" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="535978c2-4eb2-43c3-8197-e91f5446071f" name="Xpath: assert UserIP" disabled="true">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_IP/text()</path>
              <content>${#Project#UserIP}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="8eb577b6-888a-4fe7-9590-d2854f0d170b" name="Xpath: assert UserName">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_NAME/text()</path>
              <content>${#TestSuite#recipientUserName}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="4cd2c5aa-8f8b-4c3f-9c6d-8318d7249eaf" name="Xpath: assert TechSender">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_TECHNICAL_SENDER/text()</path>
              <content>${#TestSuite#recipient}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Wait For Poller" id="9e36e176-b078-46fd-9b2a-2516cd38102d">
        <con:settings/>
        <con:config>
          <delay>${#TestSuite#PollTime}</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_RSXM Table_CTR" id="2f7674d0-2b13-4507-bf2d-9e91bb94d78e">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.raw_soap_xml_messages where rsxm_st_id = '${#TestCase#Id}'</con:query>
          <con:assertion type="Simple Contains" name="Contains: Contains" id="6f5c48fb-8cde-4644-a4bb-7eb10db16d15">
            <con:configuration>
              <token>&lt;Row rowNumber="1"></token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: XPath Match" id="14d90270-6f91-4150-993a-d24f2adbd507">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/RSXM_STATUS[1]</path>
              <content>Done</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="93200de3-311a-45e4-9354-8786e5f8cb4b" name="JDBC Status"/>
          <con:assertion type="GroovyScriptAssertion" id="a71e9107-d908-4e98-8bdc-c33775015ef6" name="Script: SaveRSXM_DM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/RSXM_DM_ID[1]", "ctrDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="392d4413-c4ed-4b62-9199-1391510f6bd1" name="Script: SaveRSXM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctrRSXMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_MSL Table_CTR" id="7bc9207f-b73f-4954-9c56-181589f3a960">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>Select * from overstappen.message_logging where 
msl_soap_transaction_id = '${#TestCase#transactionId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: assert MSL_CLC_ID]" id="e99eef8e-047f-4dff-930b-7b92f2348249">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/MSL_CLC_ID[1]/text()</path>
              <content>57</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="e095441a-3cf8-4288-8e40-4300718feece" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="768f42a8-eed1-4db7-b90c-efef24784331" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="1b0fe0d0-501c-49d0-a430-8f665603c79c" name="Xpath: assert SoapTransactionId">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_ST_ID/text()</path>
              <content>${#TestCase#Id}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table_CTR" id="70885375-ab72-40c6-87b8-804108f2dd95">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier where 
ctd_switchid = '${#TestSuite#Recipient}-${#TestSuite#Donor}-${#TestCase#ContractId}-01'</con:query>
          <con:assertion type="XPath Match" name="Xpath: assert CTD_DOSSIER_STATUS]" id="ac17d9f6-9653-435c-bd0c-9af6917f2aa6">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_DOSSIER_STATUS[1]/text()</path>
              <content>Pending</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert CTD_PROCESS_STATUS]" id="ede8cc08-99ab-46ca-baf4-97e9f0895428">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_PROCESS_STATUS[1]/text()</path>
              <content>Request</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: assert ion ctd_id">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def ctdid = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctdId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="7c84a325-d253-4113-a068-3d9a1058a3a9" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTR" id="a7507812-1219-4885-8fd7-ec36b556f6ef">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where dm_ctd_id = ${#TestCase#ctdId} 
and dm_mst_id=1 
order by createddate desc</con:query>
          <con:assertion type="XPath Match" id="22e366c7-6a4e-4580-9e30-c5cb86194c3d" name="Xpath: SoapVersion">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/IT_INTERFACE_TYPE[1]</path>
              <content>*${#TestSuite#soapVersion}*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="f73e00f1-8527-4a87-b868-01995c6d5fbc" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="9ba7a806-c63c-4998-8db1-ff3153c65f13" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/ID/text()</path>
              <content>${#TestCase#ctrDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="a38dbe73-c16b-4cd9-b183-13a229924318" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctrDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_CheckOutGoingMsgType" id="b5fe6911-0b19-435c-abce-967678e93f6f">
        <con:settings/>
        <con:config>
          <script>def outtype = testRunner.testCase.testSuite.getPropertyValue("recipientOutMsg")

if (outtype == 'EMAIL') {
    	  testRunner.gotoStepByName( "JDBC _SXM Table_NoRecord")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Wait For Send Poller" id="076c26f8-62b1-4ca6-8809-7cdb44a8840c">
        <con:settings/>
        <con:config>
          <delay>${#TestSuite#PollTime}</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_ST Table_Send" id="6cd19d78-4650-4376-8b2f-4f7d5faff267">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_transactions 
where st_sender='${#TestSuite#recipient}' 
and st_receiver='${#TestSuite#donor}' 
and st_send_received='SEND' 
and st_message like '%${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01%'
and id>${#TestCase#Id}</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [ST_TRANSACTION_ID]" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//ST_TRANSACTION_ID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify SEND Status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//ST_SEND_RECEIVED</path>
              <content>SEND</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" name="Contains: Contains" id="a1e1b0ed-fff7-4f8c-9eba-dee62ae7b198">
            <con:configuration>
              <token>contractterminationrequest</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="40fa4a9b-34bc-47c5-a651-8b225e523334" name="JDBC Status"/>
          <con:assertion type="GroovyScriptAssertion" id="3a6c9187-1e51-47b5-ba27-93c07e9e0abc" name="Script: SaveST_SXM_ID" disabled="true">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ST_SXM_ID[1]", "stSXMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_CTR" id="7a770d1f-0958-4295-b60f-3a24a9e3003a">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where
sxm_xml_message like '%${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01%'
and sxm_xml_message like '%/${#TestSuite#donorSoapVersion}%'
and sxm_xml_message_type = 'Request'
and sxm_sender = '${#TestSuite#recipient}'
and sxm_receiver = '${#TestSuite#donor}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [ST_TRANSACTION_ID]" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//ID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" name="Contains: Contains" id="a1e1b0ed-fff7-4f8c-9eba-dee62ae7b198">
            <con:configuration>
              <token>contractterminationrequest</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="eb3bff08-4703-424d-b8ab-94a78fdd5221" name="Xpath: XPath match wishdatetime">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/SXM_XML_MESSAGE[1]</path>
              <content>*&lt;wishdatetime>${#TestCase#wishDate}&lt;/wishdatetime>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="0556b0e2-dbbc-4407-aae9-71a1337500f5" name="Xpath: header sender receiver">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/SXM_XML_MESSAGE[1]</path>
              <content><![CDATA[*<header>
      <receiver>
                  <networkoperator>${#TestSuite#donor}</networkoperator>
         	              <serviceprovider>${#TestSuite#donor}</serviceprovider>
               </receiver>
      <sender>
                  <networkoperator>${#TestSuite#recipient}</networkoperator>
         		          <serviceprovider>${#TestSuite#recipient}</serviceprovider>
               </sender>*]]></content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="6d6adff7-850e-4987-a515-bb7b377522e1" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="8a3100d8-ccd7-4689-8fa5-f05f54ffe551" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/SXM_DM_ID/text()</path>
              <content>${#TestCase#ctrDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="e4b0b367-1ca2-4336-b624-72fce5c97f9a" name="Xpath: assert SXMID" disabled="true">
            <con:configuration>
              <path>/Results/ResultSet/Row/ID/text()</path>
              <content>${#TestCase#stSXMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_CheckOutGoingMsgType1" id="9100d36e-b75f-4459-a3ee-c6ae259ee40a">
        <con:settings/>
        <con:config>
          <script>def outtype = testRunner.testCase.testSuite.getPropertyValue("recipientOutMsg")

if (outtype == 'SOAP') {
    	  testRunner.gotoStepByName( "CTRA-ok")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_CTR" id="665605a8-eaed-48fa-8b35-24b9141ea9ff">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where
sxm_xml_message like '%${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01%'
and sxm_xml_message_type = 'Request'
and sxm_sender = '${#TestSuite#recipient}'
and sxm_receiver = '${#TestSuite#donor}'</con:query>
          <con:assertion type="JDBC Status" id="d7a0bef0-7c62-4087-af1c-bfc1d44f39a3" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="741c3645-8c39-4a19-b634-d515670ed933" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>0</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="CTRA-ok" id="5f413d71-a36c-4f48-a2bf-f2af0c0109e6">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>CompWebserviceSoap11</con:interface>
          <con:operation>SendMessages</con:operation>
          <con:request name="CTRA-ok" id="83d7229a-676a-4c41-81cc-3429f324fea1" wssPasswordType="PasswordText">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#SoapUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="http://coin.nl/ws/schema">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:SendMessagesRequest>
         <sch:Sender>${#TestSuite#donor}</sch:Sender>
         <sch:Messages>
            <sch:Message>
               <sch:Text><![CDATA[<?xml version="1.0"?>
<message xmlns="http://www.coin.nl/Overstappen_MESSAGES">
<header>
<receiver>
<!--Optional:-->
<networkoperator>${#TestSuite#recipient}</networkoperator>
<!--Optional:-->
<serviceprovider>${#TestSuite#recipient}</serviceprovider>
</receiver>
<sender>
<!--Optional:-->
<networkoperator>${#TestSuite#donor}</networkoperator>
<!--Optional:-->
<serviceprovider>${#TestSuite#donor}</serviceprovider>
</sender>
<!--Optional:-->
<messageid>${#TestSuite#recipient}-${#TestCase#contractId}-01</messageid>
<timestamp>${#TestSuite#TimestampNOW}</timestamp>
</header>
<body>
<contractterminationrequestanswer>
<${#TestSuite#donorSoapVersion}>
<dossierid>${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01</dossierid>
${#TestSuite#donorDossierType}
<blocking>N</blocking>
<wishdatetime>${#TestCase#wishdate}</wishdatetime>
<blockingcode>0</blockingcode>
<note>Request Answer ok ${#TestSuite#soapVersion} sent ${#TestSuite#donorSoapVersion} expected</note>
</${#TestSuite#donorSoapVersion}>
</contractterminationrequestanswer>
</body>
</message>]]]]>><![CDATA[</sch:Text>
            </sch:Message>
         </sch:Messages>
      </sch:SendMessagesRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="0408c23d-c32c-480c-b33e-7f633dc17c95"/>
            <con:assertion type="XPath Match" id="8131d7ae-9a5a-491b-aefe-ae2214c93e1b" name="XPath Match">
              <con:configuration>
                <path>declare namespace ns2='http://coin.nl/ws/schema';
//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]/text()</path>
                <content>*</content>
                <allowWildcards>true</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="8fd52b42-3f32-4928-9b32-f521197d004e" name="Script Assertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
//def groovyUtilsPro = new com.eviware.soapui.support.GroovyUtilsPro( context )

def holder = new XmlHolder( messageExchange.responseContentAsXml )
holder.namespaces["ns2"] = "http://coin.nl/ws/schema"
def transactionId = holder.getNodeValue( "//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]" )
messageExchange.modelItem.testStep.testCase.setPropertyValue("ctraTransactionId",transactionId)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#TestSuite#donorUserName}</con:username>
              <con:password>${#TestSuite#donorPassWord}</con:password>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_ST Table CTRA" id="214c5742-35a7-43e1-be1b-3e7446c65cc6">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_transactions 
where st_transaction_id = '${#TestCase#ctraTransactionId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Verify TransactionId" id="0314e1fa-b1cb-4932-bba8-55dd87029a85">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_TRANSACTION_ID[1]</path>
              <content>${#TestCase#ctraTransactionId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify ST_SEND_RECEIVED" id="9db0e630-c611-4fc1-b0bc-fb6028a6a7c3">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_SEND_RECEIVED[1]</path>
              <content>received</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" name="Contains: Contain message Type" id="85caea84-7bde-4674-9d00-009229cb7411">
            <con:configuration>
              <token>contractterminationrequestanswer</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script: assert node [ID]" id="919aa515-934c-4b10-bd9d-dcd08c81b41c">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctraId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="6e78d7f5-cb66-4611-b2b5-343c1888664f" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="c8d52293-18eb-49c4-9ca9-ea3bd5d610d6" name="Xpath: assert UserIP" disabled="true">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_IP/text()</path>
              <content>${#Project#UserIP}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="625877b0-2eca-4b41-8c89-2dba622b3710" name="Xpath: assert UserName">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_NAME/text()</path>
              <content>${#TestSuite#donorUserName}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="d80902a3-bfcb-4329-a8f6-ad3d0723f4a4" name="Xpath: assert TechSender">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_TECHNICAL_SENDER/text()</path>
              <content>${#TestSuite#donor}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Wait For Poller 2" id="9a5c559f-4078-4bb6-b38d-9fa5471c2680">
        <con:settings/>
        <con:config>
          <delay>${#TestSuite#PollTime}</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_RSXM Table_CTRA" id="e7aa4126-17fe-4c89-be22-3e215666e958">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.raw_soap_xml_messages where rsxm_st_id = '${#TestCase#ctraId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: XPath Match" id="14d90270-6f91-4150-993a-d24f2adbd507">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/RSXM_STATUS[1]</path>
              <content>Done</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="0b705d25-1791-4e89-8c59-80a7f06407d5" name="JDBC Status"/>
          <con:assertion type="GroovyScriptAssertion" id="69e4fbe2-e6a6-444c-9ba2-c8b47452d3f9" name="Script: SaveRSXM_DM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/RSXM_DM_ID[1]", "ctrDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="cde314fc-eaf9-4342-96b9-2bfbd0ed3617" name="Script: SaveRSXM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctraRSXMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_MSL Table_CTRA" id="515ce980-5b29-493e-b432-dd6b68187c90">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>Select * from overstappen.message_logging where 
msl_soap_transaction_id = '${#TestCase#ctraTransactionId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: assert MSL_CLC_ID]" id="e99eef8e-047f-4dff-930b-7b92f2348249">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/MSL_CLC_ID[1]/text()</path>
              <content>57</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="e095441a-3cf8-4288-8e40-4300718feece" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="e95b881a-2ca1-4cc8-97c3-ba99a4a0eabd" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="0aea5360-f2b5-4600-979e-d7ed876d2856" name="Xpath: assert SoapTransactionId">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_ST_ID/text()</path>
              <content>${#TestCase#ctraId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table 1" id="0d4b31b1-51e9-431a-8fdb-cdb5746a4c3d">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier 
where id='${#TestCase#ctdId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [ST_TRANSACTION_ID]" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//CTD_SWITCHID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_dossier_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_DOSSIER_STATUS</path>
              <content>Pending</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_process_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_PROCESS_STATUS</path>
              <content>Request Answer OK</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="651069e7-f341-4a0a-90da-a0530c7e6e68" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTRA" id="1508a7b3-85c9-46f0-ad24-300725bef987">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where dm_ctd_id = ${#TestCase#ctdId} 
and dm_mst_id=3 
order by createddate desc</con:query>
          <con:assertion type="XQuery Match" id="40cc6fa1-0d78-43c5-a10b-f043ddf625c6" name="XQuery Match">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/IT_INTERFACE_TYPE[1]</path>
              <content>*${#TestSuite#donorSoapVersion}*</content>
              <allowWildcards>true</allowWildcards>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="2310f440-1122-4767-93cc-598cd58ff8ef" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="e2a24280-0eaa-4900-acfa-6deafdb45623" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/ID/text()</path>
              <content>${#TestCase#ctrDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="2a13242e-7e8e-44f9-81b8-df38995e3a40" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctraDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_CTRA" id="82049db2-b0b2-4e31-ae54-a03e39b05619">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where
sxm_xml_message like '%${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01%'
and sxm_xml_message like '%/${#TestSuite#soapVersion}%'
and sxm_xml_message_type = 'Request answer'
and sxm_sender = '${#TestSuite#donor}'
and sxm_receiver = '${#TestSuite#recipient}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [SXM_ID]" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//ID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="65126eb3-5fce-4b42-b832-8882ef7a5d51" name="Xpath: header sender receiver">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/SXM_XML_MESSAGE[1]</path>
              <content><![CDATA[*<header>
      <receiver>
                  <networkoperator>${#TestSuite#recipient}</networkoperator>
              	          <serviceprovider>${#TestSuite#recipient}</serviceprovider>
               </receiver>
      <sender>
                  <networkoperator>${#TestSuite#donor}</networkoperator>
         		          <serviceprovider>${#TestSuite#donor}</serviceprovider>
               </sender>*]]></content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="89423fb8-e10b-4dc0-8acc-c6b50e05ba16" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="501e373f-566f-4b3e-9b3a-c65ff961795f" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/SXM_DM_ID/text()</path>
              <content>${#TestCase#ctrDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="f08e51d1-55bc-43e3-b9db-6727aca25362" name="Xpath: assert SXMID" disabled="true">
            <con:configuration>
              <path>/Results/ResultSet/Row/ID/text()</path>
              <content>${#TestCase#stSXMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="CTP" id="71c1a4f3-2f8f-419d-a80f-5c848c3bce86">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>CompWebserviceSoap11</con:interface>
          <con:operation>SendMessages</con:operation>
          <con:request name="CTP" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordText" id="3aa22f8f-37c1-4ea2-ba88-b80068a3761f">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#SoapUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="http://coin.nl/ws/schema">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <sch:SendMessagesRequest>\r
         <sch:Sender>${#TestSuite#recipient}</sch:Sender>\r
         <sch:Messages>\r
            <sch:Message>\r
               <sch:Text><![CDATA[<?xml version="1.0"?>
<message xmlns="http://www.coin.nl/Overstappen_MESSAGES">
<header>
<receiver>
<!--Optional:-->
<networkoperator>${#TestSuite#donor}</networkoperator>
<!--Optional:-->
<serviceprovider>${#TestSuite#donor}</serviceprovider>
</receiver>
<sender>
<!--Optional:-->
<networkoperator>${#TestSuite#recipient}</networkoperator>
<!--Optional:-->
<serviceprovider>${#TestSuite#recipient}</serviceprovider>
</sender>
<!--Optional:-->
<messageid>${#TestSuite#recipient}-${#TestCase#ContractId}-003</messageid>
<timestamp>${#TestSuite#TimestampNOW}</timestamp>
</header>
<body>
<contractterminationperformed>
<${#TestSuite#soapVersion}>
<dossierid>${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01</dossierid>
<actualdatetime>${#TestCase#Now}</actualdatetime>
<note>performed sent ${#TestSuite#soapVersion}, expect ${#TestSuite#donorSoapVersion}</note>
</${#TestSuite#soapVersion}>
</contractterminationperformed>
</body>
</message>]]]]>><![CDATA[</sch:Text>\r
            </sch:Message>\r
         </sch:Messages>\r
      </sch:SendMessagesRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request>
            <con:assertion type="XPath Match" name="Match content of [ns2:TransactionId] using RegEx" id="1c471417-807a-4012-a734-b2dd5be94c8f">
              <con:configuration>
                <path>declare namespace ns2='http://coin.nl/ws/schema';
//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]/text()</path>
                <content>*</content>
                <allowWildcards>true</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" name="Check count of [ns2:TransactionId]" id="345c96a3-89a0-476e-9875-b0c18e04ef5b">
              <con:configuration>
                <path>declare namespace ns2='http://coin.nl/ws/schema';
count( //ns2:SendMessagesResponse/ns2:TransactionId)</path>
                <content>1</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert node [ns2:TransactionId]" id="63f77b9d-d209-4d74-ad56-a26982ab75c5">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
//def groovyUtilsPro = new com.eviware.soapui.support.GroovyUtilsPro( context )

def holder = new XmlHolder( messageExchange.responseContentAsXml )
holder.namespaces["ns2"] = "http://coin.nl/ws/schema"
def transactionId = holder.getNodeValue( "//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]" )
messageExchange.modelItem.testStep.testCase.setPropertyValue("ctpTransactionId",transactionId)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#TestSuite#recipientUserName}</con:username>
              <con:password>${#TestSuite#recipientPassWord}</con:password>
              <con:domain xsi:nil="true"/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://coin.nl/SendMessages"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_ST Table CTP" id="8b170737-371c-4ee4-a4c7-269a835b27a0">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_transactions 
where st_transaction_id = '${#TestCase#ctpTransactionId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Verify TransactionId" id="0314e1fa-b1cb-4932-bba8-55dd87029a85">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_TRANSACTION_ID[1]</path>
              <content>${#TestCase#ctpTransactionId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify ST_SEND_RECEIVED" id="9db0e630-c611-4fc1-b0bc-fb6028a6a7c3">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_SEND_RECEIVED[1]</path>
              <content>received</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" name="Contains: Contain message Type" id="85caea84-7bde-4674-9d00-009229cb7411">
            <con:configuration>
              <token>contractterminationperformed</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script: assert node [ID]" id="919aa515-934c-4b10-bd9d-dcd08c81b41c">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctpId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="7ecc4fae-37f3-450f-9308-bff9fa2bc708" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="06336836-c23e-49ab-98ee-7e2856dae0f3" name="Xpath: assert UserIP" disabled="true">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_IP/text()</path>
              <content>${#Project#UserIP}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="2e574683-7b2d-43e7-9cf0-a65edd8f6be3" name="Xpath: assert UserName">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_NAME/text()</path>
              <content>${#TestSuite#recipientUserName}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="e582b46e-d440-4f02-ad61-d85f0bdccf72" name="Xpath: assert TechSender">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_TECHNICAL_SENDER/text()</path>
              <content>${#TestSuite#recipient}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Wait For Poller 1" id="f00acc89-a828-4e14-b066-6512bcf0e423">
        <con:settings/>
        <con:config>
          <delay>${#TestSuite#PollTime}</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_RSXM Table_CTP" id="3c87b82c-8f4d-4aac-8978-44c7f283523a">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.raw_soap_xml_messages where rsxm_st_id = '${#TestCase#ctpId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: XPath Match" id="14d90270-6f91-4150-993a-d24f2adbd507">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/RSXM_STATUS[1]</path>
              <content>Done</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="9a907c7e-cfdb-4105-ae14-b59c6ee84532" name="JDBC Status"/>
          <con:assertion type="GroovyScriptAssertion" id="04739f49-2331-417a-870f-5c0d2b543c81" name="Script: SaveRSXM_DM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/RSXM_DM_ID[1]", "ctrDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="53391a2c-56b8-425a-bc6c-09edd93f381d" name="Script: SaveRSXM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctpRSXMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_MSL Table_CTP" id="98140ada-bc30-40fa-b38a-c5858ef324db">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>Select * from overstappen.message_logging where 
msl_soap_transaction_id = '${#TestCase#ctpTransactionId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: assert MSL_CLC_ID]" id="e99eef8e-047f-4dff-930b-7b92f2348249">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/MSL_CLC_ID[1]/text()</path>
              <content>57</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="e095441a-3cf8-4288-8e40-4300718feece" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="e31120ba-861a-4f69-84ab-57d576d7c0f2" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="a2c7879d-6596-431d-ab2d-6abc32050e5a" name="Xpath: assert SoapTransactionId">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_ST_ID/text()</path>
              <content>${#TestCase#ctpId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table_CTP" id="3fdc7a73-82a4-40af-892e-7cbded8eb1e7">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier 
where id = '${#TestCase#ctdId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of CTD record" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//CTD_SWITCHID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_process_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_PROCESS_STATUS</path>
              <content>Performed</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_dossier_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_DOSSIER_STATUS</path>
              <content>Pending</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="57872de4-e3eb-4ac6-a875-9146689f119f" name="Xpath: Verify ctd_ctp_buffering">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CTP_BUFFERING[1]</path>
              <content>t</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="9d345dd8-2978-4ca0-8ed9-485b70d82d1d" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTP" id="78b288e4-ed62-479f-95a4-e416b0c2828d">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where dm_ctd_id = ${#TestCase#ctdId} 
and dm_mst_id=5 
order by createddate desc</con:query>
          <con:assertion type="XPath Match" id="8273aa94-4170-4178-ad8f-472138da1833" name="Xpath: 1">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/IT_INTERFACE_TYPE[1]</path>
              <content>*${#TestSuite#soapVersion}*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="dd114736-d3c0-4e67-a02f-15594f6a1e43" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="68f2f511-c758-4918-996b-2b0f37ca5e67" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/ID/text()</path>
              <content>${#TestCase#ctrDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="105b4a1e-d399-40d8-bde1-0b6e816027c9" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctpDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_CTP" id="a3997c79-75d5-4859-938c-1d994d558bd6">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where
sxm_xml_message like '%${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01%'
and sxm_xml_message like '%/${#TestSuite#donorSoapVersion}%'
and sxm_xml_message_type = 'Performed'
and sxm_sender = '${#TestSuite#recipient}'
and sxm_receiver = '${#TestSuite#donor}'</con:query>
          <con:assertion type="Simple NotContains" id="d71d4bce-938f-48bf-ba21-93c08b8f00cf" name="NotContains: Not Contains">
            <con:configuration>
              <token>&lt;SXM_XML_MESSAGE_TYPE>Performed&lt;/SXM_XML_MESSAGE_TYPE></token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="1d6512c2-8432-4749-8c9f-1c9ec4c56dfd" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="0aa8e334-d17a-4e79-b41e-255a2131b48d" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>0</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:loadTest id="9277946f-0d46-42fe-a9a5-3e67c89a5b1d" name="LoadTest 1">
        <con:settings>
          <con:setting id="HttpSettings@close-connections">false</con:setting>
        </con:settings>
        <con:threadCount>50</con:threadCount>
        <con:startDelay>0</con:startDelay>
        <con:sampleInterval>250</con:sampleInterval>
        <con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed>
        <con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange>
        <con:historyLimit>-1</con:historyLimit>
        <con:testLimit>10</con:testLimit>
        <con:limitType>COUNT_PER_THREAD</con:limitType>
        <con:loadStrategy>
          <con:type>Simple</con:type>
          <con:config>
            <testDelay>30</testDelay>
            <randomFactor>0.5</randomFactor>
          </con:config>
        </con:loadStrategy>
        <con:assertion type="Step Status" name="Step Status"/>
        <con:maxAssertionErrors>100</con:maxAssertionErrors>
        <con:cancelExcessiveThreads>true</con:cancelExcessiveThreads>
        <con:strategyInterval>500</con:strategyInterval>
      </con:loadTest>
      <con:setupScript>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import groovy.time.TimeCategory
def today = new Date() 
def now = today.format("yyyy-MM-dd'T'HH:mm:ss")
def wishdate = today 
use(TimeCategory) {
	   wishdate = wishdate + 2.days
}
def wishdatestr = wishdate.format("yyyy-MM-dd'T'HH:mm:ss")
testRunner.testCase.setPropertyValue("Now",now)
testRunner.testCase.setPropertyValue("wishDate",wishdatestr)
String contractId = funcHandle.getRandomString()
testRunner.testCase.setPropertyValue("contractId",contractId)</con:setupScript>
      <con:tearDownScript/>
      <con:properties/>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>122d3297-f22d-449f-ac52-c46f1bfb714e</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="end block with 20 digits" searchProperties="true" id="df7c7262-3df0-4adc-a2de-47ba756d2c64" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:settings>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">1000</con:setting>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting>
      </con:settings>
      <con:testStep type="request" name="CTR-Sunny Day" id="7c5fa004-15e4-4760-973f-f4a03a4a2d36">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>CompWebserviceSoap11</con:interface>
          <con:operation>SendMessages</con:operation>
          <con:request name="CTR-Sunny Day" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordText" id="3aa22f8f-37c1-4ea2-ba88-b80068a3761f">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#SoapUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="http://coin.nl/ws/schema">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:SendMessagesRequest>
         <sch:Sender>${#TestSuite#recipient}</sch:Sender>
         <sch:Messages>
            <sch:Message>
               <sch:Text><![CDATA[<?xml version="1.0"?>
<message xmlns="http://www.coin.nl/Overstappen_MESSAGES">
<header>
<receiver>
<!--Optional:-->
<networkoperator>${#TestSuite#donor}</networkoperator>
<!--Optional:-->
<serviceprovider>${#TestSuite#donor}</serviceprovider>
</receiver>
<sender>
<!--Optional:-->
<networkoperator>${#TestSuite#recipient}</networkoperator>
<!--Optional:-->
<serviceprovider>${#TestSuite#recipient}</serviceprovider>
</sender>
<!--Optional:-->
<messageid>${#TestSuite#recipient}-${#TestCase#contractId}-01</messageid>
<timestamp>${#TestSuite#TimestampNOW}</timestamp>
</header>
<body>
<contractterminationrequest>
<${#TestSuite#soapVersion}>
<dossierid>${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01</dossierid>
<!--Optional:-->
<recipientserviceprovider>${#TestSuite#recipient}</recipientserviceprovider>
<!--Optional:-->
<recipientnetworkoperator>${#TestSuite#recipient}</recipientnetworkoperator>
<!--Optional:-->
<donornetworkoperator>${#TestSuite#donor}</donornetworkoperator>
<!--Optional:-->
<donorserviceprovider>${#TestSuite#donor}</donorserviceprovider>
<wishdatetime>${#TestCase#wishdate}</wishdatetime>
${#TestSuite#dossierType}
${#TestSuite#compensationOK}
<name>COIN</name>
<addressblock>
 	<postcode>1389SS</postcode>
	<housenr>99999</housenr>
</addressblock>
<numberseries>
<start>01234567890123456789</start>
    </numberseries>
<validationblock>
    <name>contractid</name>
    <value>1-${#TestCase#contractID}</value>
 </validationblock>
<note>${#TestSuite#soapVersion} expect ${#TestSuite#donorSoapVersion}-linenumber ${#TestSuite#lineNumber}</note>
</${#TestSuite#soapVersion}>
</contractterminationrequest>
</body>
</message>]]]]>><![CDATA[</sch:Text>
            </sch:Message>
         </sch:Messages>
      </sch:SendMessagesRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="XPath Match" name="Match content of [ns2:TransactionId] using RegEx" id="1c471417-807a-4012-a734-b2dd5be94c8f">
              <con:configuration>
                <path>declare namespace ns2='http://coin.nl/ws/schema';
//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]/text()</path>
                <content>*</content>
                <allowWildcards>true</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" name="Check count of [ns2:TransactionId]" id="345c96a3-89a0-476e-9875-b0c18e04ef5b">
              <con:configuration>
                <path>declare namespace ns2='http://coin.nl/ws/schema';
count( //ns2:SendMessagesResponse/ns2:TransactionId)</path>
                <content>1</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert node [ns2:TransactionId]" id="63f77b9d-d209-4d74-ad56-a26982ab75c5">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
//def groovyUtilsPro = new com.eviware.soapui.support.GroovyUtilsPro( context )

def holder = new XmlHolder( messageExchange.responseContentAsXml )
holder.namespaces["ns2"] = "http://coin.nl/ws/schema"
def transactionId = holder.getNodeValue( "//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]" )
messageExchange.modelItem.testStep.testCase.setPropertyValue("transactionId",transactionId)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#TestSuite#recipientUserName}</con:username>
              <con:password>${#TestSuite#recipientPassWord}</con:password>
              <con:domain xsi:nil="true"/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://coin.nl/SendMessages"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_ST Table" id="4ddea29b-b2cd-4f66-9d99-0b5e29de6e8e">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_transactions 
where st_transaction_id = '${#TestCase#transactionId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Verify TransactionId" id="0314e1fa-b1cb-4932-bba8-55dd87029a85">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_TRANSACTION_ID[1]</path>
              <content>${#TestCase#transactionId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify ST_SEND_RECEIVED" id="9db0e630-c611-4fc1-b0bc-fb6028a6a7c3">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_SEND_RECEIVED[1]</path>
              <content>received</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" name="Contains: Contain message Type" id="85caea84-7bde-4674-9d00-009229cb7411">
            <con:configuration>
              <token>&amp;lt;contractterminationrequest&amp;gt;</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="77af631e-a991-48c5-b7c6-43b4c54de0ad" name="Script: store SoapTransaction.id">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "Id");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="f07eb502-0db3-4f37-9b45-96de0e252fba" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="6d306476-bff4-46ae-818c-5ebc90b256b6" name="Xpath: assert UserIP" disabled="true">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_IP/text()</path>
              <content>${#Project#UserIP}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="06f7c2d7-b388-4a79-b2cc-2bfba91ea9ad" name="Xpath: assert UserName">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_NAME/text()</path>
              <content>${#TestSuite#recipientUserName}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="1af27510-c527-4d36-8f8b-2f1183ee0738" name="Xpath: assert TechSender">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_TECHNICAL_SENDER/text()</path>
              <content>${#TestSuite#recipient}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Wait For Poller" id="e447a0fe-e6dd-4da0-baf8-159b6fffe61a">
        <con:settings/>
        <con:config>
          <delay>${#TestSuite#PollTime}</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_RSXM Table_CTR" id="d46271a3-b411-44fe-a68c-8710846b0fa4">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.raw_soap_xml_messages where rsxm_st_id = '${#TestCase#Id}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: XPath Match" id="14d90270-6f91-4150-993a-d24f2adbd507">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/RSXM_STATUS[1]</path>
              <content>Failed</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="f5b5866b-5944-49c5-a7c3-15e86ef2f5eb" name="JDBC Status"/>
          <con:assertion type="GroovyScriptAssertion" id="b1aec406-9c8f-489d-935c-a3fb14424495" name="Script: SaveRSXM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctrRSXMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_MSL Table_CTR" id="732d8c81-f94c-4b20-b3e6-7dd1d3694f6e">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>Select * from overstappen.message_logging where 
msl_soap_transaction_id = '${#TestCase#transactionId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: assert MSL_CLC_ID]" id="e99eef8e-047f-4dff-930b-7b92f2348249">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/MSL_CLC_ID[1]/text()</path>
              <content>57</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="ed4aff4f-22a7-4a87-be0e-7ef1c91d039a" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="158a67ba-339b-4cd4-b4ff-ac1534e316e4" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="186361d0-5cf5-4cb8-a24d-b290c24fd237" name="Contains: Contains">
            <con:configuration>
              <token>503</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:setupScript>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import groovy.time.TimeCategory
def today = new Date() 
def now = String.format('%tFT%&lt;tT', new Date() )
def wishdate = today 
use(TimeCategory) {
	   wishdate = wishdate + 1.day
}
def wishdatestr = wishdate.format("yyyy-MM-dd'T'HH:mm:ss")
testRunner.testCase.setPropertyValue("Now",now)
testRunner.testCase.setPropertyValue("wishDate",wishdatestr)
String contractId = funcHandle.getRandomString()
testRunner.testCase.setPropertyValue("contractId",contractId)</con:setupScript>
      <con:tearDownScript/>
      <con:properties/>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>122d3297-f22d-449f-ac52-c46f1bfb714e</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="start block with more than 20 digits" searchProperties="true" id="f0fed61f-7af7-4894-b450-f087daaecb0e" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:settings>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">1000</con:setting>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting>
      </con:settings>
      <con:testStep type="request" name="CTR-Sunny Day" id="95df6224-f723-472c-a2fe-ea98ed0241b2">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>CompWebserviceSoap11</con:interface>
          <con:operation>SendMessages</con:operation>
          <con:request name="CTR-Sunny Day" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordText" id="3aa22f8f-37c1-4ea2-ba88-b80068a3761f">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#SoapUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="http://coin.nl/ws/schema">\r
   <soapenv:Header/>
   <soapenv:Body>
      <sch:SendMessagesRequest>
         <sch:Sender>${#TestSuite#recipient}</sch:Sender>
         <sch:Messages>
            <sch:Message>
               <sch:Text><![CDATA[<?xml version="1.0"?>
<message xmlns="http://www.coin.nl/Overstappen_MESSAGES">
<header>
<receiver>
<!--Optional:-->
<networkoperator>${#TestSuite#donor}</networkoperator>
<!--Optional:-->
<serviceprovider>${#TestSuite#donor}</serviceprovider>
</receiver>
<sender>
<!--Optional:-->
<networkoperator>${#TestSuite#recipient}</networkoperator>
<!--Optional:-->
<serviceprovider>${#TestSuite#recipient}</serviceprovider>
</sender>
<!--Optional:-->
<messageid>${#TestSuite#recipient}-${#TestCase#contractId}-01</messageid>
<timestamp>${#TestSuite#TimestampNOW}</timestamp>
</header>
<body>
<contractterminationrequest>
<${#TestSuite#soapVersion}>
<dossierid>${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01</dossierid>
<!--Optional:-->
<recipientserviceprovider>${#TestSuite#recipient}</recipientserviceprovider>
<!--Optional:-->
<recipientnetworkoperator>${#TestSuite#recipient}</recipientnetworkoperator>
<!--Optional:-->
<donornetworkoperator>${#TestSuite#donor}</donornetworkoperator>
<!--Optional:-->
<donorserviceprovider>${#TestSuite#donor}</donorserviceprovider>
<wishdatetime>${#TestCase#wishdate}</wishdatetime>
${#TestSuite#dossierType}
${#TestSuite#compensationOK}
<name>COIN</name>
<addressblock>
 	<postcode>1389SS</postcode>
	<housenr>99999</housenr>
</addressblock>
<numberseries>
<start>0123456789012345678923</start>
    </numberseries>
<validationblock>
    <name>contractid</name>
    <value>1-${#TestCase#contractID}</value>
 </validationblock>
<note>${#TestSuite#soapVersion} expect ${#TestSuite#donorSoapVersion}-linenumber ${#TestSuite#lineNumber}</note>
</${#TestSuite#soapVersion}>
</contractterminationrequest>
</body>
</message>]]]]>><![CDATA[</sch:Text>
            </sch:Message>
         </sch:Messages>
      </sch:SendMessagesRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="XPath Match" name="Match content of [ns2:TransactionId] using RegEx" id="1c471417-807a-4012-a734-b2dd5be94c8f">
              <con:configuration>
                <path>declare namespace ns2='http://coin.nl/ws/schema';
//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]/text()</path>
                <content>*</content>
                <allowWildcards>true</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" name="Check count of [ns2:TransactionId]" id="345c96a3-89a0-476e-9875-b0c18e04ef5b">
              <con:configuration>
                <path>declare namespace ns2='http://coin.nl/ws/schema';
count( //ns2:SendMessagesResponse/ns2:TransactionId)</path>
                <content>1</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert node [ns2:TransactionId]" id="63f77b9d-d209-4d74-ad56-a26982ab75c5">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
//def groovyUtilsPro = new com.eviware.soapui.support.GroovyUtilsPro( context )

def holder = new XmlHolder( messageExchange.responseContentAsXml )
holder.namespaces["ns2"] = "http://coin.nl/ws/schema"
def transactionId = holder.getNodeValue( "//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]" )
messageExchange.modelItem.testStep.testCase.setPropertyValue("transactionId",transactionId)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#TestSuite#recipientUserName}</con:username>
              <con:password>${#TestSuite#recipientPassWord}</con:password>
              <con:domain xsi:nil="true"/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://coin.nl/SendMessages"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_ST Table" id="cabd882d-06da-499c-8374-f57761b8cd91">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_transactions 
where st_transaction_id = '${#TestCase#transactionId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Verify TransactionId" id="0314e1fa-b1cb-4932-bba8-55dd87029a85">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_TRANSACTION_ID[1]</path>
              <content>${#TestCase#transactionId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify ST_SEND_RECEIVED" id="9db0e630-c611-4fc1-b0bc-fb6028a6a7c3">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_SEND_RECEIVED[1]</path>
              <content>received</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" name="Contains: Contain message Type" id="85caea84-7bde-4674-9d00-009229cb7411">
            <con:configuration>
              <token>&amp;lt;contractterminationrequest&amp;gt;</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="77af631e-a991-48c5-b7c6-43b4c54de0ad" name="Script: store SoapTransaction.id">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "Id");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="f07eb502-0db3-4f37-9b45-96de0e252fba" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="6d306476-bff4-46ae-818c-5ebc90b256b6" name="Xpath: assert UserIP" disabled="true">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_IP/text()</path>
              <content>${#Project#UserIP}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="06f7c2d7-b388-4a79-b2cc-2bfba91ea9ad" name="Xpath: assert UserName">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_NAME/text()</path>
              <content>${#TestSuite#recipientUserName}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="1af27510-c527-4d36-8f8b-2f1183ee0738" name="Xpath: assert TechSender">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_TECHNICAL_SENDER/text()</path>
              <content>${#TestSuite#recipient}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Wait For Poller" id="1bbb910a-6dd5-490d-9b66-f95b877efe59">
        <con:settings/>
        <con:config>
          <delay>${#TestSuite#PollTime}</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_RSXM Table_CTR" id="d914ef02-92ed-4bdc-96e6-18df02234d44">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.raw_soap_xml_messages where rsxm_st_id = '${#TestCase#Id}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: XPath Match" id="14d90270-6f91-4150-993a-d24f2adbd507">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/RSXM_STATUS[1]</path>
              <content>Failed</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="f5b5866b-5944-49c5-a7c3-15e86ef2f5eb" name="JDBC Status"/>
          <con:assertion type="GroovyScriptAssertion" id="f7f7e57c-4ced-4955-b368-28f362da6517" name="Script: SaveRSXM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctrRSXMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_MSL Table_CTR" id="c2868f23-efc5-4bf2-b4a8-fc5bb01ee8b4">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>Select * from overstappen.message_logging where 
msl_soap_transaction_id = '${#TestCase#transactionId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: assert MSL_CLC_ID]" id="e99eef8e-047f-4dff-930b-7b92f2348249">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/MSL_CLC_ID[1]/text()</path>
              <content>34</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="a38a600d-9175-40f3-8442-37550aeb0a90" name="Contains: assert 201 -XML etc">
            <con:configuration>
              <token>201 - XML does not fit the XSD</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="ed4aff4f-22a7-4a87-be0e-7ef1c91d039a" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="158a67ba-339b-4cd4-b4ff-ac1534e316e4" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:setupScript>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import groovy.time.TimeCategory
def today = new Date() 
def now = String.format('%tFT%&lt;tT', new Date() )
def wishdate = today 
use(TimeCategory) {
	   wishdate = wishdate + 1.day
}
def wishdatestr = wishdate.format("yyyy-MM-dd'T'HH:mm:ss")
testRunner.testCase.setPropertyValue("Now",now)
testRunner.testCase.setPropertyValue("wishDate",wishdatestr)
String contractId = funcHandle.getRandomString()
testRunner.testCase.setPropertyValue("contractId",contractId)</con:setupScript>
      <con:tearDownScript/>
      <con:properties/>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>122d3297-f22d-449f-ac52-c46f1bfb714e</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="end block with  more than 20 digits" searchProperties="true" id="9002ea6d-ff04-44e0-b00b-4e5fa9140123" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:settings>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">1000</con:setting>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting>
      </con:settings>
      <con:testStep type="request" name="CTR-Sunny Day" id="cca08abe-bedb-46df-9671-942f18c23507">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>CompWebserviceSoap11</con:interface>
          <con:operation>SendMessages</con:operation>
          <con:request name="CTR-Sunny Day" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordText" id="3aa22f8f-37c1-4ea2-ba88-b80068a3761f">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#SoapUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="http://coin.nl/ws/schema">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:SendMessagesRequest>
         <sch:Sender>${#TestSuite#recipient}</sch:Sender>
         <sch:Messages>
            <sch:Message>
               <sch:Text><![CDATA[<?xml version="1.0"?>
<message xmlns="http://www.coin.nl/Overstappen_MESSAGES">
<header>
<receiver>
<!--Optional:-->
<networkoperator>${#TestSuite#donor}</networkoperator>
<!--Optional:-->
<serviceprovider>${#TestSuite#donor}</serviceprovider>
</receiver>
<sender>
<!--Optional:-->
<networkoperator>${#TestSuite#recipient}</networkoperator>
<!--Optional:-->
<serviceprovider>${#TestSuite#recipient}</serviceprovider>
</sender>
<!--Optional:-->
<messageid>${#TestSuite#recipient}-${#TestCase#contractId}-01</messageid>
<timestamp>${#TestSuite#TimestampNOW}</timestamp>
</header>
<body>
<contractterminationrequest>
<${#TestSuite#soapVersion}>
<dossierid>${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01</dossierid>
<!--Optional:-->
<recipientserviceprovider>${#TestSuite#recipient}</recipientserviceprovider>
<!--Optional:-->
<recipientnetworkoperator>${#TestSuite#recipient}</recipientnetworkoperator>
<!--Optional:-->
<donornetworkoperator>${#TestSuite#donor}</donornetworkoperator>
<!--Optional:-->
<donorserviceprovider>${#TestSuite#donor}</donorserviceprovider>
<wishdatetime>${#TestCase#wishdate}</wishdatetime>
${#TestSuite#dossierType}
${#TestSuite#compensationOK}
<name>COIN</name>
<addressblock>
 	<postcode>1389SS</postcode>
	<housenr>99999</housenr>
</addressblock>
<numberseries>
<start>0123456789012345678934</start>
    </numberseries>
<validationblock>
    <name>contractid</name>
    <value>1-${#TestCase#contractID}</value>
 </validationblock>
<note>${#TestSuite#soapVersion} expect ${#TestSuite#donorSoapVersion}-linenumber ${#TestSuite#lineNumber}</note>
</${#TestSuite#soapVersion}>
</contractterminationrequest>
</body>
</message>]]]]>><![CDATA[</sch:Text>
            </sch:Message>
         </sch:Messages>
      </sch:SendMessagesRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="XPath Match" name="Match content of [ns2:TransactionId] using RegEx" id="1c471417-807a-4012-a734-b2dd5be94c8f">
              <con:configuration>
                <path>declare namespace ns2='http://coin.nl/ws/schema';
//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]/text()</path>
                <content>*</content>
                <allowWildcards>true</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" name="Check count of [ns2:TransactionId]" id="345c96a3-89a0-476e-9875-b0c18e04ef5b">
              <con:configuration>
                <path>declare namespace ns2='http://coin.nl/ws/schema';
count( //ns2:SendMessagesResponse/ns2:TransactionId)</path>
                <content>1</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert node [ns2:TransactionId]" id="63f77b9d-d209-4d74-ad56-a26982ab75c5">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
//def groovyUtilsPro = new com.eviware.soapui.support.GroovyUtilsPro( context )

def holder = new XmlHolder( messageExchange.responseContentAsXml )
holder.namespaces["ns2"] = "http://coin.nl/ws/schema"
def transactionId = holder.getNodeValue( "//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]" )
messageExchange.modelItem.testStep.testCase.setPropertyValue("transactionId",transactionId)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#TestSuite#recipientUserName}</con:username>
              <con:password>${#TestSuite#recipientPassWord}</con:password>
              <con:domain xsi:nil="true"/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://coin.nl/SendMessages"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_ST Table" id="0b955f18-5e55-45d1-8319-97a208f9a975">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_transactions 
where st_transaction_id = '${#TestCase#transactionId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Verify TransactionId" id="0314e1fa-b1cb-4932-bba8-55dd87029a85">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_TRANSACTION_ID[1]</path>
              <content>${#TestCase#transactionId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify ST_SEND_RECEIVED" id="9db0e630-c611-4fc1-b0bc-fb6028a6a7c3">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_SEND_RECEIVED[1]</path>
              <content>received</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" name="Contains: Contain message Type" id="85caea84-7bde-4674-9d00-009229cb7411">
            <con:configuration>
              <token>&amp;lt;contractterminationrequest&amp;gt;</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="77af631e-a991-48c5-b7c6-43b4c54de0ad" name="Script: store SoapTransaction.id">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "Id");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="f07eb502-0db3-4f37-9b45-96de0e252fba" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="6d306476-bff4-46ae-818c-5ebc90b256b6" name="Xpath: assert UserIP" disabled="true">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_IP/text()</path>
              <content>${#Project#UserIP}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="06f7c2d7-b388-4a79-b2cc-2bfba91ea9ad" name="Xpath: assert UserName">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_NAME/text()</path>
              <content>${#TestSuite#recipientUserName}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="1af27510-c527-4d36-8f8b-2f1183ee0738" name="Xpath: assert TechSender">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_TECHNICAL_SENDER/text()</path>
              <content>${#TestSuite#recipient}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Wait For Poller" id="bdab722a-492b-474c-a3d5-a9b792f496e1">
        <con:settings/>
        <con:config>
          <delay>${#TestSuite#PollTime}</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_RSXM Table_CTR" id="61a87078-f715-46c8-901d-60fef259b009">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.raw_soap_xml_messages where rsxm_st_id = '${#TestCase#Id}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: XPath Match" id="14d90270-6f91-4150-993a-d24f2adbd507">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/RSXM_STATUS[1]</path>
              <content>Failed</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="f5b5866b-5944-49c5-a7c3-15e86ef2f5eb" name="JDBC Status"/>
          <con:assertion type="GroovyScriptAssertion" id="16388c13-9aa9-42ce-aebe-97977d306457" name="Script: SaveRSXM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctrRSXMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_MSL Table_CTR" id="fec460c8-2a72-4539-bc19-bbcf93c04b71">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>Select * from overstappen.message_logging where 
msl_soap_transaction_id = '${#TestCase#transactionId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: assert MSL_CLC_ID]" id="e99eef8e-047f-4dff-930b-7b92f2348249">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/MSL_CLC_ID[1]/text()</path>
              <content>34</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="ed4aff4f-22a7-4a87-be0e-7ef1c91d039a" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="158a67ba-339b-4cd4-b4ff-ac1534e316e4" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="186361d0-5cf5-4cb8-a24d-b290c24fd237" name="Contains: Contains">
            <con:configuration>
              <token>201 - XML does not fit the XSD</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:setupScript>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import groovy.time.TimeCategory
def today = new Date() 
def now = String.format('%tFT%&lt;tT', new Date() )
def wishdate = today 
use(TimeCategory) {
	   wishdate = wishdate + 1.day
}
def wishdatestr = wishdate.format("yyyy-MM-dd'T'HH:mm:ss")
testRunner.testCase.setPropertyValue("Now",now)
testRunner.testCase.setPropertyValue("wishDate",wishdatestr)
String contractId = funcHandle.getRandomString()
testRunner.testCase.setPropertyValue("contractId",contractId)</con:setupScript>
      <con:tearDownScript/>
      <con:properties/>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>122d3297-f22d-449f-ac52-c46f1bfb714e</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="start block with negative number" searchProperties="true" id="a1cb9084-aafa-4a1b-8f07-98019ed30e7e" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:settings>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">1000</con:setting>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting>
      </con:settings>
      <con:testStep type="request" name="CTR-Sunny Day" id="d5d3d7b2-ea1a-4604-a7f4-5f63b4db11e3">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>CompWebserviceSoap11</con:interface>
          <con:operation>SendMessages</con:operation>
          <con:request name="CTR-Sunny Day" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordText" id="3aa22f8f-37c1-4ea2-ba88-b80068a3761f">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#SoapUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="http://coin.nl/ws/schema">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:SendMessagesRequest>
         <sch:Sender>${#TestSuite#recipient}</sch:Sender>
         <sch:Messages>
            <sch:Message>
               <sch:Text><![CDATA[<?xml version="1.0"?>
<message xmlns="http://www.coin.nl/Overstappen_MESSAGES">
<header>
<receiver>
<!--Optional:-->
<networkoperator>${#TestSuite#donor}</networkoperator>
<!--Optional:-->
<serviceprovider>${#TestSuite#donor}</serviceprovider>
</receiver>
<sender>
<!--Optional:-->
<networkoperator>${#TestSuite#recipient}</networkoperator>
<!--Optional:-->
<serviceprovider>${#TestSuite#recipient}</serviceprovider>
</sender>
<!--Optional:-->
<messageid>${#TestSuite#recipient}-${#TestCase#contractId}-01</messageid>
<timestamp>${#TestSuite#TimestampNOW}</timestamp>
</header>
<body>
<contractterminationrequest>
<${#TestSuite#soapVersion}>
<dossierid>${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01</dossierid>
<!--Optional:-->
<recipientserviceprovider>${#TestSuite#recipient}</recipientserviceprovider>
<!--Optional:-->
<recipientnetworkoperator>${#TestSuite#recipient}</recipientnetworkoperator>
<!--Optional:-->
<donornetworkoperator>${#TestSuite#donor}</donornetworkoperator>
<!--Optional:-->
<donorserviceprovider>${#TestSuite#donor}</donorserviceprovider>
<wishdatetime>${#TestCase#wishdate}</wishdatetime>
${#TestSuite#dossierType}
${#TestSuite#compensationOK}
<name>COIN</name>
<addressblock>
 	<postcode>1389SS</postcode>
	<housenr>99999</housenr>
</addressblock>
<numberseries>
     <start>-1234567890123456789</start>
     <end>0173112233</end>
</numberseries>
<validationblock>
    <name>contractid</name>
    <value>2-${#TestCase#contractID}</value>
 </validationblock>
<note>Sunny day-sent ${#TestSuite#soapVersion} expect ${#TestSuite#donorSoapVersion}-linenr. ${#TestSuite#lineNumber}</note>
</${#TestSuite#soapVersion}>
</contractterminationrequest>
</body>
</message>]]]]>><![CDATA[</sch:Text>
            </sch:Message>
         </sch:Messages>
      </sch:SendMessagesRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="XPath Match" name="Match content of [ns2:TransactionId] using RegEx" id="1c471417-807a-4012-a734-b2dd5be94c8f">
              <con:configuration>
                <path>declare namespace ns2='http://coin.nl/ws/schema';
//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]/text()</path>
                <content>*</content>
                <allowWildcards>true</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" name="Check count of [ns2:TransactionId]" id="345c96a3-89a0-476e-9875-b0c18e04ef5b">
              <con:configuration>
                <path>declare namespace ns2='http://coin.nl/ws/schema';
count( //ns2:SendMessagesResponse/ns2:TransactionId)</path>
                <content>1</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert node [ns2:TransactionId]" id="63f77b9d-d209-4d74-ad56-a26982ab75c5">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
//def groovyUtilsPro = new com.eviware.soapui.support.GroovyUtilsPro( context )

def holder = new XmlHolder( messageExchange.responseContentAsXml )
holder.namespaces["ns2"] = "http://coin.nl/ws/schema"
def transactionId = holder.getNodeValue( "//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]" )
messageExchange.modelItem.testStep.testCase.setPropertyValue("transactionId",transactionId)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#TestSuite#recipientUserName}</con:username>
              <con:password>${#TestSuite#recipientPassWord}</con:password>
              <con:domain xsi:nil="true"/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://coin.nl/SendMessages"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_ST Table" id="f12cf2b3-c218-46f3-8617-688f1ca180aa">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_transactions 
where st_transaction_id = '${#TestCase#transactionId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Verify TransactionId" id="0314e1fa-b1cb-4932-bba8-55dd87029a85">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_TRANSACTION_ID[1]</path>
              <content>${#TestCase#transactionId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify ST_SEND_RECEIVED" id="9db0e630-c611-4fc1-b0bc-fb6028a6a7c3">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_SEND_RECEIVED[1]</path>
              <content>received</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" name="Contains: Contain message Type" id="85caea84-7bde-4674-9d00-009229cb7411">
            <con:configuration>
              <token>&amp;lt;contractterminationrequest&amp;gt;</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="77af631e-a991-48c5-b7c6-43b4c54de0ad" name="Script: store SoapTransaction.id">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "Id");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="f07eb502-0db3-4f37-9b45-96de0e252fba" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="6d306476-bff4-46ae-818c-5ebc90b256b6" name="Xpath: assert UserIP" disabled="true">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_IP/text()</path>
              <content>${#Project#UserIP}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="06f7c2d7-b388-4a79-b2cc-2bfba91ea9ad" name="Xpath: assert UserName">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_NAME/text()</path>
              <content>${#TestSuite#recipientUserName}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="1af27510-c527-4d36-8f8b-2f1183ee0738" name="Xpath: assert TechSender">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_TECHNICAL_SENDER/text()</path>
              <content>${#TestSuite#recipient}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Wait For Poller" id="47338aed-c408-4b42-98f1-dab7fc0f2d69">
        <con:settings/>
        <con:config>
          <delay>${#TestSuite#PollTime}</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_RSXM Table_CTR" id="9732186d-5710-464b-a980-e28c14813680">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.raw_soap_xml_messages where rsxm_st_id = '${#TestCase#Id}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: XPath Match" id="14d90270-6f91-4150-993a-d24f2adbd507">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/RSXM_STATUS[1]</path>
              <content>Failed</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="f5b5866b-5944-49c5-a7c3-15e86ef2f5eb" name="JDBC Status"/>
          <con:assertion type="GroovyScriptAssertion" id="105528da-aa38-4547-9913-60e580790e05" name="Script: SaveRSXM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctrRSXMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_MSL Table_CTR" id="4e6b200e-70e6-4f10-b852-b90a9dbcb0d9">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>Select * from overstappen.message_logging where 
msl_soap_transaction_id = '${#TestCase#transactionId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: assert MSL_CLC_ID]" id="e99eef8e-047f-4dff-930b-7b92f2348249">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/MSL_CLC_ID[1]/text()</path>
              <content>34</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="a38a600d-9175-40f3-8442-37550aeb0a90" name="Contains: assert 201 -XML etc">
            <con:configuration>
              <token>201 - XML does not fit the XSD</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="ed4aff4f-22a7-4a87-be0e-7ef1c91d039a" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="158a67ba-339b-4cd4-b4ff-ac1534e316e4" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:setupScript>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import groovy.time.TimeCategory
def today = new Date() 
def now = String.format('%tFT%&lt;tT', new Date() )
def wishdate = today 
use(TimeCategory) {
	   wishdate = wishdate + 1.day
}
def wishdatestr = wishdate.format("yyyy-MM-dd'T'HH:mm:ss")
testRunner.testCase.setPropertyValue("Now",now)
testRunner.testCase.setPropertyValue("wishDate",wishdatestr)
String contractId = funcHandle.getRandomString()
testRunner.testCase.setPropertyValue("contractId",contractId)</con:setupScript>
      <con:tearDownScript/>
      <con:properties/>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>122d3297-f22d-449f-ac52-c46f1bfb714e</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="end block with negative number" searchProperties="true" id="b7d64fa6-3ae1-479b-978a-54a7bcdf732a" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:settings>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">1000</con:setting>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting>
      </con:settings>
      <con:testStep type="request" name="CTR-Sunny Day" id="89851207-dbaa-4a0b-9439-c89edaf27967">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>CompWebserviceSoap11</con:interface>
          <con:operation>SendMessages</con:operation>
          <con:request name="CTR-Sunny Day" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordText" id="3aa22f8f-37c1-4ea2-ba88-b80068a3761f">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#SoapUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="http://coin.nl/ws/schema">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:SendMessagesRequest>
         <sch:Sender>${#TestSuite#recipient}</sch:Sender>
         <sch:Messages>
            <sch:Message>
               <sch:Text><![CDATA[<?xml version="1.0"?>
<message xmlns="http://www.coin.nl/Overstappen_MESSAGES">
<header>
<receiver>
<!--Optional:-->
<networkoperator>${#TestSuite#donor}</networkoperator>
<!--Optional:-->
<serviceprovider>${#TestSuite#donor}</serviceprovider>
</receiver>
<sender>
<!--Optional:-->
<networkoperator>${#TestSuite#recipient}</networkoperator>
<!--Optional:-->
<serviceprovider>${#TestSuite#recipient}</serviceprovider>
</sender>
<!--Optional:-->
<messageid>${#TestSuite#recipient}-${#TestCase#contractId}-01</messageid>
<timestamp>${#TestSuite#TimestampNOW}</timestamp>
</header>
<body>
<contractterminationrequest>
<${#TestSuite#soapVersion}>
<dossierid>${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01</dossierid>
<!--Optional:-->
<recipientserviceprovider>${#TestSuite#recipient}</recipientserviceprovider>
<!--Optional:-->
<recipientnetworkoperator>${#TestSuite#recipient}</recipientnetworkoperator>
<!--Optional:-->
<donornetworkoperator>${#TestSuite#donor}</donornetworkoperator>
<!--Optional:-->
<donorserviceprovider>${#TestSuite#donor}</donorserviceprovider>
<wishdatetime>${#TestCase#wishdate}</wishdatetime>
${#TestSuite#dossierType}
${#TestSuite#compensationOK}
<name>COIN</name>
<addressblock>
 	<postcode>1389SS</postcode>
	<housenr>99999</housenr>
</addressblock>
<numberseries>
     <start>01234567890123456789</start>
     <end>0-611223344</end>
</numberseries>
<validationblock>
    <name>contractid</name>
    <value>2-${#TestCase#contractID}</value>
 </validationblock>
<note>Sunny day-sent ${#TestSuite#soapVersion} expect ${#TestSuite#donorSoapVersion}-linenr. ${#TestSuite#lineNumber}</note>
</${#TestSuite#soapVersion}>
</contractterminationrequest>
</body>
</message>]]]]>><![CDATA[</sch:Text>
            </sch:Message>
         </sch:Messages>
      </sch:SendMessagesRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="XPath Match" name="Match content of [ns2:TransactionId] using RegEx" id="1c471417-807a-4012-a734-b2dd5be94c8f">
              <con:configuration>
                <path>declare namespace ns2='http://coin.nl/ws/schema';
//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]/text()</path>
                <content>*</content>
                <allowWildcards>true</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" name="Check count of [ns2:TransactionId]" id="345c96a3-89a0-476e-9875-b0c18e04ef5b">
              <con:configuration>
                <path>declare namespace ns2='http://coin.nl/ws/schema';
count( //ns2:SendMessagesResponse/ns2:TransactionId)</path>
                <content>1</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert node [ns2:TransactionId]" id="63f77b9d-d209-4d74-ad56-a26982ab75c5">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
//def groovyUtilsPro = new com.eviware.soapui.support.GroovyUtilsPro( context )

def holder = new XmlHolder( messageExchange.responseContentAsXml )
holder.namespaces["ns2"] = "http://coin.nl/ws/schema"
def transactionId = holder.getNodeValue( "//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]" )
messageExchange.modelItem.testStep.testCase.setPropertyValue("transactionId",transactionId)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#TestSuite#recipientUserName}</con:username>
              <con:password>${#TestSuite#recipientPassWord}</con:password>
              <con:domain xsi:nil="true"/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://coin.nl/SendMessages"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_ST Table" id="e9a18513-725f-46c7-ae6b-6616042283ea">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_transactions 
where st_transaction_id = '${#TestCase#transactionId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Verify TransactionId" id="0314e1fa-b1cb-4932-bba8-55dd87029a85">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_TRANSACTION_ID[1]</path>
              <content>${#TestCase#transactionId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify ST_SEND_RECEIVED" id="9db0e630-c611-4fc1-b0bc-fb6028a6a7c3">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_SEND_RECEIVED[1]</path>
              <content>received</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" name="Contains: Contain message Type" id="85caea84-7bde-4674-9d00-009229cb7411">
            <con:configuration>
              <token>&amp;lt;contractterminationrequest&amp;gt;</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="77af631e-a991-48c5-b7c6-43b4c54de0ad" name="Script: store SoapTransaction.id">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "Id");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="f07eb502-0db3-4f37-9b45-96de0e252fba" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="6d306476-bff4-46ae-818c-5ebc90b256b6" name="Xpath: assert UserIP" disabled="true">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_IP/text()</path>
              <content>${#Project#UserIP}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="06f7c2d7-b388-4a79-b2cc-2bfba91ea9ad" name="Xpath: assert UserName">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_NAME/text()</path>
              <content>${#TestSuite#recipientUserName}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="1af27510-c527-4d36-8f8b-2f1183ee0738" name="Xpath: assert TechSender">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_TECHNICAL_SENDER/text()</path>
              <content>${#TestSuite#recipient}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Wait For Poller" id="5065a69b-923e-44d6-ae0f-3f54a5825de3">
        <con:settings/>
        <con:config>
          <delay>${#TestSuite#PollTime}</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_RSXM Table_CTR" id="fbd838cc-e790-4a09-8fbd-c72d062a79dd">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.raw_soap_xml_messages where rsxm_st_id = '${#TestCase#Id}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: XPath Match" id="14d90270-6f91-4150-993a-d24f2adbd507">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/RSXM_STATUS[1]</path>
              <content>Failed</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="f5b5866b-5944-49c5-a7c3-15e86ef2f5eb" name="JDBC Status"/>
          <con:assertion type="GroovyScriptAssertion" id="34cb7964-0319-413e-b015-f0051674ca07" name="Script: SaveRSXM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctrRSXMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_MSL Table_CTR" id="b20de49e-61b7-4378-9275-9fb0d9b98392">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>Select * from overstappen.message_logging where 
msl_soap_transaction_id = '${#TestCase#transactionId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: assert MSL_CLC_ID]" id="e99eef8e-047f-4dff-930b-7b92f2348249">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/MSL_CLC_ID[1]/text()</path>
              <content>34</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="a38a600d-9175-40f3-8442-37550aeb0a90" name="Contains: assert 201 -XML etc">
            <con:configuration>
              <token>201 - XML does not fit the XSD</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="ed4aff4f-22a7-4a87-be0e-7ef1c91d039a" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="158a67ba-339b-4cd4-b4ff-ac1534e316e4" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:setupScript>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import groovy.time.TimeCategory
def today = new Date() 
def now = String.format('%tFT%&lt;tT', new Date() )
def wishdate = today 
use(TimeCategory) {
	   wishdate = wishdate + 1.day
}
def wishdatestr = wishdate.format("yyyy-MM-dd'T'HH:mm:ss")
testRunner.testCase.setPropertyValue("Now",now)
testRunner.testCase.setPropertyValue("wishDate",wishdatestr)
String contractId = funcHandle.getRandomString()
testRunner.testCase.setPropertyValue("contractId",contractId)</con:setupScript>
      <con:tearDownScript/>
      <con:properties/>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>122d3297-f22d-449f-ac52-c46f1bfb714e</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:properties>
      <con:property>
        <con:name>TimestampNOW</con:name>
        <con:value>${=String.format('%tFT%&lt;tT', new Date())}</con:value>
      </con:property>
      <con:property>
        <con:name>PollTime</con:name>
        <con:value>2000</con:value>
      </con:property>
      <con:property>
        <con:name>lineNumber</con:name>
        <con:value>0</con:value>
      </con:property>
      <con:property>
        <con:name>RepairTime</con:name>
        <con:value>180000</con:value>
      </con:property>
      <con:property>
        <con:name>testdatafile</con:name>
        <con:value>soaptosoap.csv</con:value>
      </con:property>
      <con:property>
        <con:name>browser</con:name>
        <con:value>firefox</con:value>
      </con:property>
    </con:properties>
    <con:setupScript>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
import org.apache.commons.lang.RandomStringUtils
import groovy.time.TimeCategory
import nl.coin.Selenium.*;
def directory = groovyUtils.projectPath + "/"
System.setProperty("projectfiledir", directory)
def seleniumHandle = new SeleniumActions();
def funcHandle = new ReadymadeFunctions();
def Line = funcHandle.getTestDataAndIncreaseLinenumber(testSuite, directory);
String[] propData = Line.split(";")
funcHandle.setRecipientAndDonorSoapCredentials(seleniumHandle, testSuite, directory, propData[0], propData[1]);
testSuite.setPropertyValue("soapVersion",propData[2])
testSuite.setPropertyValue("dossierType",propData[3])
testSuite.setPropertyValue("compensationOK",propData[4])
import groovy.sql.Sql;
def  con = funcHandle.createDBConObject(testSuite);
def recepientDetails = funcHandle.setProperty4mDB(testSuite, con, "select spr_code, it_interface_type,business_gui_only from overstappen.service_provider inner join overstappen.interface_type on service_provider.spr_request_it_id = interface_type.id where service_provider.spr_code = '"+ propData[0]+"'", ["business_gui_only", "it_interface_type"] as String[], ["recipientbgo", "recipientif"] as String[]);
def donorDetails = funcHandle.setProperty4mDB(testSuite, con, "select spr_code, it_interface_type,business_gui_only from overstappen.service_provider inner join overstappen.interface_type on service_provider.spr_request_it_id = interface_type.id where service_provider.spr_code = '"+ propData[1]+"'", ["business_gui_only", "it_interface_type"] as String[], ["donorbgo", "donorif"] as String[]);
testSuite.setPropertyValue( "businessGuiOnly" , donorDetails[0])
def donorsoap = funcHandle.getDonorSoapVersionS2SAndSetProperty(testSuite, donorDetails[1], propData[3], "donorSoapVersion");
def donorbusiness = funcHandle.getDonorDossierTypeS2SAndSetProperty(testSuite, donorDetails[1], propData[3], "donorDossierType");
def donorMessage = funcHandle.getMessageTypeAndSetProperty(testSuite, donorDetails[1], propData[3], donorDetails[0], "donorMessage");
funcHandle.setProperty4mDB(testSuite, con, "select id from overstappen.service_provider where spr_code='"+ propData[0]+"'", "id", "recipientId")
funcHandle.setProperty4mDB(testSuite, con, "select id from overstappen.service_provider where spr_code='"+ propData[1]+"'", "id", "donorId");
funcHandle.getOutgoingMsgTypeAndSetProperty(testSuite, propData[3], recepientDetails[0], recepientDetails[1], "donorOutMsg");
funcHandle.getOutgoingMsgTypeAndSetProperty(testSuite, propData[3], donorDetails[0], donorDetails[1], "recipientOutMsg");
con.close()</con:setupScript>
    <con:tearDownScript/>
    <con:reportParameters/>
  </con:testSuite>
  <con:endpointStrategy xsi:type="con:DefaultEndpointStrategy" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:endpoint mode="COMPLEMENT" username="Bert" password="Ernie" wssType="PasswordText">http://testcomp.coin.nl/compv3/MessageService</con:endpoint>
    <con:endpoint mode="COMPLEMENT" username="Bert" password="Ernie" wssType="PasswordText" domain="" outgoingWss="" incomingWss="">http://210.7.69.28:8080/compv3/MessageService</con:endpoint>
    <con:endpoint mode="COMPLEMENT" username="Bert" password="Ernie">http://192.168.100.28:8080/compv3/MessageService</con:endpoint>
  </con:endpointStrategy>
  <con:requirements/>
  <con:properties>
    <con:property>
      <con:name>directory</con:name>
      <con:value/>
    </con:property>
    <con:property>
      <con:name>SoapUrl</con:name>
      <con:value/>
    </con:property>
    <con:property>
      <con:name>DBHostname</con:name>
      <con:value/>
    </con:property>
    <con:property>
      <con:name>DBPort</con:name>
      <con:value/>
    </con:property>
    <con:property>
      <con:name>DBUser</con:name>
      <con:value/>
    </con:property>
    <con:property>
      <con:name>DBPassword</con:name>
      <con:value/>
    </con:property>
    <con:property>
      <con:name>DBDatabase</con:name>
      <con:value/>
    </con:property>
    <con:property>
      <con:name>GUIUrl</con:name>
      <con:value/>
    </con:property>
    <con:property>
      <con:name>UserIP</con:name>
      <con:value/>
    </con:property>
  </con:properties>
  <con:afterLoadScript/>
  <con:wssContainer/>
  <con:databaseConnectionContainer>
    <con:databaseConnection>
      <con:name>JDBC</con:name>
      <con:driver>org.postgresql.Driver</con:driver>
      <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
      <con:password>${#Project#DBPassword}</con:password>
    </con:databaseConnection>
  </con:databaseConnectionContainer>
  <con:oAuth2ProfileContainer/>
  <con:oAuth1ProfileContainer/>
  <con:reporting>
    <con:xmlTemplates/>
    <con:parameters/>
  </con:reporting>
  <con:sensitiveInformation/>
</con:soapui-project>
