<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project activeEnvironment="Default" name="3.5_Emails" resourceRoot="${projectDir}" soapui-version="5.2.1" abortOnError="false" runType="SEQUENTIAL" id="c69d17d9-8a76-4230-ac09-05b6029fb035" xmlns:con="http://eviware.com/soapui/config">
  <con:settings>
    <con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.TestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="B2 Sunny Day-SOAP state transitions"/>
  <con:entry key="Password" value=""/>
  <con:entry key="TestRunner Path" value="C:\Program Files\SmartBear\SoapUI-5.1.3\bin"/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="user-settings.xml Password" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="false"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Export JUnit Results" value="false"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Export All" value="false"/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="&lt;all>"/>
  <con:entry key="Print Report" value="false"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value=""/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="Endpoint" value=""/>
  <con:entry key="Select Report Type" value=""/>
</xml-fragment>]]></con:setting>
    <con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.LoadTestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="B2 Sunny Day-SOAP state transitions"/>
  <con:entry key="Report to Generate" value=""/>
  <con:entry key="Password" value=""/>
  <con:entry key="TestRunner Path" value="/home/hemasundar/SmartBear/SoapUI-5.1.3/bin"/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="LoadTest" value="&lt;all>"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="user-settings.xml Password" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="false"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Print Report Statistics" value="false"/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="&lt;all>"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value=""/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Endpoint" value=""/>
  <con:entry key="ThreadCount" value=""/>
  <con:entry key="Limit" value=""/>
</xml-fragment>]]></con:setting>
  </con:settings>
  <con:interface xsi:type="con:WsdlInterface" wsaVersion="NONE" name="CompWebserviceSoap11" type="wsdl" bindingName="{http://coin.nl/ws/definitions}CompWebserviceSoap11" soapVersion="1_1" anonymous="optional" definition="${#Project#SoapUrl}" id="8a537fab-845e-48f0-a37f-a40e9d723dce" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:settings>
      <con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.tcpmon.TcpMonAction@values-local">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Local Port" value=""/>
  &lt;con:entry key="Add local endpoint" value="false"/>
  &lt;con:entry key="Endpoint" value=""/>
&lt;/xml-fragment></con:setting>
    </con:settings>
    <con:definitionCache type="TEXT" rootPart="http://192.168.100.28:8080/compv3/compmessage.wsdl">
      <con:part>
        <con:url>http://192.168.100.28:8080/compv3/compmessage.wsdl</con:url>
        <con:content><![CDATA[<wsdl:definitions targetNamespace="http://coin.nl/ws/definitions" xmlns:sch="http://coin.nl/ws/schema" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="http://coin.nl/ws/definitions" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
  <wsdl:types>
    <xsd:schema elementFormDefault="qualified" targetNamespace="http://coin.nl/ws/schema" xmlns:ws-msg="http://coin.nl/ws/schema" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
      <!--Simple Types-->
      <xsd:simpleType name="TransactionId">
        <xsd:restriction base="xsd:string">
          <xsd:maxLength value="60"/>
        </xsd:restriction>
      </xsd:simpleType>
      <!--Grouped Elements-->
      <xsd:group name="Message">
        <xsd:annotation>
          <xsd:documentation/>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element name="Text" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Mandatory field containing the message text.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:group>
      <!--Complex Types-->
      <xsd:complexType name="Message">
        <xsd:sequence>
          <xsd:group ref="ws-msg:Message"/>
        </xsd:sequence>
      </xsd:complexType>
      <!--Request - Response Interface(s)-->
      <xsd:element name="SendMessagesRequest">
        <xsd:annotation>
          <xsd:appinfo>Request interface for SendMessages.</xsd:appinfo>
          <xsd:documentation>Generic interface for sending one or more (xml
						based) messages.
						When successfully received, the receiver of the
						request will respond
						with a TransactionId,
						uniquely identifying
						reception of the request and all the messages in it.</xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="Sender" type="xsd:string"/>
            <xsd:element name="Messages">
              <xsd:complexType>
                <xsd:sequence maxOccurs="unbounded" minOccurs="1">
                  <xsd:element name="Message" type="ws-msg:Message"/>
                </xsd:sequence>
              </xsd:complexType>
            </xsd:element>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="SendMessagesResponse">
        <xsd:annotation>
          <xsd:appinfo>Response interface for SendMessages.</xsd:appinfo>
          <xsd:documentation/>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="TransactionId" type="ws-msg:TransactionId"/>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
    </xsd:schema>
  </wsdl:types>
  <wsdl:message name="SendMessagesRequest">
    <wsdl:part element="sch:SendMessagesRequest" name="SendMessagesRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="SendMessagesResponse">
    <wsdl:part element="sch:SendMessagesResponse" name="SendMessagesResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:portType name="CompWebservice">
    <wsdl:operation name="SendMessages">
      <wsdl:input message="tns:SendMessagesRequest" name="SendMessagesRequest"></wsdl:input>
      <wsdl:output message="tns:SendMessagesResponse" name="SendMessagesResponse"></wsdl:output>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="CompWebserviceSoap11" type="tns:CompWebservice">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="SendMessages">
      <soap:operation soapAction="http://coin.nl/SendMessages"/>
      <wsdl:input name="SendMessagesRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="SendMessagesResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="CompWebserviceService">
    <wsdl:port binding="tns:CompWebserviceSoap11" name="CompWebserviceSoap11">
      <soap:address location="http://192.168.100.28:8080/compv3/MessageService"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content>
        <con:type>http://schemas.xmlsoap.org/wsdl/</con:type>
      </con:part>
    </con:definitionCache>
    <con:endpoints>
      <con:endpoint>${#Project#SoapUrl}</con:endpoint>
    </con:endpoints>
    <con:operation isOneWay="false" action="http://coin.nl/SendMessages" name="SendMessages" bindingOperationName="SendMessages" type="Request-Response" outputName="SendMessagesResponse" inputName="SendMessagesRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="8c3829e4-5325-42d3-82e4-242fad1e423c">
      <con:settings/>
      <con:call name="Contract Termination Request" outgoingWss="" incomingWss="" id="8915428a-63eb-41b1-989c-749c2e2f0cce" wssPasswordType="PasswordText">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>${#Project#SoapUrl}</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="http://coin.nl/ws/schema">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:SendMessagesRequest>
         <sch:Sender>TP10</sch:Sender>
         <sch:Messages>
            <sch:Message>
               <sch:Text><![CDATA[<?xml version="1.0"?>
<over:message xmlns:over="http://www.coin.nl/Overstappen_MESSAGES">
<over:header>
<over:receiver>
<!--Optional:-->
<over:networkoperator>TP14</over:networkoperator>
<!--Optional:-->
<over:serviceprovider>TP14</over:serviceprovider>
</over:receiver>
<over:sender>
<!--Optional:-->
<over:networkoperator>TP10</over:networkoperator>
<!--Optional:-->
<over:serviceprovider>TP10</over:serviceprovider>
</over:sender>
<!--Optional:-->
<over:messageid>TP10-TP14-TESTING-01</over:messageid>
<over:timestamp></over:timestamp>
</over:header>
<over:body>
<over:contractterminationrequest>
<over:v1>
<over:dossierid>TP10-TP14-TESTING-01</over:dossierid>
<!--Optional:-->
<over:recipientserviceprovider>TP10</over:recipientserviceprovider>
<!--Optional:-->
<over:recipientnetworkoperator>TP10</over:recipientnetworkoperator>
<!--Optional:-->
<over:donornetworkoperator>TP14</over:donornetworkoperator>
<!--Optional:-->
<over:donorserviceprovider>TP14</over:donorserviceprovider>
<over:customerinfo>
<!--Optional:-->
<over:initials>Ms</over:initials>
<!--Optional:-->
<over:prefix>Priyanka</over:prefix>
<!--Optional:-->
<over:lastname>Taneja</over:lastname>
<!--Optional:-->
<over:telephonecontact>0886086375</over:telephonecontact>
<!--Optional:-->
<over:emailaddresscontact>f@xebia.com</over:emailaddresscontact>
<!--Optional:-->
<over:companyname>XEBIA PVT LTD</over:companyname>
<!--Optional:-->
<over:customerid>ABCDEFGH1234</over:customerid>
<!--Optional:-->
<over:contractid>SOAP3EMAIL</over:contractid>
<over:contractaddress>
<!--Optional:-->
<over:address>HARINAGAR</over:address>
<over:housenr>123</over:housenr>
<!--Optional:-->
<over:housenr_ext>123</over:housenr_ext>
<over:postcode>1234AS</over:postcode>
<!--Optional:-->
<over:city>DELHI</over:city>
<!--Optional:-->
<over:country>IND</over:country>
</over:contractaddress>
<over:connectionaddress>
<!--Optional:-->
<over:address>HARINAGAR</over:address>
<over:housenr>123</over:housenr>
<!--Optional:-->
<over:housenr_ext>123</over:housenr_ext>
<over:postcode>1234AS</over:postcode>
<!--Optional:-->
<over:city>DELHI</over:city>
<!--Optional:-->
<over:country>IND</over:country>
</over:connectionaddress>
</over:customerinfo>
<over:wishdatetime>2014-01-14</over:wishdatetime>
<!--Optional:-->
<over:note>TEST</over:note>
</over:v1>
</over:contractterminationrequest>
</over:body>
</over:message>]]]]>><![CDATA[</sch:Text>
            </sch:Message>
         </sch:Messages>
      </sch:SendMessagesRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:credentials>
          <con:username>COINTP10</con:username>
          <con:password>COINTP10</con:password>
          <con:domain xsi:nil="true"/>
          <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
          <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
          <con:preemptive>true</con:preemptive>
          <con:authType>Preemptive</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://coin.nl/SendMessages"/>
        <con:wsrmConfig version="1.2"/>
      </con:call>
      <con:call name="Contract Termination Request Answer" outgoingWss="" incomingWss="" id="73af3a6a-ca5e-4560-819c-8035caf9acee">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>${#Project#SoapUrl}</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="http://coin.nl/ws/schema">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:SendMessagesRequest>
         <sch:Sender>KPN</sch:Sender>
         <sch:Messages>
            <sch:Message>
               <sch:Text><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<message xmlns="http://www.coin.nl/Overstappen_MESSAGES">
  <header>
    <receiver>
      <networkoperator>ZIGGO</networkoperator>
      <serviceprovider>ZIGGO</serviceprovider>
    </receiver>
    <sender>
      <networkoperator>KPN</networkoperator>
      <serviceprovider>KPN</serviceprovider>
    </sender>
    <messageid>ZIGGO-KPN-GUI2SOAP1-01</messageid>
    <timestamp>2014-01-08T12:56:45</timestamp>
  </header>
  <body>
    <contractterminationrequestanswer>
      <v1>
        <dossierid>ZIGGO-KPN-GUI2SOAP1-01</dossierid>
        <blocking>N</blocking>
        <wishdatetime>2014-01-17</wishdatetime>
        <blockingcode>0</blockingcode>
        <note>TEST-ANSWER</note>
      </v1>
    </contractterminationrequestanswer>
  </body>
</message>]]]]>><![CDATA[</sch:Text>
            </sch:Message>
         </sch:Messages>
      </sch:SendMessagesRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:credentials>
          <con:username>Bert</con:username>
          <con:password>Ernie</con:password>
          <con:domain xsi:nil="true"/>
          <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
          <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
          <con:preemptive>true</con:preemptive>
          <con:authType>Preemptive</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://coin.nl/SendMessages"/>
        <con:wsrmConfig version="1.2"/>
      </con:call>
      <con:call name="Multiple Contract Termination Requests" outgoingWss="" incomingWss="" id="ad0bd36e-cbfe-4f7c-bf73-cd36950c1291" wssPasswordType="PasswordText">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>${#Project#SoapUrl}</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="http://coin.nl/ws/schema">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:SendMessagesRequest>
         <sch:Sender>CRY</sch:Sender>
         <sch:Messages>
            <sch:Message>
               <sch:Text><![CDATA[<?xml version="1.0"?>
<message xmlns="http://www.coin.nl/Overstappen_MESSAGES">
<header>
<receiver>
<networkoperator>FARI</networkoperator>
<serviceprovider>FARI</serviceprovider>
</receiver>
<sender>
<networkoperator>CRY</networkoperator>
<serviceprovider>CRY</serviceprovider>
</sender>
<messageid>CRY-FARI-CryFari01-01</messageid>
<timestamp>2014-01-22T13:40:45</timestamp>
</header>
<body>
<contractterminationrequest>
<v1>
<dossierid>CRY-FARI-CryFari01-01</dossierid>
<recipientserviceprovider>CRY</recipientserviceprovider>
<recipientnetworkoperator>CRY</recipientnetworkoperator>
<donornetworkoperator>FARI</donornetworkoperator>
<donorserviceprovider>FARI</donorserviceprovider>
<customerinfo>
<initials>Ms</initials>
<prefix>Priyanka</prefix>
<lastname>Tanjea</lastname>
<telephonecontact>0886086375</telephonecontact>
<emailaddresscontact>f@xebia.com</emailaddresscontact>
<companyname>XEBIA PVT LTD</companyname>
<customerid>ABCDEFGH1234</customerid>
<contractid>CryFari01</contractid>
<contractaddress>
<address>HARINAGAR</address>
<housenr>123</housenr>
<housenr_ext>123</housenr_ext>
<postcode>1234AS</postcode>
<city>DELHI</city>
<country>IND</country>
</contractaddress>
<connectionaddress>
<address>HARINAGAR</address>
<housenr>123</housenr>
<housenr_ext>123</housenr_ext>
<postcode>1234AS</postcode>
<city>DELHI</city>
<country>IND</country>
</connectionaddress>
</customerinfo>
<wishdatetime>2014-02-10</wishdatetime>
<note></note>
</v1>
</contractterminationrequest>
</body>
</message>]]]]>><![CDATA[</sch:Text>
            </sch:Message>
            <sch:Message>
               <sch:Text><![CDATA[<?xml version="1.0"?>
<message xmlns="http://www.coin.nl/Overstappen_MESSAGES">
<header>
<receiver>
<networkoperator>UPC</networkoperator>
<serviceprovider>UPC</serviceprovider>
</receiver>
<sender>
<networkoperator>CRY</networkoperator>
<serviceprovider>CRY</serviceprovider>
</sender>
<messageid>CRY-UPC-CryUpc01-01</messageid>
<timestamp>2014-01-22T13:40:45</timestamp>
</header>
<body>
<contractterminationrequest>
<v1>
<dossierid>CRY-UPC-CryUpc01-01</dossierid>
<recipientserviceprovider>CRY</recipientserviceprovider>
<recipientnetworkoperator>CRY</recipientnetworkoperator>
<donornetworkoperator>UPC</donornetworkoperator>
<donorserviceprovider>UPC</donorserviceprovider>
<customerinfo>
<initials>Ms</initials>
<prefix>Priyanka</prefix>
<lastname>Tanjea</lastname>
<telephonecontact>0886086375</telephonecontact>
<emailaddresscontact>f@xebia.com</emailaddresscontact>
<companyname>XEBIA PVT LTD</companyname>
<customerid>ABCDEFGH1234</customerid>
<contractid>CryUpc01</contractid>
<contractaddress>
<address>HARINAGAR</address>
<housenr>123</housenr>
<housenr_ext>123</housenr_ext>
<postcode>1234AS</postcode>
<city>DELHI</city>
<country>IND</country>
</contractaddress>
<connectionaddress>
<address>HARINAGAR</address>
<housenr>123</housenr>
<housenr_ext>123</housenr_ext>
<postcode>1234AS</postcode>
<city>DELHI</city>
<country>IND</country>
</connectionaddress>
</customerinfo>
<wishdatetime>2014-02-11</wishdatetime>
<note></note>
</v1>
</contractterminationrequest>
</body>
</message>]]]]>><![CDATA[</sch:Text>
            </sch:Message>
            <sch:Message>
               <sch:Text><![CDATA[<?xml version="1.0"?>
<message xmlns="http://www.coin.nl/Overstappen_MESSAGES">
<header>
<receiver>
<networkoperator>TEL2</networkoperator>
<serviceprovider>TEL2</serviceprovider>
</receiver>
<sender>
<networkoperator>CRY</networkoperator>
<serviceprovider>CRY</serviceprovider>
</sender>
<messageid>CRY-TEL2-CryTel201-01</messageid>
<timestamp>2014-01-22T13:40:45</timestamp>
</header>
<body>
<contractterminationrequest>
<v1>
<dossierid>CRY-TEL2-CryTel201-01</dossierid>
<recipientserviceprovider>CRY</recipientserviceprovider>
<recipientnetworkoperator>CRY</recipientnetworkoperator>
<donornetworkoperator>TEL2</donornetworkoperator>
<donorserviceprovider>TEL2</donorserviceprovider>
<customerinfo>
<initials>Ms</initials>
<prefix>Priyanka</prefix>
<lastname>Tanjea</lastname>
<telephonecontact>0886086375</telephonecontact>
<emailaddresscontact>f@xebia.com</emailaddresscontact>
<companyname>XEBIA PVT LTD</companyname>
<customerid>ABCDEFGH1234</customerid>
<contractid>CryTel201</contractid>
<contractaddress>
<address>HARINAGAR</address>
<housenr>123</housenr>
<housenr_ext>123</housenr_ext>
<postcode>1234AS</postcode>
<city>DELHI</city>
<country>IND</country>
</contractaddress>
<connectionaddress>
<address>HARINAGAR</address>
<housenr>123</housenr>
<housenr_ext>123</housenr_ext>
<postcode>1234AS</postcode>
<city>DELHI</city>
<country>IND</country>
</connectionaddress>
</customerinfo>
<wishdatetime>2014-02-12</wishdatetime>
<note></note>
</v1>
</contractterminationrequest>
</body>
</message>]]]]>><![CDATA[</sch:Text>
            </sch:Message>
         </sch:Messages>
      </sch:SendMessagesRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:credentials>
          <con:username>Bert</con:username>
          <con:password>Ernie</con:password>
          <con:domain xsi:nil="true"/>
          <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
          <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
          <con:preemptive>true</con:preemptive>
          <con:authType>Preemptive</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://coin.nl/SendMessages"/>
        <con:wsrmConfig version="1.2"/>
      </con:call>
      <con:call name="Contract Termination Performed" id="6e6b212c-9d53-4340-bc3a-cadf2fccdbe8" outgoingWss="" incomingWss="">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>${#Project#SoapUrl}</con:endpoint>
        <con:request><![CDATA[<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/">
   <SOAP-ENV:Header/>
   <SOAP-ENV:Body>
      <SendMessagesRequest xmlns="http://coin.nl/ws/schema">
         <Sender>CRY</Sender>
         <Messages>
            <Message>
               <Text><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<message xmlns="http://www.coin.nl/Overstappen_MESSAGES">
   <header>
      <receiver>
                  <networkoperator>FARI</networkoperator>
         	              <serviceprovider>FARI</serviceprovider>
               </receiver>
      <sender>
                  <networkoperator>CRY</networkoperator>
         		          <serviceprovider>CRY</serviceprovider>
               </sender>
            <messageid>CRY-FARI-EndFlow01-01</messageid>
            <timestamp>2014-01-23T14:11:18</timestamp>
   </header>
   <body>
      <contractterminationperformed>
         <v1>
         <dossierid>CRY-FARI-EndFlow01-01</dossierid>
                        <recipientserviceprovider>CRY</recipientserviceprovider>
                                    <recipientnetworkoperator>CRY</recipientnetworkoperator>
            			            <donornetworkoperator>FARI</donornetworkoperator>
            			            <donorserviceprovider>FARI</donorserviceprovider>
                        <actualdatetime>2014-01-23T14:11:18</actualdatetime>
                        <note>Endflow_Performed</note>
                     </v1>
      </contractterminationperformed>
   </body>
</message>]]]]>><![CDATA[</Text>
            </Message>
         </Messages>
      </SendMessagesRequest>
   </SOAP-ENV:Body>
</SOAP-ENV:Envelope>]]></con:request>
        <con:credentials>
          <con:username>Bert</con:username>
          <con:password>Ernie</con:password>
          <con:domain xsi:nil="true"/>
          <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
          <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
          <con:authType>Global HTTP Settings</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://coin.nl/SendMessages"/>
        <con:wsrmConfig version="1.2"/>
      </con:call>
      <con:call name="Contract Termination Change" id="b4f976a0-cc99-45df-a7f1-d2aa1fa00928" outgoingWss="" incomingWss="">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>${#Project#SoapUrl}</con:endpoint>
        <con:request><![CDATA[<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/">
   <SOAP-ENV:Header/>
   <SOAP-ENV:Body>
      <SendMessagesRequest xmlns="http://coin.nl/ws/schema">
         <Sender>CRY</Sender>
         <Messages>
            <Message>
               <Text><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<message xmlns="http://www.coin.nl/Overstappen_MESSAGES">
   <header>
      <receiver>
                  <networkoperator>FARI</networkoperator>
         	              <serviceprovider>FARI</serviceprovider>
               </receiver>
      <sender>
                  <networkoperator>CRY</networkoperator>
         		          <serviceprovider>CRY</serviceprovider>
               </sender>
            <messageid>CRY-FARI-EndFlow01-01</messageid>
            <timestamp>2014-01-23T13:19:15</timestamp>
   </header>
   <body>
      <change>
         <v1>
         	<dossierid>CRY-FARI-EndFlow01-01</dossierid>
            <wishdatetime>2014-02-18T15:00:34</wishdatetime>
                        <note>endflow</note>
                     </v1>
      </change>
   </body>
</message>]]]]>><![CDATA[</Text>
            </Message>
         </Messages>
      </SendMessagesRequest>
   </SOAP-ENV:Body>
</SOAP-ENV:Envelope>]]></con:request>
        <con:credentials>
          <con:username>Bert</con:username>
          <con:password>Ernie</con:password>
          <con:domain xsi:nil="true"/>
          <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
          <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
          <con:authType>Global HTTP Settings</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://coin.nl/SendMessages"/>
        <con:wsrmConfig version="1.2"/>
      </con:call>
      <con:call name="Contract Termination Change Answer" id="7ecf7d3b-76e3-4e36-a0a6-bed12f91e92e" outgoingWss="" incomingWss="" timeout="" wssPasswordType="PasswordText">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>${#Project#SoapUrl}</con:endpoint>
        <con:request><![CDATA[<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/">
   <SOAP-ENV:Header/>
   <SOAP-ENV:Body>
      <SendMessagesRequest xmlns="http://coin.nl/ws/schema">
         <Sender>TP10</Sender>
         <Messages>
            <Message>
               <Text><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<message xmlns="http://www.coin.nl/Overstappen_MESSAGES">
   <header>
      <receiver>
                  <networkoperator>TP14</networkoperator>
         	              <serviceprovider>TP14</serviceprovider>
               </receiver>
      <sender>
                  <networkoperator>TP10</networkoperator>
         		          <serviceprovider>TP10</serviceprovider>
               </sender>
            <messageid>TP14-TP10-ALSBVNZRI-06</messageid>
            <timestamp>${=String.format('%tFT%<tT', new Date())}</timestamp>
   </header>
   <body>
      <changeanswer>
         <v2>
         	<dossierid>TP14-TP10-ALSBVNZRI-01</dossierid>
         	<blocking>N</blocking>
         	            <wishdatetime>2016-02-27T13:32:16</wishdatetime>
                      <proposeddatetime>2016-02-27T13:32:16</proposeddatetime>
                      <note>TESTWITHCHTCHAOK AFter blocking</note>
                     </v2>
      </changeanswer>
   </body>
</message>]]]]>><![CDATA[</Text>
            </Message>
         </Messages>
      </SendMessagesRequest>
   </SOAP-ENV:Body>
</SOAP-ENV:Envelope>]]></con:request>
        <con:credentials>
          <con:username>COINTP10</con:username>
          <con:password>COINTP10</con:password>
          <con:domain xsi:nil="true"/>
          <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
          <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
          <con:authType>Global HTTP Settings</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://coin.nl/SendMessages"/>
        <con:wsrmConfig version="1.2"/>
      </con:call>
      <con:call name="Contract Termination Cancel" id="fed57306-8fb5-4471-85e0-47e2f5a6d1d8" outgoingWss="" incomingWss="">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>${#Project#SoapUrl}</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="http://coin.nl/ws/schema">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:SendMessagesRequest>
         <sch:Sender>ZIGGO</sch:Sender>
         <sch:Messages>
            <sch:Message>
               <sch:Text><![CDATA[<?xml version="1.0"?>
<message xmlns="http://www.coin.nl/Overstappen_MESSAGES">
<header>
<receiver>
<!--Optional:-->
<networkoperator>KPN</networkoperator>
<!--Optional:-->
<serviceprovider>KPN</serviceprovider>
</receiver>
<sender>
<!--Optional:-->
<networkoperator>ZIGGO</networkoperator>
<!--Optional:-->
<serviceprovider>ZIGGO</serviceprovider>
</sender>
<!--Optional:-->
<messageid>ZIGGO-KPN-EndFlow01-01</messageid>
<timestamp>2014-01-28T14:30:00</timestamp>
</header>
<body>
    <cancel>
      <v1>
        <dossierid>ZIGGO-KPN-EndFlow01-01</dossierid>
        <note>Endflow_Cancel</note>
      </v1>
    </cancel>
</body>
</message>]]]]>><![CDATA[</sch:Text>
            </sch:Message>
         </sch:Messages>
      </sch:SendMessagesRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:credentials>
          <con:username>Bert</con:username>
          <con:password>Ernie</con:password>
          <con:domain xsi:nil="true"/>
          <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
          <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
          <con:authType>Global HTTP Settings</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://coin.nl/SendMessages"/>
        <con:wsrmConfig version="1.2"/>
      </con:call>
    </con:operation>
  </con:interface>
  <con:testSuite name="3.5.1_Message_Notification_Emails" id="d603ee36-672b-47e4-b45a-16f914972d78">
    <con:description>CDV-755:
Disabled D1.1a RecipientGUIDonorGUI &amp; D1.1b RecipientGUIDonorGUI
CDV-756
Disabled D1.2b RecipientGUIDonorSOAP_BusinessGuiOnly_BusinessReq &amp; D1.2b RecipientGUIDonorGUIOnly</con:description>
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="D1.1a RecipientGUIDonorGUI" searchProperties="true" id="a73ac910-8e54-45f0-9a61-78d1ae313a89" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:settings>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">1000</con:setting>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting>
      </con:settings>
      <con:testStep type="groovy" name="RecipientGUIDonorGUI" id="fb56fab4-344d-4fd5-bbec-3ba18f921050">
        <con:settings/>
        <con:config>
          <script>def RecipientInterface = testRunner.testCase.testSuite.getPropertyValue( "RecipientInterface" )
def DonorInterface = testRunner.testCase.testSuite.getPropertyValue( "DonorInterface" )
if (RecipientInterface.equalsIgnoreCase("GUI") &amp;&amp; DonorInterface.equalsIgnoreCase("GUI")){
    	  
} else {
	testRunner.gotoStepByName( "Delay0")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Sel_CTR" id="36178937-6ab9-4152-9992-9176e2672ad1">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.*;

def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def funcHandle = new ReadymadeFunctions();

def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser")
def recipient = testRunner.testCase.testSuite.getPropertyValue("recipient")
def donor = testRunner.testCase.testSuite.getPropertyValue("donor")
def contractId = testRunner.testCase.getPropertyValue("contractId")
def dossierType = testRunner.testCase.testSuite.getPropertyValue("dossierType")
def wishDate = testRunner.testCase.getPropertyValue("wishDate")

def projectName = testRunner.testCase.testSuite.project.name
def testSuiteName = testRunner.testCase.testSuite.name
def testCaseName = testRunner.testCase.name
def testStepName = context.getCurrentStep().getLabel()

log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName)

try {
	def switchId = funcHandle.sendCTR(seleniumHandle, javaHandle, browser, guiUrl, recipient, donor, contractId, dossierType, wishDate);

	testRunner.testCase.setPropertyValue("switchId",switchId);
} catch (Exception e) {
	testRunner.fail(e.getClass().getSimpleName());
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table_CTR" id="3a69c297-b589-4e75-a4dd-6c1bb1cb0674">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier 
where ctd_switchid = '${#TestCase#switchId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: assert CTD_DOSSIER_STATUS]" id="ac17d9f6-9653-435c-bd0c-9af6917f2aa6">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_DOSSIER_STATUS[1]/text()</path>
              <content>Pending</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert CTD_PROCESS_STATUS]" id="ede8cc08-99ab-46ca-baf4-97e9f0895428">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_PROCESS_STATUS[1]/text()</path>
              <content>Request</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: assert ion ctd_id switchid">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def ctdid = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctdId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="e4415146-698e-4844-be0a-cf0f5018f1ae" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTR" id="02f95220-9350-4836-af0b-636190ecd9d0">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where dm_ctd_id = ${#TestCase#ctdId} 
and dm_mst_id=1 
order by createddate desc</con:query>
          <con:assertion type="JDBC Status" id="f116fa6a-8895-4986-b1aa-446d9e201909" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="22e366c7-6a4e-4580-9e30-c5cb86194c3d" name="Xpath: SoapVersion">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/IT_INTERFACE_TYPE[1]</path>
              <content>GUI</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="aca0adf0-394d-419d-b52e-ee7534d0fe5d" name="Xpath: assert DMId" disabled="true">
            <con:configuration>
              <path>/Results/ResultSet/Row/ID/text()</path>
              <content>${#TestCase#ctrDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="8aa476b1-69b7-4565-abb2-1d93e7341ed4" name="Script: SaveID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctrdmId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="8ef67d55-7527-4876-88aa-fc4dc59b6f57" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctrDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_MSL Table_CTR" id="a5abfabf-e8ae-4421-b576-051a84d7c36e">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.message_logging 
where msl_ctd_id=${#TestCase#ctdId} 
and msl_dm_id=${#TestCase#ctrdmId}</con:query>
          <con:assertion type="XPath Match" name="Xpath: assert MSL_CLC_ID]" id="e99eef8e-047f-4dff-930b-7b92f2348249">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/MSL_CLC_ID[1]/text()</path>
              <content>57</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="e095441a-3cf8-4288-8e40-4300718feece" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="26a10fc7-0032-44c7-a379-d3aa026bff83" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_NoRecord_CTR" id="ce747574-59fc-4e26-b45f-3f2ff6e45f5a">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where
sxm_xml_message like '%${#TestCase#switchId}%'
and sxm_xml_message_type = 'Request'
and sxm_sender = '${#TestSuite#recipient}'
and sxm_receiver = '${#TestSuite#donor}'</con:query>
          <con:assertion type="JDBC Status" id="08133e5e-df8f-4bd7-ad58-0aab90d914e2" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="b24c7681-022a-44c2-a31e-93907e444116" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>0</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_EL Table_CTR" id="d3f9297a-d108-40dd-a079-f78fd26bc71c">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.email_logging el join overstappen.email_logging_detail eld on el.el_detail_id = eld.id where 
el_dm_id = '${#TestCase#ctrDMId}'</con:query>
          <con:assertion type="JDBC Status" id="5b056277-e6ec-404a-99fc-8472b329b9f9" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="08c804f2-1638-4310-89c5-8ddef67cc36e" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_Body">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_BODY/text()</path>
              <content>New Request received on COMP for ${#TestCase#switchId}. Please respond on this request within 24 working day hours with a Request Answer*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_SUBJECT">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_SUBJECT/text()</path>
              <content>*New Request received on COMP for ${#TestCase#switchId}</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_REASON">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_REASON/text()</path>
              <content>Request</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="4e4435dd-077d-4bf1-a0da-0ef46339bb12" name="Xpath: assert Receiver">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_RECEIVER_ID/text()</path>
              <content>${#TestSuite#donorId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Sel_CTRA ok" id="44d0cb13-7a8d-43b7-acb3-f5c4cb6095f7">
        <con:settings/>
        <con:config>
          <script>//Send  CTRA ok for ${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#contractId}-01
//Business: ${#TestSuite#dossierType}
import nl.coin.Selenium.SampleTest;
import nl.coin.Selenium.SeleniumActions;
import nl.coin.Selenium.JavaActions;
def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser")
def recipient = testRunner.testCase.testSuite.getPropertyValue("recipient")
def donor = testRunner.testCase.testSuite.getPropertyValue("donor")
def contractId = testRunner.testCase.getPropertyValue("contractId")
def donorDossierType = testRunner.testCase.testSuite.getPropertyValue("donorDossierType")
def dossierID = testRunner.testCase.getPropertyValue("switchId")
log.info dossierID
def projectName = testRunner.testCase.testSuite.project.name
def testSuiteName = testRunner.testCase.testSuite.name
def testCaseName = testRunner.testCase.name
def testStepName = context.getCurrentStep().getLabel()
log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName)
def driver = seleniumHandle.openBrowser(browser);
//Login to application
log.info seleniumHandle.browseURL(guiUrl);
log.info(driver.getTitle());
def sampleArray = seleniumHandle.getCredentials(donor)
log.info seleniumHandle.enterData("HomePage","userName", sampleArray[0]);
log.info seleniumHandle.enterData("HomePage","passWord", sampleArray[1]);
//log.info seleniumHandle.clickObject("HomePage","8HrsSession");
log.info seleniumHandle.clickObject("HomePage","login");
log.info seleniumHandle.clickObject("HomePage","dossiers");
log.info seleniumHandle.clickObject("HomePage","SearchTab");
log.info seleniumHandle.enterData("HomePage","DossierID",dossierID);
sleep(1000)
log.info seleniumHandle.clickObject("HomePage","SearchButton");
log.info seleniumHandle.clickObject("HomePage","ViewDetailsSearch");
if (donorDossierType == "&lt;business>Y&lt;/business>"){
	log.info seleniumHandle.enterDataSelectDropDown("HomePage","businessType", "Business");	
log.info seleniumHandle.enterDataSelectDropDownByValue("HomePage","blockingCode", "0");
} else {
	log.info seleniumHandle.enterDataSelectDropDown("HomePage","businessType", "Consumer");
	
log.info seleniumHandle.enterDataSelectDropDownByValue("HomePage","ConsumerCTRAblockingCode", "0");
}
log.info seleniumHandle.enterData("HomePage","requestAnswerNote",dossierID);
sleep(1000)
log.info seleniumHandle.clickObject("HomePage","sendRequestAnswer");
sleep(2000)
log.info seleniumHandle.getText("HomePage","resultMessage");
log.info seleniumHandle.quitBrowser();</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table 1" id="61d2c940-e47f-4694-8eac-e26d82c259d4">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier 
where id='${#TestCase#ctdId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [ST_TRANSACTION_ID]" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//CTD_SWITCHID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_dossier_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_DOSSIER_STATUS</path>
              <content>Pending</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_process_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_PROCESS_STATUS</path>
              <content>Request Answer OK</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="b2d335d6-98ad-431d-b038-81b8397f6e26" name="JDBC Status"/>
          <con:assertion type="GroovyScriptAssertion" id="4271ec85-309c-4058-b64b-2e7ed1da9acc" name="Script: assert ion">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def ctraid = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctraID");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTRA" id="59e454a9-358d-4580-be01-913e3ae34ca6">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where dm_ctd_id = ${#TestCase#ctdId} 
and dm_mst_id=3 
order by createddate desc</con:query>
          <con:assertion type="JDBC Status" id="eb3ca4cd-0d91-4992-83c0-13f973c2ed5a" name="JDBC Status"/>
          <con:assertion type="XQuery Match" id="40cc6fa1-0d78-43c5-a10b-f043ddf625c6" name="XQuery Match">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/IT_INTERFACE_TYPE[1]</path>
              <content>GUI</content>
              <allowWildcards>false</allowWildcards>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="2ddcb8b9-efbe-4f5a-9af2-35bbe2669158" name="Xpath: assert CTDId">
            <con:configuration>
              <path>/Results/ResultSet/Row/DM_CTD_ID/text()</path>
              <content>${#TestCase#ctraId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d1e0a287-26da-49a5-9b24-0153efc36d00" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctraDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_MSL Table_CTRA" id="66ac478a-d4b7-415c-afbf-739b8eee3f88">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.message_logging 
where msl_ctd_id=${#TestCase#ctdId} 
and msl_dm_id=${#TestCase#ctradmId}</con:query>
          <con:assertion type="JDBC Status" id="e095441a-3cf8-4288-8e40-4300718feece" name="JDBC Status"/>
          <con:assertion type="XPath Match" name="Xpath: assert MSL_CLC_ID]" id="e99eef8e-047f-4dff-930b-7b92f2348249">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/MSL_CLC_ID[1]/text()</path>
              <content>57</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="26a10fc7-0032-44c7-a379-d3aa026bff83" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_NoRecord_CTRA" id="f3ab7374-130e-4801-8e02-ccf903484aab">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where
sxm_xml_message like '%${#TestCase#switchId}%'
and sxm_xml_message_type = 'Request answer'
and sxm_sender = '${#TestSuite#donor}'
and sxm_receiver = '${#TestSuite#recipient}'</con:query>
          <con:assertion type="JDBC Status" id="053606e7-8ef0-4e64-92f7-4d02863ea4ab" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="8a40dfd1-2de5-44be-94c7-81e02adce80f" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>0</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_EL Table_CTRA" id="efae4582-ce46-4417-ad81-703e61f50e56">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.email_logging el join overstappen.email_logging_detail eld on el.el_detail_id = eld.id where 
el_dm_id = '${#TestCase#ctraDMId}'</con:query>
          <con:assertion type="JDBC Status" id="5b056277-e6ec-404a-99fc-8472b329b9f9" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="08c804f2-1638-4310-89c5-8ddef67cc36e" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_Body">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_BODY/text()</path>
              <content>New Request Answer received on COMP for ${#TestCase#switchId}*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_SUBJECT">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_SUBJECT/text()</path>
              <content>New Request Answer received on COMP for ${#TestCase#switchId}</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_REASON">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_REASON/text()</path>
              <content>RequestAnswer</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="4e4435dd-077d-4bf1-a0da-0ef46339bb12" name="Xpath: assert Receiver">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_RECEIVER_ID/text()</path>
              <content>${#TestSuite#recipientId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Sel_CTCH" id="f44945a9-dd33-443d-9793-32856176f31c">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.*;

def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def funcHandle = new ReadymadeFunctions();

def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser");
def recipient = testRunner.testCase.testSuite.getPropertyValue("recipient");
def dossierID = testRunner.testCase.getPropertyValue("switchId");
def proposeddate = testRunner.testCase.getPropertyValue("proposedDate");

def projectName = testRunner.testCase.testSuite.project.name;
def testSuiteName = testRunner.testCase.testSuite.name;
def testCaseName = testRunner.testCase.name;
def testStepName = context.getCurrentStep().getLabel();

log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName);

try {
	funcHandle.sendCTCH(seleniumHandle, javaHandle, browser, guiUrl, recipient, dossierID, proposeddate);
} catch (Exception e) {
	testRunner.fail(e.getClass().getSimpleName());
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table_CTCH" id="11a2f51d-6e10-4a91-bcfc-cc8f16aabc95">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier 
where id='${#TestCase#ctdId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of CTD record" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//CTD_SWITCHID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_dossier_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_DOSSIER_STATUS</path>
              <content>Pending</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_process_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_PROCESS_STATUS</path>
              <content>Change</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="e267842d-3ff9-4b57-8933-f4543db26940" name="Xpath: CTCH_wishdatetime">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CTCH_WISHDATETIME[1]</path>
              <content>${#TestCase#proposedDateGUIFormat} 00:00:00</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="3fdace08-47bc-4a9c-bea3-eedf47960e5e" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTCH" id="358e7cba-763f-499e-9d43-7125d11e348c">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where dm_ctd_id = ${#TestCase#ctdId} 
and dm_mst_id=7 
order by createddate desc</con:query>
          <con:assertion type="JDBC Status" id="ad681b60-0b08-414f-bf9e-288a1e48c297" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="2f7d35d5-6695-4e22-aecf-3764a6a3f60c" name="Xpath: InterfaceType">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/IT_INTERFACE_TYPE[1]</path>
              <content>GUI</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="5e27c405-0179-48fc-b549-085c6cdac280" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctchDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_MSL Table_CTCH" id="49ea69dc-27a7-4adb-8770-32887b24f5d5">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.message_logging 
where msl_ctd_id=${#TestCase#ctdId} 
and msl_dm_id=${#TestCase#ctchdmId}</con:query>
          <con:assertion type="XPath Match" name="Xpath: assert MSL_CLC_ID]" id="e99eef8e-047f-4dff-930b-7b92f2348249">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/MSL_CLC_ID[1]/text()</path>
              <content>57</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="e095441a-3cf8-4288-8e40-4300718feece" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="26a10fc7-0032-44c7-a379-d3aa026bff83" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_NoRecord_CTCH" id="d24dbb5b-17f5-403a-a5f8-3276cedeb068">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where
sxm_xml_message like '%${#TestCase#switchId}%'
and sxm_xml_message_type = 'Change'
and sxm_sender = '${#TestSuite#recipient}'
and sxm_receiver = '${#TestSuite#donor}'</con:query>
          <con:assertion type="JDBC Status" id="92c5b2ef-5b3a-45cd-a52f-18a256b11942" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="4eda4b2e-a5ed-45a8-9529-701acae315e7" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>0</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_EL Table_CTCH" id="ad12ca07-11ec-45f7-bafb-fa376769a566">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.email_logging el join overstappen.email_logging_detail eld on el.el_detail_id = eld.id where 
el_dm_id = '${#TestCase#ctchDMId}'</con:query>
          <con:assertion type="JDBC Status" id="5b056277-e6ec-404a-99fc-8472b329b9f9" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="08c804f2-1638-4310-89c5-8ddef67cc36e" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_Body">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_BODY/text()</path>
              <content>New Change received on COMP for ${#TestCase#switchId}*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_SUBJECT">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_SUBJECT/text()</path>
              <content>*New Change received on COMP for ${#TestCase#switchId}</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_REASON">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_REASON/text()</path>
              <content>Change</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="4e4435dd-077d-4bf1-a0da-0ef46339bb12" name="Xpath: assert Receiver">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_RECEIVER_ID/text()</path>
              <content>${#TestSuite#donorId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Sel_CTCHA ok" id="24edde57-da34-45c2-8f6d-ab1c5625e124">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.*;

def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def funcHandle = new ReadymadeFunctions();

def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser")
def recipient = testRunner.testCase.testSuite.getPropertyValue("recipient")
def donor = testRunner.testCase.testSuite.getPropertyValue("donor")
def contractId = testRunner.testCase.getPropertyValue("contractId")
def dossierID = testRunner.testCase.getPropertyValue("switchId")
//def proposedDate = testRunner.testCase.getPropertyValue("proposedDate")

def projectName = testRunner.testCase.testSuite.project.name;
def testSuiteName = testRunner.testCase.testSuite.name;
def testCaseName = testRunner.testCase.name;
def testStepName = context.getCurrentStep().getLabel();

log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName);

try {
	funcHandle.sendCTCHA(seleniumHandle, javaHandle, browser, guiUrl, donor, dossierID, "0", null);
} catch (Exception e) {
	testRunner.fail(e.getClass().getSimpleName());
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table_CTCHA-ok" id="fec69fd8-dc4a-465f-b981-1b0b9bb0300c">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier 
where id='${#TestCase#ctdId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of CTD record" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//CTD_SWITCHID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_dossier_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_DOSSIER_STATUS</path>
              <content>Pending</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_process_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_PROCESS_STATUS</path>
              <content>Change Answer OK</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="d39811c4-2232-47ee-ba08-6ba3ca210866" name="Xpath: XPath Match">
            <con:configuration>
              <path>//CTD_REQUESTEDDATETIME</path>
              <content>${#TestCase#proposedDateGUIFormat} 00:00:00</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="af8a9c23-57b9-4f46-a2f0-69bcd2ab4af3" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTCHA" id="0dce9a2d-0614-4691-8d16-8e0e166b3559">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where dm_ctd_id = ${#TestCase#ctdId} 
and dm_mst_id=9 
order by createddate desc</con:query>
          <con:assertion type="XPath Match" id="8af8dc75-df09-4ea0-b7eb-67cc0baa0261" name="Xpath: 1">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/IT_INTERFACE_TYPE[1]</path>
              <content>GUI</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="bd859157-dcc5-4ef6-9e3c-d9b4efb1f01c" name="JDBC Status"/>
          <con:assertion type="GroovyScriptAssertion" id="8e56dd8e-8c18-4863-9ca8-152d458f0d1b" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctchaDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_MSL Table_CTCHA" id="4cf8a637-5b9d-41cb-87e6-5897e4467759">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.message_logging 
where msl_ctd_id=${#TestCase#ctdId} 
and msl_dm_id=${#TestCase#ctchadmId}</con:query>
          <con:assertion type="XPath Match" name="Xpath: assert MSL_CLC_ID]" id="e99eef8e-047f-4dff-930b-7b92f2348249">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/MSL_CLC_ID[1]/text()</path>
              <content>57</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="e095441a-3cf8-4288-8e40-4300718feece" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="26a10fc7-0032-44c7-a379-d3aa026bff83" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_NoRecord_CTCHA" id="da6342bf-c314-4c9d-a97f-0ba48f052a2d">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where 
sxm_xml_message like '%${#TestCase#switchId}%'
and sxm_xml_message like '%&lt;blocking>N&lt;/blocking>%'
and sxm_xml_message_type = 'Change answer'
and sxm_sender = '${#TestSuite#donor}'
and sxm_receiver = '${#TestSuite#recipient}'</con:query>
          <con:assertion type="JDBC Status" id="19f6e252-7356-4c05-9f21-4ac8436f2557" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="2396b81c-992b-476c-b123-c2c97bc3d2b1" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>0</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_EL Table_CTCHA" id="48d5f29f-8873-4620-907e-8c6e1e6ae477">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.email_logging el join overstappen.email_logging_detail eld on el.el_detail_id = eld.id where 
el_dm_id = '${#TestCase#ctchaDMId}'</con:query>
          <con:assertion type="JDBC Status" id="5b056277-e6ec-404a-99fc-8472b329b9f9" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="08c804f2-1638-4310-89c5-8ddef67cc36e" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_Body">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_BODY/text()</path>
              <content>New Change Answer received on COMP for ${#TestCase#switchId}*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_SUBJECT">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_SUBJECT/text()</path>
              <content>New Change Answer received on COMP for ${#TestCase#switchId}</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_REASON">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_REASON/text()</path>
              <content>ChangeAnswer</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="4e4435dd-077d-4bf1-a0da-0ef46339bb12" name="Xpath: assert Receiver">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_RECEIVER_ID/text()</path>
              <content>${#TestSuite#recipientId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Sel_CTP" id="d5f7541d-d2da-4fbb-ac82-1037137c5996">
        <con:settings/>
        <con:config>
          <script>//Please send CTP for ${#TestCase#switchId}
//CTRA expected in ${#TestSuite#recipientMessage}, if GUI
//verify for ${#TestSuite#recipient} that the CTRA email is received
import nl.coin.Selenium.SampleTest;
import nl.coin.Selenium.SeleniumActions;
import nl.coin.Selenium.JavaActions;
def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser")
def recipient = testRunner.testCase.testSuite.getPropertyValue("recipient")
def donor = testRunner.testCase.testSuite.getPropertyValue("donor")
def contractId = testRunner.testCase.getPropertyValue("contractId")
def switchId = testRunner.testCase.getPropertyValue("switchId")
def projectName = testRunner.testCase.testSuite.project.name
def testSuiteName = testRunner.testCase.testSuite.name
def testCaseName = testRunner.testCase.name
def testStepName = context.getCurrentStep().getLabel()
log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName)
//Open the browser
def driver = seleniumHandle.openBrowser(browser);
//Login to application
log.info seleniumHandle.browseURL(guiUrl);
log.info(driver.getTitle());
def sampleArray = seleniumHandle.getCredentials(recipient)
log.info seleniumHandle.enterData("HomePage","userName", sampleArray[0]);
log.info seleniumHandle.enterData("HomePage","passWord", sampleArray[1]);
//log.info seleniumHandle.clickObject("HomePage","8HrsSession");
log.info seleniumHandle.clickObject("HomePage","login");
//Click on Dossiers menu on left hand side
log.info seleniumHandle.clickObject("HomePage","dossiers");
//Click on Performed menu
log.info seleniumHandle.clickObject("HomePage","CancelMenu");
//Get the locator of viewDetails with current dossierID
def byViewDetails =  seleniumHandle.byLocator("HomePage","viewDetailsProper", switchId);
//Click on the view details button
log.info seleniumHandle.clickObject(byViewDetails);
//Enter performed note
log.info seleniumHandle.enterData("HomePage","PerformedNote",switchId);
//click on Send Performed button
log.info seleniumHandle.clickObjectAtLocation("HomePage","SendPerformed")
log.info seleniumHandle.getText("HomePage","resultMessage");
log.info seleniumHandle.quitBrowser();</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table_CTP" id="14ba340a-afaf-4dda-9e47-19e94b55cebb">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier 
where id = '${#TestCase#ctdId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of CTD record" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//CTD_SWITCHID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_process_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_PROCESS_STATUS</path>
              <content>Performed</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_dossier_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_DOSSIER_STATUS</path>
              <content>Completed</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="57872de4-e3eb-4ac6-a875-9146689f119f" name="Xpath: Verify ctd_ctp_buffering">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CTP_BUFFERING[1]</path>
              <content>f</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="5d1906d9-833e-4c0e-a60e-6f721ded678c" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTP" id="82caf972-4fef-4b95-a9bb-55b55e809bfc">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where dm_ctd_id = ${#TestCase#ctdId} 
and dm_mst_id=5 
order by createddate desc</con:query>
          <con:assertion type="XPath Match" id="8273aa94-4170-4178-ad8f-472138da1833" name="Xpath: InterfaceType">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/IT_INTERFACE_TYPE[1]</path>
              <content>GUI</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="9522087d-47b9-4f57-a36e-06f3b8b0df6e" name="JDBC Status"/>
          <con:assertion type="GroovyScriptAssertion" id="b8028384-17f5-41d8-a4e5-d7626471f708" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctpDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_MSL Table_CTP" id="b04f63df-6de6-4617-8b86-5345d0145e68">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.message_logging 
where msl_ctd_id=${#TestCase#ctdId} 
and msl_dm_id=${#TestCase#ctpdmId}</con:query>
          <con:assertion type="XPath Match" name="Xpath: assert MSL_CLC_ID]" id="e99eef8e-047f-4dff-930b-7b92f2348249">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/MSL_CLC_ID[1]/text()</path>
              <content>57</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="e095441a-3cf8-4288-8e40-4300718feece" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="26a10fc7-0032-44c7-a379-d3aa026bff83" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_NoRecord_CTP" id="bb8f0dfc-0131-49f6-ad98-d8e4739d7716">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where
sxm_xml_message like '%${#TestCase#switchId}%'
and sxm_xml_message_type = 'Performed'
and sxm_sender = '${#TestSuite#recipient}'
and sxm_receiver = '${#TestSuite#donor}'</con:query>
          <con:assertion type="JDBC Status" id="c475aacc-95de-4284-a9f8-4767c70e9910" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="696ffc21-ade8-4452-b52b-b09a6c4243f6" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>0</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_EL Table_CTP" id="44e2831d-3efc-46c1-9ef7-7e93a486385f">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.email_logging el join overstappen.email_logging_detail eld on el.el_detail_id = eld.id where 
el_dm_id = '${#TestCase#ctpDMId}'</con:query>
          <con:assertion type="JDBC Status" id="5b056277-e6ec-404a-99fc-8472b329b9f9" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="08c804f2-1638-4310-89c5-8ddef67cc36e" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_Body">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_BODY/text()</path>
              <content>New Performed received on COMP for ${#TestCase#switchId}*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_SUBJECT">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_SUBJECT/text()</path>
              <content>*New Performed received on COMP for ${#TestCase#switchId}</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_REASON">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_REASON/text()</path>
              <content>Performed</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="4e4435dd-077d-4bf1-a0da-0ef46339bb12" name="Xpath: assert Receiver">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_RECEIVER_ID/text()</path>
              <content>${#TestSuite#donorId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Delay0" id="faf88d32-eced-40c1-894c-496d24bad94c">
        <con:settings/>
        <con:config>
          <delay>1</delay>
        </con:config>
      </con:testStep>
      <con:setupScript>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import groovy.time.TimeCategory
def today = new Date() 
def now = today.format("yyyy-MM-dd'T'HH:mm:ss")
def wishdate = today 
use(TimeCategory) {
     wishdate = wishdate + 1.day
}
def proposeddate = today
use(TimeCategory) {
     proposeddate = proposeddate + 240.seconds
}
def wishdatestr = wishdate.format("yyyy-MM-dd'T'HH:mm:ss")
def proposeddatestr = proposeddate.format("yyyy-MM-dd'T'HH:mm:ss")
def propdatestr = proposeddate.format("yyyy-MM-dd")
testRunner.testCase.setPropertyValue("Now",now)
testRunner.testCase.setPropertyValue("wishDate",wishdatestr)
testRunner.testCase.setPropertyValue("proposedDate",proposeddatestr)
testRunner.testCase.setPropertyValue("proposedDateGUIFormat",propdatestr)
String contractId = funcHandle.getRandomString()
testRunner.testCase.setPropertyValue("contractId",contractId)</con:setupScript>
      <con:tearDownScript/>
      <con:properties/>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>122d3297-f22d-449f-ac52-c46f1bfb714e</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="D1.1b RecipientGUIDonorGUI" searchProperties="true" id="ec232689-bbe1-4991-a5b6-2ce095dbdc46" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:settings>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">1000</con:setting>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting>
      </con:settings>
      <con:testStep type="groovy" name="RecipientGUIDonorGUI" id="829aa9aa-0137-4c76-b3a0-c0701de8f563">
        <con:settings/>
        <con:config>
          <script>def RecipientInterface = testRunner.testCase.testSuite.getPropertyValue( "RecipientInterface" )
def DonorInterface = testRunner.testCase.testSuite.getPropertyValue( "DonorInterface" )
if (RecipientInterface.equalsIgnoreCase("GUI") &amp;&amp; DonorInterface.equalsIgnoreCase("GUI")){
    	  
} else {
	testRunner.gotoStepByName( "Delay0")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Sel_CTR" id="e39fc480-1fe5-43ba-90d1-bcc4ff7010ad">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.*;

def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def funcHandle = new ReadymadeFunctions();

def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser")
def recipient = testRunner.testCase.testSuite.getPropertyValue("recipient")
def donor = testRunner.testCase.testSuite.getPropertyValue("donor")
def contractId = testRunner.testCase.getPropertyValue("contractId")
def dossierType = testRunner.testCase.testSuite.getPropertyValue("dossierType")
def wishDate = testRunner.testCase.getPropertyValue("wishDate")

def projectName = testRunner.testCase.testSuite.project.name
def testSuiteName = testRunner.testCase.testSuite.name
def testCaseName = testRunner.testCase.name
def testStepName = context.getCurrentStep().getLabel()

log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName)

try {
	def switchId = funcHandle.sendCTR(seleniumHandle, javaHandle, browser, guiUrl, recipient, donor, contractId, dossierType, wishDate);

	testRunner.testCase.setPropertyValue("switchId",switchId);
} catch (Exception e) {
	testRunner.fail(e.getClass().getSimpleName());
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table_CTR" id="bf5c94b3-4ace-41b8-af62-942a95e2dded">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier 
where ctd_switchid = '${#TestCase#switchId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: assert CTD_DOSSIER_STATUS]" id="ac17d9f6-9653-435c-bd0c-9af6917f2aa6">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_DOSSIER_STATUS[1]/text()</path>
              <content>Pending</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert CTD_PROCESS_STATUS]" id="ede8cc08-99ab-46ca-baf4-97e9f0895428">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_PROCESS_STATUS[1]/text()</path>
              <content>Request</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: assert ion ctd_id switchid">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def ctdid = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctdId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="e4415146-698e-4844-be0a-cf0f5018f1ae" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTR" id="4fabffd2-c769-484b-94e2-b6f4667eeda1">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where dm_ctd_id = ${#TestCase#ctdId} 
and dm_mst_id=1 
order by createddate desc</con:query>
          <con:assertion type="XPath Match" id="22e366c7-6a4e-4580-9e30-c5cb86194c3d" name="Xpath: SoapVersion">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/IT_INTERFACE_TYPE[1]</path>
              <content>GUI</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="f116fa6a-8895-4986-b1aa-446d9e201909" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="aca0adf0-394d-419d-b52e-ee7534d0fe5d" name="Xpath: assert DMId" disabled="true">
            <con:configuration>
              <path>/Results/ResultSet/Row/ID/text()</path>
              <content>${#TestCase#ctrDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="420496ef-f96b-43c3-8e96-8b5311afbdb6" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctrDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_MSL Table_CTR" id="e3677198-420e-4fda-99e4-2a03ffac2133">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.message_logging 
where msl_ctd_id=${#TestCase#ctdId} 
and msl_dm_id=${#TestCase#ctrdmId}</con:query>
          <con:assertion type="XPath Match" name="Xpath: assert MSL_CLC_ID]" id="e99eef8e-047f-4dff-930b-7b92f2348249">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/MSL_CLC_ID[1]/text()</path>
              <content>57</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="e095441a-3cf8-4288-8e40-4300718feece" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="26a10fc7-0032-44c7-a379-d3aa026bff83" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_NoRecord_CTR" id="6ef5a3db-4e33-46d8-b878-8124937842eb">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where
sxm_xml_message like '%${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01%'
and sxm_xml_message_type = 'Request'
and sxm_sender = '${#TestSuite#recipient}'
and sxm_receiver = '${#TestSuite#donor}'</con:query>
          <con:assertion type="JDBC Status" id="360e0ed7-ff2d-47b6-813e-42b5c7f090b5" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="6169067e-beec-430b-9579-7a70fbce4826" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>0</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_EL Table_CTR" id="7529f0cd-671c-4080-bd1b-52cf3fcd7746">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.email_logging el join overstappen.email_logging_detail eld on el.el_detail_id = eld.id where 
el_dm_id = '${#TestCase#ctrDMId}'</con:query>
          <con:assertion type="JDBC Status" id="5b056277-e6ec-404a-99fc-8472b329b9f9" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="08c804f2-1638-4310-89c5-8ddef67cc36e" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_Body">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_BODY/text()</path>
              <content>New Request received on COMP for ${#TestCase#switchId}. Please respond on this request within 24 working day hours with a Request Answer*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_SUBJECT">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_SUBJECT/text()</path>
              <content>*New Request received on COMP for ${#TestCase#switchId}</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_REASON">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_REASON/text()</path>
              <content>Request</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="4e4435dd-077d-4bf1-a0da-0ef46339bb12" name="Xpath: assert Receiver">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_RECEIVER_ID/text()</path>
              <content>${#TestSuite#donorId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Sel_CTRA ok" id="30dddd45-585b-4ec9-a054-19c2544087fb">
        <con:settings/>
        <con:config>
          <script>//Send  CTRA ok for ${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#contractId}-01
//Business: ${#TestSuite#dossierType}
import nl.coin.Selenium.SampleTest;
import nl.coin.Selenium.SeleniumActions;
import nl.coin.Selenium.JavaActions;
def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser")
def recipient = testRunner.testCase.testSuite.getPropertyValue("recipient")
def donor = testRunner.testCase.testSuite.getPropertyValue("donor")
def contractId = testRunner.testCase.getPropertyValue("contractId")
def donorDossierType = testRunner.testCase.testSuite.getPropertyValue("donorDossierType")
def dossierID = testRunner.testCase.getPropertyValue("switchId")
log.info dossierID
def projectName = testRunner.testCase.testSuite.project.name
def testSuiteName = testRunner.testCase.testSuite.name
def testCaseName = testRunner.testCase.name
def testStepName = context.getCurrentStep().getLabel()
log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName)
def driver = seleniumHandle.openBrowser(browser);
//Login to application
log.info seleniumHandle.browseURL(guiUrl);
log.info(driver.getTitle());
def sampleArray = seleniumHandle.getCredentials(donor)
log.info seleniumHandle.enterData("HomePage","userName", sampleArray[0]);
log.info seleniumHandle.enterData("HomePage","passWord", sampleArray[1]);
//log.info seleniumHandle.clickObject("HomePage","8HrsSession");
log.info seleniumHandle.clickObject("HomePage","login");
log.info seleniumHandle.clickObject("HomePage","dossiers");
log.info seleniumHandle.clickObject("HomePage","SearchTab");
log.info seleniumHandle.enterData("HomePage","DossierID",dossierID);
sleep(1000)
log.info seleniumHandle.clickObject("HomePage","SearchButton");
log.info seleniumHandle.clickObject("HomePage","ViewDetailsSearch");
if (donorDossierType == "&lt;business>Y&lt;/business>"){
	log.info seleniumHandle.enterDataSelectDropDown("HomePage","businessType", "Business");	
log.info seleniumHandle.enterDataSelectDropDownByValue("HomePage","blockingCode", "0");
} else {
	log.info seleniumHandle.enterDataSelectDropDown("HomePage","businessType", "Consumer");
	
log.info seleniumHandle.enterDataSelectDropDownByValue("HomePage","ConsumerCTRAblockingCode", "0");
}
log.info seleniumHandle.enterData("HomePage","requestAnswerNote",dossierID);
sleep(1000)
log.info seleniumHandle.clickObject("HomePage","sendRequestAnswer");
sleep(2000)
log.info seleniumHandle.getText("HomePage","resultMessage");
log.info seleniumHandle.quitBrowser();</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table 1" id="8c056b06-630b-4130-b7a9-7b9f3a1bd49d">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier 
where id='${#TestCase#ctdId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [ST_TRANSACTION_ID]" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//CTD_SWITCHID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_dossier_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_DOSSIER_STATUS</path>
              <content>Pending</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_process_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_PROCESS_STATUS</path>
              <content>Request Answer OK</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="b2d335d6-98ad-431d-b038-81b8397f6e26" name="JDBC Status"/>
          <con:assertion type="GroovyScriptAssertion" id="4271ec85-309c-4058-b64b-2e7ed1da9acc" name="Script: assert ion">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def ctraid = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctraID");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTRA" id="a9fa4c45-e006-483c-9fba-361dd948d4d0">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where dm_ctd_id = ${#TestCase#ctdId} 
and dm_mst_id=3 
order by createddate desc</con:query>
          <con:assertion type="XQuery Match" id="40cc6fa1-0d78-43c5-a10b-f043ddf625c6" name="XQuery Match">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/IT_INTERFACE_TYPE[1]</path>
              <content>GUI</content>
              <allowWildcards>false</allowWildcards>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="eb3ca4cd-0d91-4992-83c0-13f973c2ed5a" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="2ddcb8b9-efbe-4f5a-9af2-35bbe2669158" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/DM_CTD_ID/text()</path>
              <content>${#TestCase#ctraId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="bfb963b1-1750-4828-87f6-7e21739a81f2" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctraDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_MSL Table_CTRA" id="55340a9b-4a1e-4341-aaf9-3c908adf7962">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.message_logging 
where msl_ctd_id=${#TestCase#ctdId} 
and msl_dm_id=${#TestCase#ctradmId}</con:query>
          <con:assertion type="XPath Match" name="Xpath: assert MSL_CLC_ID]" id="e99eef8e-047f-4dff-930b-7b92f2348249">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/MSL_CLC_ID[1]/text()</path>
              <content>57</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="e095441a-3cf8-4288-8e40-4300718feece" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="26a10fc7-0032-44c7-a379-d3aa026bff83" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_NoRecord_CTRA" id="3f3339ca-8c64-4f7e-a061-21fd90f3a28f">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where
sxm_xml_message like '%${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01%'
and sxm_xml_message_type = 'Request answer'
and sxm_sender = '${#TestSuite#donor}'
and sxm_receiver = '${#TestSuite#recipient}'</con:query>
          <con:assertion type="JDBC Status" id="360e0ed7-ff2d-47b6-813e-42b5c7f090b5" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="6169067e-beec-430b-9579-7a70fbce4826" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>0</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_EL Table_CTRA" id="93ecf6e4-a822-4ff9-a522-9edd2e6313ff">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.email_logging el join overstappen.email_logging_detail eld on el.el_detail_id = eld.id where 
el_dm_id = '${#TestCase#ctraDMId}'</con:query>
          <con:assertion type="JDBC Status" id="5b056277-e6ec-404a-99fc-8472b329b9f9" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="08c804f2-1638-4310-89c5-8ddef67cc36e" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_Body">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_BODY/text()</path>
              <content>New Request Answer received on COMP for ${#TestCase#switchId}*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_SUBJECT">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_SUBJECT/text()</path>
              <content>New Request Answer received on COMP for ${#TestCase#switchId}</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_REASON">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_REASON/text()</path>
              <content>RequestAnswer</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="4e4435dd-077d-4bf1-a0da-0ef46339bb12" name="Xpath: assert Receiver">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_RECEIVER_ID/text()</path>
              <content>${#TestSuite#recipientId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Sel_CTC" id="911edbd0-9397-4d48-9d67-d4d03a20f0ea">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.*;

def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def funcHandle = new ReadymadeFunctions();

def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser")
def recipient = testRunner.testCase.testSuite.getPropertyValue("recipient")
def donor = testRunner.testCase.testSuite.getPropertyValue("donor")
def contractId = testRunner.testCase.getPropertyValue("contractId")
def switchId = testRunner.testCase.getPropertyValue("switchId")

def projectName = testRunner.testCase.testSuite.project.name
def testSuiteName = testRunner.testCase.testSuite.name
def testCaseName = testRunner.testCase.name
def testStepName = context.getCurrentStep().getLabel()

log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName)

try {
	funcHandle.sendCTC(seleniumHandle, javaHandle, browser, guiUrl, recipient, switchId);
} catch (Exception e) {
	testRunner.fail(e.getClass().getSimpleName());
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table_CTC" id="7d2b537a-bab2-4e81-b828-0efa5d3348a8">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier 
where id = '${#TestCase#ctdId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of CTD record" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//CTD_SWITCHID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_process_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_PROCESS_STATUS</path>
              <content>Cancel</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_dossier_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_DOSSIER_STATUS</path>
              <content>Cancelled</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="e5674e64-b285-4e2d-b343-7a640c978165" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTC" id="c1ad088c-9478-452e-a05c-196206166a1a">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where dm_ctd_id = ${#TestCase#ctdId} 
and dm_mst_id=11 
order by createddate desc</con:query>
          <con:assertion type="XPath Match" id="b199af58-886b-4a43-943e-d947f7528217" name="Xpath: 1">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/IT_INTERFACE_TYPE[1]</path>
              <content>GUI</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="1846bd70-ede9-4406-b758-7f23241ac3aa" name="JDBC Status"/>
          <con:assertion type="GroovyScriptAssertion" id="9f8e55f4-32c7-40be-a69c-1266b354d246" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctcDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_MSL Table_CTC" id="8d3861ad-d3dc-46c8-958b-828adbfd6b17">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.message_logging 
where msl_ctd_id=${#TestCase#ctdId} 
and msl_dm_id=${#TestCase#ctcdmId}</con:query>
          <con:assertion type="XPath Match" name="Xpath: assert MSL_CLC_ID]" id="e99eef8e-047f-4dff-930b-7b92f2348249">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/MSL_CLC_ID[1]/text()</path>
              <content>57</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="e095441a-3cf8-4288-8e40-4300718feece" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="26a10fc7-0032-44c7-a379-d3aa026bff83" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_NoRecord_CTC" id="94434cf9-61b6-4f6d-8a3c-35cbd9a43cc4">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where
sxm_xml_message like '%${#TestCase#switchId}%'
and sxm_xml_message_type = 'Cancel'
and sxm_sender = '${#TestSuite#recipient}'
and sxm_receiver = '${#TestSuite#donor}'</con:query>
          <con:assertion type="JDBC Status" id="f14f60c8-81d7-41d5-b77f-79114ea85e64" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="3b7a5ec9-04cb-40cd-83cf-9c4af9e48229" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>0</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_EL Table_CTC" id="cb2ac4c2-22b6-4999-9a03-fe30e6654abc">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.email_logging el join overstappen.email_logging_detail eld on el.el_detail_id = eld.id where 
el_dm_id = '${#TestCase#ctcDMId}'</con:query>
          <con:assertion type="JDBC Status" id="5b056277-e6ec-404a-99fc-8472b329b9f9" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="08c804f2-1638-4310-89c5-8ddef67cc36e" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_Body">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_BODY/text()</path>
              <content>New Cancel received on COMP for ${#TestCase#switchId}*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_SUBJECT">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_SUBJECT/text()</path>
              <content>*New Cancel received on COMP for ${#TestCase#switchId}</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_REASON">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_REASON/text()</path>
              <content>Cancel</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="4e4435dd-077d-4bf1-a0da-0ef46339bb12" name="Xpath: assert Receiver">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_RECEIVER_ID/text()</path>
              <content>${#TestSuite#donorId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Delay0" id="1b7e70b8-c583-4bbe-ac28-239485679db6">
        <con:settings/>
        <con:config>
          <delay>1</delay>
        </con:config>
      </con:testStep>
      <con:setupScript>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import groovy.time.TimeCategory
def today = new Date() 
def now = today.format("yyyy-MM-dd'T'HH:mm:ss")
def wishdate = today 
use(TimeCategory) {
     wishdate = wishdate + 1.day
}
def proposeddate = today
use(TimeCategory) {
     proposeddate = proposeddate + 240.seconds
}
def wishdatestr = wishdate.format("yyyy-MM-dd'T'HH:mm:ss")
def proposeddatestr = proposeddate.format("yyyy-MM-dd'T'HH:mm:ss")
def propdatestr = proposeddate.format("yyyy-MM-dd")
testRunner.testCase.setPropertyValue("Now",now)
testRunner.testCase.setPropertyValue("wishDate",wishdatestr)
testRunner.testCase.setPropertyValue("proposedDate",proposeddatestr)
testRunner.testCase.setPropertyValue("proposedDateGUIFormat",propdatestr)
String contractId = funcHandle.getRandomString()
testRunner.testCase.setPropertyValue("contractId",contractId)</con:setupScript>
      <con:tearDownScript/>
      <con:properties/>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>122d3297-f22d-449f-ac52-c46f1bfb714e</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="D1.2a RecipientSOAPDonorSOAP_BusinessGuiOnly_BusinessReq" searchProperties="true" id="d4543e89-017c-439e-945b-90299442c48d" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:settings>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">1000</con:setting>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting>
      </con:settings>
      <con:testStep type="groovy" name="BusinessGuiOnly_BusinessReq" id="3ea1f15d-839d-4205-b968-c904720f01f2">
        <con:settings/>
        <con:config>
          <script><![CDATA[def RecipientInterface = testRunner.testCase.testSuite.getPropertyValue( "RecipientInterface" )
def DonorInterface = testRunner.testCase.testSuite.getPropertyValue( "DonorInterface" )

def dossierType = testRunner.testCase.testSuite.getPropertyValue( "dossierType" )
def busguionly = testRunner.testCase.testSuite.getPropertyValue( "BusinessGuiOnly" )

if (RecipientInterface.contains("SOAP") && DonorInterface.contains("SOAP") && dossierType == '<business>Y</business>' && busguionly == 'true'){
    	  
} else {
	testRunner.gotoStepByName( "Delay0")

	
}]]></script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="CTR-Sunny Day" id="0e5b7969-2917-404c-8391-24c4e0344794">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>CompWebserviceSoap11</con:interface>
          <con:operation>SendMessages</con:operation>
          <con:request name="CTR-Sunny Day" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordText" id="3aa22f8f-37c1-4ea2-ba88-b80068a3761f">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#SoapUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="http://coin.nl/ws/schema">\r
   <soapenv:Header/>
   <soapenv:Body>
      <sch:SendMessagesRequest>
         <sch:Sender>${#TestSuite#recipient}</sch:Sender>
         <sch:Messages>
            <sch:Message>
               <sch:Text><![CDATA[<?xml version="1.0"?>
<message xmlns="http://www.coin.nl/Overstappen_MESSAGES">
<header>
<receiver>
<!--Optional:-->
<networkoperator>${#TestSuite#donor}</networkoperator>
<!--Optional:-->
<serviceprovider>${#TestSuite#donor}</serviceprovider>
</receiver>
<sender>
<!--Optional:-->
<networkoperator>${#TestSuite#recipient}</networkoperator>
<!--Optional:-->
<serviceprovider>${#TestSuite#recipient}</serviceprovider>
</sender>
<!--Optional:-->
<messageid>${#TestSuite#recipient}-${#TestCase#contractId}-01</messageid>
<timestamp>${#TestSuite#TimestampNOW}</timestamp>
</header>
<body>
<contractterminationrequest>
<${#TestSuite#soapVersion}>
<dossierid>${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01</dossierid>
<!--Optional:-->
<recipientserviceprovider>${#TestSuite#recipient}</recipientserviceprovider>
<!--Optional:-->
<recipientnetworkoperator>${#TestSuite#recipient}</recipientnetworkoperator>
<!--Optional:-->
<donornetworkoperator>${#TestSuite#donor}</donornetworkoperator>
<!--Optional:-->
<donorserviceprovider>${#TestSuite#donor}</donorserviceprovider>
<wishdatetime>${#TestCase#wishdate}</wishdatetime>
${#TestSuite#dossierType}
${#TestSuite#compensationOK}
<name>COIN</name>
<addressblock>
 	<postcode>1389SS</postcode>
	<housenr>99999</housenr>
</addressblock>
<numberseries>
     <start>0173112233</start>
     <end>0173112233</end>
</numberseries>
<validationblock>
    <name>contractid</name>
    <value>9-${#TestCase#contractID}</value>
 </validationblock>
<note>Sunny day-sent ${#TestSuite#soapVersion} expect ${#TestSuite#donorSoapVersion}-linenr. ${#TestSuite#lineNumber}</note>
</${#TestSuite#soapVersion}>
</contractterminationrequest>
</body>
</message>]]]]>><![CDATA[</sch:Text>
            </sch:Message>
         </sch:Messages>
      </sch:SendMessagesRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="XPath Match" name="Match content of [ns2:TransactionId] using RegEx" id="1c471417-807a-4012-a734-b2dd5be94c8f">
              <con:configuration>
                <path>declare namespace ns2='http://coin.nl/ws/schema';
//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]/text()</path>
                <content>*</content>
                <allowWildcards>true</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" name="Check count of [ns2:TransactionId]" id="345c96a3-89a0-476e-9875-b0c18e04ef5b">
              <con:configuration>
                <path>declare namespace ns2='http://coin.nl/ws/schema';
count( //ns2:SendMessagesResponse/ns2:TransactionId)</path>
                <content>1</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert node [ns2:TransactionId]" id="63f77b9d-d209-4d74-ad56-a26982ab75c5">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
//def groovyUtilsPro = new com.eviware.soapui.support.GroovyUtilsPro( context )

def holder = new XmlHolder( messageExchange.responseContentAsXml )
holder.namespaces["ns2"] = "http://coin.nl/ws/schema"
def transactionId = holder.getNodeValue( "//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]" )
messageExchange.modelItem.testStep.testCase.setPropertyValue("transactionId",transactionId)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#TestSuite#recipientUserName}</con:username>
              <con:password>${#TestSuite#recipientPassWord}</con:password>
              <con:domain xsi:nil="true"/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://coin.nl/SendMessages"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_ST Table" id="782813ae-42e1-4970-aec1-a5e23cf6dc7f">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_transactions 
where st_transaction_id = '${#TestCase#transactionId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Verify TransactionId" id="0314e1fa-b1cb-4932-bba8-55dd87029a85">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_TRANSACTION_ID[1]</path>
              <content>${#TestCase#transactionId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify ST_SEND_RECEIVED" id="9db0e630-c611-4fc1-b0bc-fb6028a6a7c3">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_SEND_RECEIVED[1]</path>
              <content>received</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" name="Contains: Contain message Type" id="85caea84-7bde-4674-9d00-009229cb7411">
            <con:configuration>
              <token>contractterminationrequest</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="77af631e-a991-48c5-b7c6-43b4c54de0ad" name="Script: store SoapTransaction.id">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "Id");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="7db1c36f-fcfc-4bbc-b1ec-f901a3b0ec39" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="0d714a93-1143-4b06-a4e8-9f98de60aa51" name="Xpath: assert UserIP" disabled="true">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_IP/text()</path>
              <content>${#Project#UserIP}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="637d7fef-4b6f-4350-800d-ba7d7d0117ba" name="Xpath: assert UserName">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_NAME/text()</path>
              <content>${#TestSuite#recipientUserName}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="06f4d597-3d09-45a6-817f-d816cd031090" name="Xpath: assert TechSender">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_TECHNICAL_SENDER/text()</path>
              <content>${#TestSuite#recipient}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Wait For Poller" id="49100d4e-eea9-47b0-a572-ce599736edd1">
        <con:settings/>
        <con:config>
          <delay>${#TestSuite#PollTime}</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_RSXM Table_CTR" id="9b2ae75b-77cb-4df4-892f-2a2c165644fb">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.raw_soap_xml_messages where rsxm_st_id = '${#TestCase#Id}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: XPath Match" id="14d90270-6f91-4150-993a-d24f2adbd507">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/RSXM_STATUS[1]</path>
              <content>Done</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="f1d8a12b-1ed5-4bc1-a43d-3bda335f99be" name="JDBC Status"/>
          <con:assertion type="GroovyScriptAssertion" id="8626d996-47c3-418e-9452-d6a4e8a3a5d0" name="Script: SaveRSXM_DM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/RSXM_DM_ID[1]", "ctrDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="74707f5d-0054-4afb-9b31-1e8f51ae15ef" name="Script: SaveRSXM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctrRSXMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_MSL Table_CTR" id="0a1c970b-53d0-45ba-a6ae-bef7d2356d6a">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>Select * from overstappen.message_logging where 
msl_soap_transaction_id = '${#TestCase#transactionId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: assert MSL_CLC_ID]" id="e99eef8e-047f-4dff-930b-7b92f2348249">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/MSL_CLC_ID[1]/text()</path>
              <content>57</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="e095441a-3cf8-4288-8e40-4300718feece" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="f57efed5-4a9e-4d5d-9bac-d88d64b28250" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="a791b62c-68e3-4fb7-b301-a3fbaac6d1e7" name="Xpath: assert SoapTransactionId">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_ST_ID/text()</path>
              <content>${#TestCase#Id}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table_CTR" id="0f671ad3-2570-4d8b-8942-fd0a86d3a63a">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier where 
ctd_switchid = '${#TestSuite#Recipient}-${#TestSuite#Donor}-${#TestCase#ContractId}-01'</con:query>
          <con:assertion type="XPath Match" name="Xpath: assert CTD_DOSSIER_STATUS]" id="ac17d9f6-9653-435c-bd0c-9af6917f2aa6">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_DOSSIER_STATUS[1]/text()</path>
              <content>Pending</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert CTD_PROCESS_STATUS]" id="ede8cc08-99ab-46ca-baf4-97e9f0895428">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_PROCESS_STATUS[1]/text()</path>
              <content>Request</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: assert ion ctd_id">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def ctdid = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctdId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="d8aa7352-7871-4269-99bf-e0e1cee4d057" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTR" id="7837902f-02c8-4259-aad8-46922199a3d7">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where dm_ctd_id = ${#TestCase#ctdId} 
and dm_mst_id=1 
order by createddate desc</con:query>
          <con:assertion type="XPath Match" id="22e366c7-6a4e-4580-9e30-c5cb86194c3d" name="Xpath: SoapVersion">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/IT_INTERFACE_TYPE[1]</path>
              <content>*${#TestSuite#soapVersion}*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="86a055cd-87c0-431a-bfcc-f2f906ee445c" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="f0e0334a-a74b-4594-a5cc-9bef4817130f" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/ID/text()</path>
              <content>${#TestCase#ctrDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="a39dbac2-9400-44ea-9257-2a1f238b2ed9" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctrDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_CheckOutGoingMsgType_CTR" id="9343fa19-fb0c-4812-823f-aefeb977fa47">
        <con:settings/>
        <con:config>
          <script>def outtype = testRunner.testCase.testSuite.getPropertyValue("recipientOutMsg")

if (outtype == 'EMAIL') {
    	  testRunner.gotoStepByName( "JDBC_SXM Table_NoRecord_CTR")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Wait For Send Poller" id="cede64f9-f9f0-4d75-b3b1-59dd397d1bc3">
        <con:settings/>
        <con:config>
          <delay>${#TestSuite#PollTime}</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_ST Table_Send" id="9938e8aa-b69a-4e2b-80b6-8f003007abab">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_transactions 
where st_sender='${#TestSuite#recipient}' and st_receiver='${#TestSuite#donor}' and st_send_received='SEND' and id>${#TestCase#Id}</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [ST_TRANSACTION_ID]" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//ST_TRANSACTION_ID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify SEND Status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//ST_SEND_RECEIVED</path>
              <content>SEND</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" name="Contains: Contains" id="a1e1b0ed-fff7-4f8c-9eba-dee62ae7b198">
            <con:configuration>
              <token>contractterminationrequest</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="7e3ae428-bd31-4602-8799-47c752edaa1d" name="JDBC Status"/>
          <con:assertion type="GroovyScriptAssertion" id="4e523d8c-2eaf-4f85-9641-987e000987c0" name="Script: SaveST_SXM_ID" disabled="true">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ST_SXM_ID[1]", "stSXMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_CTR" id="586c597f-e1dc-4314-808b-4b18fdbfcf31">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where
sxm_xml_message like '%${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01%'
and sxm_xml_message like '%/${#TestSuite#donorSoapVersion}%'
and sxm_xml_message_type = 'Request'
and sxm_sender = '${#TestSuite#recipient}'
and sxm_receiver = '${#TestSuite#donor}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [ST_TRANSACTION_ID]" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//ID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" name="Contains: Contains" id="a1e1b0ed-fff7-4f8c-9eba-dee62ae7b198">
            <con:configuration>
              <token>contractterminationrequest</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="64cb4b3a-ccda-45b3-8350-71eb14dbde78" name="Contains: assert donor soap version">
            <con:configuration>
              <token>&amp;lt;${#TestSuite#donorSoapVersion}&amp;gt;</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="78c5ae3a-f6a5-4feb-9c1c-5b3955ec6741" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="4962a563-b2fc-4cd0-98cc-2e0074dea4d8" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/SXM_DM_ID/text()</path>
              <content>${#TestCase#ctrDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="d982495b-aea3-4424-8546-9cf82b1a660e" name="Xpath: assert SXMID" disabled="true">
            <con:configuration>
              <path>/Results/ResultSet/Row/ID/text()</path>
              <content>${#TestCase#stSXMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_CheckOutGoingMsgType1_CTR" id="956b9bfb-c9f7-48ce-b805-1678a8f0b8af">
        <con:settings/>
        <con:config>
          <script>def outtype = testRunner.testCase.testSuite.getPropertyValue("recipientOutMsg")

if (outtype == 'SOAP') {
    	  testRunner.gotoStepByName( "CTRA-ok")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_NoRecord_CTR" id="b7b1aaa1-f6ca-4320-bb8e-9d07d64b31c4">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where
sxm_xml_message like '%${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01%'
and sxm_xml_message_type = 'Request'
and sxm_sender = '${#TestSuite#recipient}'
and sxm_receiver = '${#TestSuite#donor}'</con:query>
          <con:assertion type="JDBC Status" id="2c377262-d921-458d-b152-eab80c489e7e" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="f2e55045-604c-4d10-b06c-7039a60718bf" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>0</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_EL Table_CTR" id="1b0c269e-37ff-40b7-856a-465744f90a1c">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.email_logging el join overstappen.email_logging_detail eld on el.el_detail_id = eld.id where 
el_dm_id = '${#TestCase#ctrDMId}'</con:query>
          <con:assertion type="JDBC Status" id="5b056277-e6ec-404a-99fc-8472b329b9f9" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="08c804f2-1638-4310-89c5-8ddef67cc36e" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_Body">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_BODY/text()</path>
              <content>New Request received on COMP for ${#TestSuite#Recipient}-${#TestSuite#Donor}-${#TestCase#ContractId}-01*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_SUBJECT">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_SUBJECT/text()</path>
              <content>*New Request received on COMP for ${#TestSuite#Recipient}-${#TestSuite#Donor}-${#TestCase#ContractId}-01</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_REASON">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_REASON/text()</path>
              <content>Request</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="4e4435dd-077d-4bf1-a0da-0ef46339bb12" name="Xpath: assert Receiver">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_RECEIVER_ID/text()</path>
              <content>${#TestSuite#donorId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="CTRA-ok" id="50ab2258-34a1-4099-91a1-797fc1cffa3e">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>CompWebserviceSoap11</con:interface>
          <con:operation>SendMessages</con:operation>
          <con:request name="CTRA-ok" id="83d7229a-676a-4c41-81cc-3429f324fea1" wssPasswordType="PasswordText">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#SoapUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="http://coin.nl/ws/schema">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:SendMessagesRequest>
         <sch:Sender>${#TestSuite#donor}</sch:Sender>
         <sch:Messages>
            <sch:Message>
               <sch:Text><![CDATA[<?xml version="1.0"?>
<message xmlns="http://www.coin.nl/Overstappen_MESSAGES">
<header>
<receiver>
<!--Optional:-->
<networkoperator>${#TestSuite#recipient}</networkoperator>
<!--Optional:-->
<serviceprovider>${#TestSuite#recipient}</serviceprovider>
</receiver>
<sender>
<!--Optional:-->
<networkoperator>${#TestSuite#donor}</networkoperator>
<!--Optional:-->
<serviceprovider>${#TestSuite#donor}</serviceprovider>
</sender>
<!--Optional:-->
<messageid>${#TestSuite#recipient}-${#TestCase#contractId}-01</messageid>
<timestamp>${#TestSuite#TimestampNOW}</timestamp>
</header>
<body>
<contractterminationrequestanswer>
<${#TestSuite#donorSoapVersion}>
<dossierid>${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01</dossierid>
${#TestSuite#donorDossierType}
<blocking>N</blocking>
<wishdatetime>${#TestCase#wishdate}</wishdatetime>
<blockingcode>0</blockingcode>
<note>Request Answer ok ${#TestSuite#soapVersion} sent ${#TestSuite#donorSoapVersion} expected</note>
</${#TestSuite#donorSoapVersion}>
</contractterminationrequestanswer>
</body>
</message>]]]]>><![CDATA[</sch:Text>
            </sch:Message>
         </sch:Messages>
      </sch:SendMessagesRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="0408c23d-c32c-480c-b33e-7f633dc17c95"/>
            <con:assertion type="XPath Match" id="8131d7ae-9a5a-491b-aefe-ae2214c93e1b" name="XPath Match">
              <con:configuration>
                <path>declare namespace ns2='http://coin.nl/ws/schema';
//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]/text()</path>
                <content>*</content>
                <allowWildcards>true</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="8fd52b42-3f32-4928-9b32-f521197d004e" name="Script Assertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
//def groovyUtilsPro = new com.eviware.soapui.support.GroovyUtilsPro( context )

def holder = new XmlHolder( messageExchange.responseContentAsXml )
holder.namespaces["ns2"] = "http://coin.nl/ws/schema"
def transactionId = holder.getNodeValue( "//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]" )
messageExchange.modelItem.testStep.testCase.setPropertyValue("ctraTransactionId",transactionId)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#TestSuite#donorUserName}</con:username>
              <con:password>${#TestSuite#donorPassWord}</con:password>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_ST Table CTRA" id="1601c6a9-d195-4472-8e80-e4facea5a484">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_transactions 
where st_transaction_id = '${#TestCase#ctraTransactionId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Verify TransactionId" id="0314e1fa-b1cb-4932-bba8-55dd87029a85">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_TRANSACTION_ID[1]</path>
              <content>${#TestCase#ctraTransactionId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify ST_SEND_RECEIVED" id="9db0e630-c611-4fc1-b0bc-fb6028a6a7c3">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_SEND_RECEIVED[1]</path>
              <content>received</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" name="Contains: Contain message Type" id="85caea84-7bde-4674-9d00-009229cb7411">
            <con:configuration>
              <token>contractterminationrequestanswer</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script: assert node [ID]" id="919aa515-934c-4b10-bd9d-dcd08c81b41c">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctraId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="7f1a10f1-873a-460b-9ff6-fcbea19d91df" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="d0dab017-ada7-42b5-b1ca-8f748700b898" name="Xpath: assert UserIP" disabled="true">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_IP/text()</path>
              <content>${#Project#UserIP}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="d13a93e1-8d5a-4948-9b28-6602a1aa2af1" name="Xpath: assert UserName">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_NAME/text()</path>
              <content>${#TestSuite#donorUserName}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="a30d5b47-c44f-48da-8a4c-0a54564bacc1" name="Xpath: assert TechSender">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_TECHNICAL_SENDER/text()</path>
              <content>${#TestSuite#donor}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Wait For Poller 2" id="392bea7c-7109-4af8-92b0-5ca9165ca886">
        <con:settings/>
        <con:config>
          <delay>${#TestSuite#PollTime}</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_RSXM Table_CTRA" id="522f5617-083a-4faf-a014-7f910aae2306">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.raw_soap_xml_messages where rsxm_st_id = '${#TestCase#ctraId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: XPath Match" id="14d90270-6f91-4150-993a-d24f2adbd507">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/RSXM_STATUS[1]</path>
              <content>Done</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="7bb9bbeb-4165-4a7b-9092-3cd4c026c40a" name="JDBC Status"/>
          <con:assertion type="GroovyScriptAssertion" id="5d785e5e-3655-4b3e-9c0b-cf01848b1cce" name="Script: SaveRSXM_DM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/RSXM_DM_ID[1]", "ctraDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="bdc87cfe-7a0c-45d7-bee9-7d8f8c10dd3d" name="Script: SaveRSXM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctraRSXMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_MSL Table_CTRA" id="e689add0-1ad2-4019-b720-6d269e532c83">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>Select * from overstappen.message_logging where 
msl_soap_transaction_id = '${#TestCase#ctraTransactionId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: assert MSL_CLC_ID]" id="e99eef8e-047f-4dff-930b-7b92f2348249">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/MSL_CLC_ID[1]/text()</path>
              <content>57</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="e095441a-3cf8-4288-8e40-4300718feece" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="04aad480-2f09-49f3-b24d-380e0fbaf292" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="c5e1186b-6a08-4ab3-bcd8-6608beaad169" name="Xpath: assert SoapTransactionId">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_ST_ID/text()</path>
              <content>${#TestCase#ctraId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table 1" id="9c091efe-d23e-4518-93aa-2831584a5634">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier 
where id='${#TestCase#ctdId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [ST_TRANSACTION_ID]" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//CTD_SWITCHID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_dossier_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_DOSSIER_STATUS</path>
              <content>Pending</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_process_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_PROCESS_STATUS</path>
              <content>Request Answer OK</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="b2d335d6-98ad-431d-b038-81b8397f6e26" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTRA" id="883e99b3-9f23-4edb-9a5c-a0a931a21f8c">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where dm_ctd_id = ${#TestCase#ctdId} 
and dm_mst_id=3 
order by createddate desc</con:query>
          <con:assertion type="XQuery Match" id="40cc6fa1-0d78-43c5-a10b-f043ddf625c6" name="XQuery Match">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/IT_INTERFACE_TYPE[1]</path>
              <content>*${#TestSuite#donorSoapVersion}*</content>
              <allowWildcards>true</allowWildcards>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="eb3ca4cd-0d91-4992-83c0-13f973c2ed5a" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="2ddcb8b9-efbe-4f5a-9af2-35bbe2669158" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/ID/text()</path>
              <content>${#TestCase#ctraDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="5673954c-f1bf-4349-9177-a30c62168e3d" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctraDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_CTRA" id="ee700b4d-42a4-41fe-9e8a-24737363d407">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where
sxm_xml_message like '%${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01%'
and sxm_xml_message like '%/${#TestSuite#soapVersion}%'
and sxm_xml_message_type = 'Request answer'
and sxm_sender = '${#TestSuite#donor}'
and sxm_receiver = '${#TestSuite#recipient}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [SXM_ID]" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//ID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="65126eb3-5fce-4b42-b832-8882ef7a5d51" name="Xpath: header sender receiver">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/SXM_XML_MESSAGE[1]</path>
              <content><![CDATA[*<header>
      <receiver>
                  <networkoperator>${#TestSuite#recipient}</networkoperator>
              	          <serviceprovider>${#TestSuite#recipient}</serviceprovider>
               </receiver>
      <sender>
                  <networkoperator>${#TestSuite#donor}</networkoperator>
         		          <serviceprovider>${#TestSuite#donor}</serviceprovider>
               </sender>*]]></content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="053606e7-8ef0-4e64-92f7-4d02863ea4ab" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="519e7dff-5580-4f66-bb26-820b306b81c8" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/SXM_DM_ID/text()</path>
              <content>${#TestCase#ctraDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="1f003e6a-03a1-4e99-833b-da66f1341e4b" name="Xpath: assert SXMID" disabled="true">
            <con:configuration>
              <path>/Results/ResultSet/Row/ID/text()</path>
              <content>${#TestCase#stSXMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="CTCH" id="21d69a5d-1399-439f-8a59-0a2f41973062">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>CompWebserviceSoap11</con:interface>
          <con:operation>SendMessages</con:operation>
          <con:request name="CTCH" id="83d7229a-676a-4c41-81cc-3429f324fea1" wssPasswordType="PasswordText">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#SoapUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="http://coin.nl/ws/schema">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:SendMessagesRequest>
         <sch:Sender>${#TestSuite#recipient}</sch:Sender>
         <sch:Messages>
            <sch:Message>
               <sch:Text><![CDATA[<?xml version="1.0"?>
<message xmlns="http://www.coin.nl/Overstappen_MESSAGES">
<header>
<receiver>
<serviceprovider>${#TestSuite#donor}</serviceprovider>
</receiver>
<sender>
<serviceprovider>${#TestSuite#recipient}</serviceprovider>
</sender>
<messageid>${#TestSuite#recipient}-${#TestCase#contractId}-001</messageid>
<timestamp>${#TestSuite#TimestampNOW}</timestamp>
</header>
<body>
<change>
<${#TestSuite#soapVersion}>
<dossierid>${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01</dossierid>
<wishdatetime>${#TestCase#proposedDate}</wishdatetime>
<note>Change ${#TestSuite#soapVersion} OK</note>
</${#TestSuite#soapVersion}>
</change>
</body>
</message>]]]]>><![CDATA[</sch:Text>
            </sch:Message>
         </sch:Messages>
      </sch:SendMessagesRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="0408c23d-c32c-480c-b33e-7f633dc17c95"/>
            <con:assertion type="XPath Match" id="611515f4-aa5a-44bb-9038-5efb4661d656" name="XPath Match">
              <con:configuration>
                <path>declare namespace ns2='http://coin.nl/ws/schema';
//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]/text()</path>
                <content>*</content>
                <allowWildcards>true</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="4c4aa14b-781b-4325-8f36-84e716be7574" name="Script Assertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
//def groovyUtilsPro = new com.eviware.soapui.support.GroovyUtilsPro( context )

def holder = new XmlHolder( messageExchange.responseContentAsXml )
holder.namespaces["ns2"] = "http://coin.nl/ws/schema"
def transactionId = holder.getNodeValue( "//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]" )
messageExchange.modelItem.testStep.testCase.setPropertyValue("ctchTransactionId",transactionId)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#TestSuite#recipientUserName}</con:username>
              <con:password>${#TestSuite#recipientPassWord}</con:password>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_ST Table CTCH" id="c28ee2f4-e21c-4d21-9495-6650cefa508e">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_transactions 
where st_transaction_id = '${#TestCase#ctchTransactionId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Verify TransactionId" id="0314e1fa-b1cb-4932-bba8-55dd87029a85">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_TRANSACTION_ID[1]</path>
              <content>${#TestCase#ctchTransactionId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify ST_SEND_RECEIVED" id="9db0e630-c611-4fc1-b0bc-fb6028a6a7c3">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_SEND_RECEIVED[1]</path>
              <content>received</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" name="Contains: Contain message Type" id="85caea84-7bde-4674-9d00-009229cb7411">
            <con:configuration>
              <token>change</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script: assert node [ID]" id="919aa515-934c-4b10-bd9d-dcd08c81b41c">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctchId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="536c932a-ec2b-4a41-a82c-1e0b893420da" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="62a92cf4-098c-4225-b3a3-aaedfc74f454" name="Xpath: assert UserIP" disabled="true">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_IP/text()</path>
              <content>${#Project#UserIP}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6c77e4af-f0a1-45b4-84bd-26b35c497e9b" name="Xpath: assert UserName">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_NAME/text()</path>
              <content>${#TestSuite#recipientUserName}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="34cdcaaf-6545-4ea2-be40-896a24ac8ff5" name="Xpath: assert TechSender">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_TECHNICAL_SENDER/text()</path>
              <content>${#TestSuite#recipient}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Wait For Send Poller 3" id="16cd9362-e58f-48ea-8933-9dc243a3c805">
        <con:settings/>
        <con:config>
          <delay>${#TestSuite#PollTime}</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_RSXM Table_CTCH" id="f37a0cd6-8816-41a9-b102-0e16d0126285">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.raw_soap_xml_messages where rsxm_st_id = '${#TestCase#ctchId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: XPath Match" id="14d90270-6f91-4150-993a-d24f2adbd507">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/RSXM_STATUS[1]</path>
              <content>Done</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="cef1de67-f91b-44c8-8eb2-02632fc894c8" name="JDBC Status"/>
          <con:assertion type="GroovyScriptAssertion" id="f1a3eb7a-2d84-4ce0-92b5-02ea84e76c93" name="Script: SaveRSXM_DM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/RSXM_DM_ID[1]", "ctchDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="a6d0edfd-115c-420a-8d8a-d1f3c342b979" name="Script: SaveRSXM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctchRSXMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_MSL Table_CTCH" id="6d3f2674-78d5-4dc6-bd39-4163354fe194">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>Select * from overstappen.message_logging where 
msl_soap_transaction_id = '${#TestCase#ctchTransactionId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: assert MSL_CLC_ID]" id="e99eef8e-047f-4dff-930b-7b92f2348249">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/MSL_CLC_ID[1]/text()</path>
              <content>57</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="e095441a-3cf8-4288-8e40-4300718feece" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="ddae2cf0-0368-42a1-bada-4e4233433426" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="17a36732-fba0-49df-b03b-ca321c1c0b4d" name="Xpath: assert SoapTransactionId">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_ST_ID/text()</path>
              <content>${#TestCase#ctchId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table_CTCH" id="e5897538-be09-4c4d-aac8-6dfd7b2c1bfb">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier 
where id='${#TestCase#ctdId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of CTD record" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//CTD_SWITCHID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_dossier_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_DOSSIER_STATUS</path>
              <content>Pending</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_process_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_PROCESS_STATUS</path>
              <content>Change</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6c735671-36ae-48e4-8841-34f83e3f1b4e" name="Xpath: XPath Match">
            <con:configuration>
              <path>//CTD_CTCH_WISHDATETIME</path>
              <content>${#TestCase#propDate}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="dca9796f-f928-4ad7-9f25-001add2a87b9" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTCH" id="7540b5b2-af05-4254-9541-a09c10d38185">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where dm_ctd_id = ${#TestCase#ctdId} 
and dm_mst_id=7 
order by createddate desc</con:query>
          <con:assertion type="XPath Match" id="2f7d35d5-6695-4e22-aecf-3764a6a3f60c" name="Xpath: 1">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/IT_INTERFACE_TYPE[1]</path>
              <content>*${#TestSuite#soapVersion}*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="37df4363-584d-4809-81bd-8ecd535e2b40" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="f3cb166c-36a7-49aa-bb1f-ee8be8c8cd80" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/ID/text()</path>
              <content>${#TestCase#ctchDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="dbf60478-de37-4344-b97d-041efacdbf4a" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctchDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_CheckOutGoingMsgType_CTCH" id="92576baa-e3b1-4ad2-bf87-11102d2b2299">
        <con:settings/>
        <con:config>
          <script>def outtype = testRunner.testCase.testSuite.getPropertyValue("recipientOutMsg")

if (outtype == 'EMAIL') {
    	  testRunner.gotoStepByName( "JDBC_SXM Table_NoRecord_CTCH")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_CTCH" id="c75fcb7e-3637-418f-8ee1-d32eb83cfea5">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where
sxm_xml_message like '%${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01%'
and sxm_xml_message like '%/${#TestSuite#donorSoapVersion}%'
and sxm_xml_message_type = 'Change'
and sxm_sender = '${#TestSuite#recipient}'
and sxm_receiver = '${#TestSuite#donor}'
--and sxm_retry_count &lt;=1</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [SXM_ID]" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//ID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="fb13562b-3b25-45c9-bf62-83565a32fbfa" name="Xpath: header sender receiver">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/SXM_XML_MESSAGE[1]</path>
              <content><![CDATA[*<header>
      <receiver>
                  <networkoperator>${#TestSuite#donor}</networkoperator>
         	              <serviceprovider>${#TestSuite#donor}</serviceprovider>
               </receiver>
      <sender>
                  <networkoperator>${#TestSuite#recipient}</networkoperator>
         		          <serviceprovider>${#TestSuite#recipient}</serviceprovider>
               </sender>*]]></content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="b741f0e7-b99f-46ea-ba92-e3019943258e" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="36983172-9f27-4cc0-b6ff-65491b5851b4" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/SXM_DM_ID/text()</path>
              <content>${#TestCase#ctchDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_CheckOutGoingMsgType1_CTCH" id="d40f72e4-3fe3-48a0-bc8a-53456078ff0d">
        <con:settings/>
        <con:config>
          <script>def outtype = testRunner.testCase.testSuite.getPropertyValue("recipientOutMsg")

if (outtype == 'SOAP') {
    	  testRunner.gotoStepByName( "CTCHA")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_NoRecord_CTCH" id="eae8a588-91b3-412a-a422-184caa020157">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where
sxm_xml_message like '%${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01%'
and sxm_xml_message_type = 'Change'
and sxm_sender = '${#TestSuite#recipient}'
and sxm_receiver = '${#TestSuite#donor}'</con:query>
          <con:assertion type="JDBC Status" id="c4d30bfb-c3cc-4542-b887-e7daa215344f" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="ebaae9e2-b58a-4c9b-a0de-003b8c89de81" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>0</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_EL Table_CTCH" id="9584a209-4ad0-425d-8192-b1ffa9dcb801">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.email_logging el join overstappen.email_logging_detail eld on el.el_detail_id = eld.id where 
el_dm_id = '${#TestCase#ctchDMId}'</con:query>
          <con:assertion type="JDBC Status" id="5b056277-e6ec-404a-99fc-8472b329b9f9" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="08c804f2-1638-4310-89c5-8ddef67cc36e" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_Body">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_BODY/text()</path>
              <content>New Change received on COMP for ${#TestSuite#Recipient}-${#TestSuite#Donor}-${#TestCase#ContractId}-01*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_SUBJECT">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_SUBJECT/text()</path>
              <content>New Change received on COMP for ${#TestSuite#Recipient}-${#TestSuite#Donor}-${#TestCase#ContractId}-01</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_REASON">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_REASON/text()</path>
              <content>Change</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="4e4435dd-077d-4bf1-a0da-0ef46339bb12" name="Xpath: assert Receiver">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_RECEIVER_ID/text()</path>
              <content>${#TestSuite#donorId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="CTCHA" id="e4cd4be4-256e-4412-a3c2-ad9c65dd8b02">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>CompWebserviceSoap11</con:interface>
          <con:operation>SendMessages</con:operation>
          <con:request name="CTCHA" id="83d7229a-676a-4c41-81cc-3429f324fea1" wssPasswordType="PasswordText">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#SoapUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="http://coin.nl/ws/schema">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:SendMessagesRequest>
         <sch:Sender>${#TestSuite#donor}</sch:Sender>
         <sch:Messages>
            <sch:Message>
               <sch:Text><![CDATA[<?xml version="1.0"?>
<message xmlns="http://www.coin.nl/Overstappen_MESSAGES">
<header>
<receiver>
<serviceprovider>${#TestSuite#recipient}</serviceprovider>
</receiver>
<sender>
<serviceprovider>${#TestSuite#donor}</serviceprovider>
</sender>
<messageid>${#TestSuite#recipient}-${#TestCase#contractId}-001</messageid>
<timestamp>${#TestSuite#TimestampNOW}</timestamp>
</header>
<body>
<changeanswer>
<${#TestSuite#donorSoapVersion}>
<dossierid>${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01</dossierid>
<blocking>N</blocking>
<wishdatetime>${#TestCase#proposedDate}</wishdatetime>
<note>Change Answer sent ${#TestSuit#donorSoapVersion} OK, expected ${#TestSuite#soapVersion} </note>
</${#TestSuite#donorSoapVersion}>
</changeanswer>
</body>
</message>]]]]>><![CDATA[</sch:Text>
            </sch:Message>
         </sch:Messages>
      </sch:SendMessagesRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="0408c23d-c32c-480c-b33e-7f633dc17c95"/>
            <con:assertion type="GroovyScriptAssertion" id="facd78c0-f429-4837-9e4e-fa25b476d712" name="Script Assertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
//def groovyUtilsPro = new com.eviware.soapui.support.GroovyUtilsPro( context )

def holder = new XmlHolder( messageExchange.responseContentAsXml )
holder.namespaces["ns2"] = "http://coin.nl/ws/schema"
def transactionId = holder.getNodeValue( "//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]" )
messageExchange.modelItem.testStep.testCase.setPropertyValue("ctchaTransactionId",transactionId)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#TestSuite#donorUserName}</con:username>
              <con:password>${#TestSuite#donorPassWord}</con:password>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_ST Table CTCHA" id="6904869d-6503-429a-9d3d-b9b15c095b28">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_transactions 
where st_transaction_id = '${#TestCase#ctchaTransactionId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Verify TransactionId" id="0314e1fa-b1cb-4932-bba8-55dd87029a85">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_TRANSACTION_ID[1]</path>
              <content>${#TestCase#ctchaTransactionId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify ST_SEND_RECEIVED" id="9db0e630-c611-4fc1-b0bc-fb6028a6a7c3">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_SEND_RECEIVED[1]</path>
              <content>received</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" name="Contains: Contain message Type" id="85caea84-7bde-4674-9d00-009229cb7411">
            <con:configuration>
              <token>change</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script: assert node [ID]" id="919aa515-934c-4b10-bd9d-dcd08c81b41c">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctchaId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="f6c05a55-b26f-4bd9-b303-56461538a8a2" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="74a35f65-5182-4f24-98a9-1e5e0391bbd2" name="Xpath: assert UserIP" disabled="true">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_IP/text()</path>
              <content>${#Project#UserIP}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b2830046-1c9f-48e7-8767-c86370a584e3" name="Xpath: assert UserName">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_NAME/text()</path>
              <content>${#TestSuite#donorUserName}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b6f9264b-b68d-4956-a328-72471efe5330" name="Xpath: assert TechSender">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_TECHNICAL_SENDER/text()</path>
              <content>${#TestSuite#donor}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Wait For Poller 4" id="0b702d14-b781-4068-8f24-979ac0816684">
        <con:settings/>
        <con:config>
          <delay>${#TestSuite#PollTime}</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_RSXM Table_CTCHA" id="6e5008c8-c6eb-4230-8dc9-2b4f57152d52">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.raw_soap_xml_messages where rsxm_st_id = '${#TestCase#ctchaId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: XPath Match" id="14d90270-6f91-4150-993a-d24f2adbd507">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/RSXM_STATUS[1]</path>
              <content>Done</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="d0e1985e-6e3e-45cb-b8b0-b45a21f9a2bd" name="JDBC Status"/>
          <con:assertion type="GroovyScriptAssertion" id="fad17aaa-1f6a-4473-b040-bdb4a0c1356f" name="Script: SaveRSXM_DM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/RSXM_DM_ID[1]", "ctchaDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="248824ab-1db4-43a3-a096-415aae86bdc7" name="Script: SaveRSXM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctchaRSXMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_MSL Table_CTCHA" id="372b5b6b-3841-4b37-b23b-d6b79592fdeb">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>Select * from overstappen.message_logging where 
msl_soap_transaction_id = '${#TestCase#ctchaTransactionId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: assert MSL_CLC_ID]" id="e99eef8e-047f-4dff-930b-7b92f2348249">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/MSL_CLC_ID[1]/text()</path>
              <content>57</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="e095441a-3cf8-4288-8e40-4300718feece" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="64a67ad5-82d2-4b22-9a8d-02b9ead1c738" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="2fb6578c-865a-470f-aeea-249ec110fc48" name="Xpath: assert SoapTransactionId">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_ST_ID/text()</path>
              <content>${#TestCase#ctchaId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table_CTCHA-ok" id="168aaddf-474b-4644-b186-7faf24f72068">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier 
where id='${#TestCase#ctdId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of CTD record" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//CTD_SWITCHID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_dossier_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_DOSSIER_STATUS</path>
              <content>Pending</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_process_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_PROCESS_STATUS</path>
              <content>Change Answer OK</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="d39811c4-2232-47ee-ba08-6ba3ca210866" name="Xpath: XPath Match">
            <con:configuration>
              <path>//CTD_REQUESTEDDATETIME</path>
              <content>${#TestCase#propDate}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="af8a9c23-57b9-4f46-a2f0-69bcd2ab4af3" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTCHA" id="58807e82-1c1d-459a-8971-355f63028c52">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where dm_ctd_id = ${#TestCase#ctdId} 
and dm_mst_id=9 
order by createddate desc</con:query>
          <con:assertion type="XPath Match" id="8af8dc75-df09-4ea0-b7eb-67cc0baa0261" name="Xpath: 1">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/IT_INTERFACE_TYPE[1]</path>
              <content>*${#TestSuite#donorSoapVersion}*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="bd859157-dcc5-4ef6-9e3c-d9b4efb1f01c" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="7a0a25ac-22bc-4ade-88cf-3ad103b2398d" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/ID/text()</path>
              <content>${#TestCase#ctchaDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="6f4e9841-4dfb-4790-bce4-91a80420036d" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctchaDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_CTCHA" id="ff3cdd2b-15a2-49e0-be71-a0047950dc5c">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where 
sxm_xml_message like '%${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01%'
and sxm_xml_message like '%&lt;blocking>N&lt;/blocking>%'
and sxm_xml_message_type = 'Change answer'
and sxm_sender = '${#TestSuite#donor}'
and sxm_receiver = '${#TestSuite#recipient}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [SXM_ID]" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//ID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="639000c6-458a-49b5-99b6-0384c7173b2a" name="Xpath: soap version">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/SXM_XML_MESSAGE[1]</path>
              <content>*&lt;/${#TestSuite#soapVersion}>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="d469bbc6-672b-4bb0-b643-aba122a2e2c8" name="Contains: wishdatetime">
            <con:configuration>
              <token>${#TestCase#proposedDate}&amp;lt;/wishdatetime&amp;gt;</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple NotContains" id="5cfb22ae-1b02-4152-96f0-ff18cd894bca" name="NotContains: no proposedatetime">
            <con:configuration>
              <token>&amp;lt;/proposeddatetime&amp;gt;</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="7e51312e-ff87-4be1-87e0-9fc542f430d6" name="Xpath: header sender receiver">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/SXM_XML_MESSAGE[1]</path>
              <content><![CDATA[*<header>
      <receiver>
                  <networkoperator>${#TestSuite#recipient}</networkoperator>
         	              <serviceprovider>${#TestSuite#recipient}</serviceprovider>
               </receiver>
      <sender>
                  <networkoperator>${#TestSuite#donor}</networkoperator>
         		          <serviceprovider>${#TestSuite#donor}</serviceprovider>
               </sender>*]]></content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="19f6e252-7356-4c05-9f21-4ac8436f2557" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="18c6cfb2-213b-4206-b98f-7d89ed896be6" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/SXM_DM_ID/text()</path>
              <content>${#TestCase#ctchaDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="CTP" id="1d32b7c6-7094-486d-8c62-16ae88b08489">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>CompWebserviceSoap11</con:interface>
          <con:operation>SendMessages</con:operation>
          <con:request name="CTP" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordText" id="3aa22f8f-37c1-4ea2-ba88-b80068a3761f">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#SoapUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="http://coin.nl/ws/schema">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <sch:SendMessagesRequest>\r
         <sch:Sender>${#TestSuite#recipient}</sch:Sender>\r
         <sch:Messages>\r
            <sch:Message>\r
               <sch:Text><![CDATA[<?xml version="1.0"?>
<message xmlns="http://www.coin.nl/Overstappen_MESSAGES">
<header>
<receiver>
<!--Optional:-->
<networkoperator>${#TestSuite#donor}</networkoperator>
<!--Optional:-->
<serviceprovider>${#TestSuite#donor}</serviceprovider>
</receiver>
<sender>
<!--Optional:-->
<networkoperator>${#TestSuite#recipient}</networkoperator>
<!--Optional:-->
<serviceprovider>${#TestSuite#recipient}</serviceprovider>
</sender>
<!--Optional:-->
<messageid>${#TestSuite#recipient}-${#TestCase#ContractId}-003</messageid>
<timestamp>${#TestSuite#TimestampNOW}</timestamp>
</header>
<body>
<contractterminationperformed>
<${#TestSuite#soapVersion}>
<dossierid>${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01</dossierid>
<actualdatetime>${#TestSuite#TimestampNOW}</actualdatetime>
<note>performed sent ${#TestSuite#soapVersion}, expect ${#TestSuite#donorSoapVersion}</note>
</${#TestSuite#soapVersion}>
</contractterminationperformed>
</body>
</message>]]]]>><![CDATA[</sch:Text>\r
            </sch:Message>\r
         </sch:Messages>\r
      </sch:SendMessagesRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request>
            <con:assertion type="XPath Match" name="Match content of [ns2:TransactionId] using RegEx" id="1c471417-807a-4012-a734-b2dd5be94c8f">
              <con:configuration>
                <path>declare namespace ns2='http://coin.nl/ws/schema';
//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]/text()</path>
                <content>*</content>
                <allowWildcards>true</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" name="Check count of [ns2:TransactionId]" id="345c96a3-89a0-476e-9875-b0c18e04ef5b">
              <con:configuration>
                <path>declare namespace ns2='http://coin.nl/ws/schema';
count( //ns2:SendMessagesResponse/ns2:TransactionId)</path>
                <content>1</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert node [ns2:TransactionId]" id="63f77b9d-d209-4d74-ad56-a26982ab75c5">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
//def groovyUtilsPro = new com.eviware.soapui.support.GroovyUtilsPro( context )

def holder = new XmlHolder( messageExchange.responseContentAsXml )
holder.namespaces["ns2"] = "http://coin.nl/ws/schema"
def transactionId = holder.getNodeValue( "//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]" )
messageExchange.modelItem.testStep.testCase.setPropertyValue("ctpTransactionId",transactionId)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#TestSuite#recipientUserName}</con:username>
              <con:password>${#TestSuite#recipientPassWord}</con:password>
              <con:domain xsi:nil="true"/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://coin.nl/SendMessages"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_ST Table CTP" id="dc85530a-0ec6-4975-aec2-cdbf5fb75163">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_transactions 
where st_transaction_id = '${#TestCase#ctpTransactionId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Verify TransactionId" id="0314e1fa-b1cb-4932-bba8-55dd87029a85">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_TRANSACTION_ID[1]</path>
              <content>${#TestCase#ctpTransactionId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify ST_SEND_RECEIVED" id="9db0e630-c611-4fc1-b0bc-fb6028a6a7c3">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_SEND_RECEIVED[1]</path>
              <content>received</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" name="Contains: Contain message Type" id="85caea84-7bde-4674-9d00-009229cb7411">
            <con:configuration>
              <token>contractterminationperformed</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script: assert node [ID]" id="919aa515-934c-4b10-bd9d-dcd08c81b41c">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctpId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="cdf71928-4f2d-439e-9755-22b3e1d12bf1" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="4dcac48f-4ae9-4d7c-8bb3-a374c5278725" name="Xpath: assert UserIP" disabled="true">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_IP/text()</path>
              <content>${#Project#UserIP}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="7b79d9d6-ca0a-4e44-b56f-276ad51188e9" name="Xpath: assert UserName">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_NAME/text()</path>
              <content>${#TestSuite#recipientUserName}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="c1e9649c-7c47-4069-9adc-768ba69030e7" name="Xpath: assert TechSender">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_TECHNICAL_SENDER/text()</path>
              <content>${#TestSuite#recipient}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Wait For Poller 1" id="ec597023-3857-4e31-8256-bb0bb4b12657">
        <con:settings/>
        <con:config>
          <delay>${#TestSuite#PollTime}</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_RSXM Table_CTP" id="bc480a36-3b26-4c38-940f-d582c13b25a0">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.raw_soap_xml_messages where rsxm_st_id = '${#TestCase#ctpId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: XPath Match" id="14d90270-6f91-4150-993a-d24f2adbd507">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/RSXM_STATUS[1]</path>
              <content>Done</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="d97f5a0c-1691-4fef-b90a-be122d568dc2" name="JDBC Status"/>
          <con:assertion type="GroovyScriptAssertion" id="e88044e5-e189-4cb7-91b2-da9332eaf6c6" name="Script: SaveRSXM_DM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/RSXM_DM_ID[1]", "ctpDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="cadc1253-daf9-46fe-b785-2470c72a7cb9" name="Script: SaveRSXM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctpRSXMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_MSL Table_CTP" id="0c07584f-3af3-4c6f-9bdf-702d2a2d4e0a">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>Select * from overstappen.message_logging where 
msl_soap_transaction_id = '${#TestCase#ctpTransactionId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: assert MSL_CLC_ID]" id="e99eef8e-047f-4dff-930b-7b92f2348249">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/MSL_CLC_ID[1]/text()</path>
              <content>57</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="e095441a-3cf8-4288-8e40-4300718feece" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="44bcd1c8-107e-4c9e-bd74-1dc17c3e10cb" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6ff99ba3-5330-4bcd-b803-dd187c4b1449" name="Xpath: assert SoapTransactionId">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_ST_ID/text()</path>
              <content>${#TestCase#ctpId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table_CTP" id="39b2916a-44b0-41a0-b7fb-e3550c1f0175">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier 
where id = '${#TestCase#ctdId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of CTD record" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//CTD_SWITCHID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_process_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_PROCESS_STATUS</path>
              <content>Performed</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_dossier_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_DOSSIER_STATUS</path>
              <content>Completed</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="031d2b57-2c5e-44f1-8519-2ad790ad910a" name="Xpath: verify ctd_ctp_buffering is false">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CTP_BUFFERING[1]</path>
              <content>f</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="c4bd875f-4f7f-4f59-a9bf-7a3068419cb4" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTP" id="58cf1aee-818b-4cb7-9a68-68d291635d40">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where dm_ctd_id = ${#TestCase#ctdId} 
and dm_mst_id=5 
order by createddate desc</con:query>
          <con:assertion type="XPath Match" id="8273aa94-4170-4178-ad8f-472138da1833" name="Xpath: 1">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/IT_INTERFACE_TYPE[1]</path>
              <content>*${#TestSuite#soapVersion}*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="4b5160c8-7fc3-4231-a254-0eabff2e6325" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="bb1c223d-972d-4a25-bb1d-9c9ebc5ff0b6" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/ID/text()</path>
              <content>${#TestCase#ctpDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="50d06482-3f95-4a64-8691-e76998df2ab1" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctpDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_CheckOutGoingMsgType_CTP" id="8f38391a-3a33-43ae-8ba6-c99064341038">
        <con:settings/>
        <con:config>
          <script>def outtype = testRunner.testCase.testSuite.getPropertyValue("recipientOutMsg")

if (outtype == 'EMAIL') {
    	  testRunner.gotoStepByName( "JDBC_SXM Table_NoRecord_CTP")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_CTP" id="585f6d53-66a5-45c3-aceb-d3582fa0588c">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where
sxm_xml_message like '%${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01%'
and sxm_xml_message like '%/${#TestSuit#donorSoapVersion}%'
and sxm_xml_message_type = 'Performed'
and sxm_sender = '${#TestSuite#recipient}'
and sxm_receiver = '${#TestSuite#donor}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [SXM_ID]" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//ID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="f8e35c89-0c68-4076-bce8-6ce48a59016f" name="Contains: Contains">
            <con:configuration>
              <token>&lt;SXM_XML_MESSAGE_TYPE>Performed&lt;/SXM_XML_MESSAGE_TYPE></token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="43016be5-dc37-4d0e-833f-6422f76d414c" name="Xpath: header sender receiver">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/SXM_XML_MESSAGE[1]</path>
              <content><![CDATA[*<header>
      <receiver>
                  <networkoperator>${#TestSuite#donor}</networkoperator>
         	              <serviceprovider>${#TestSuite#donor}</serviceprovider>
               </receiver>
      <sender>
                  <networkoperator>${#TestSuite#recipient}</networkoperator>
         		          <serviceprovider>${#TestSuite#recipient}</serviceprovider>
               </sender>*]]></content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="b2d0a195-6d53-4616-b3d5-0c93d38b4b52" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="978db4e7-f348-4e5f-b8dc-8685b3b05c95" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/SXM_DM_ID/text()</path>
              <content>${#TestCase#ctpDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_CheckOutGoingMsgType1_CTP" id="e5040bc9-44d3-41b1-9e70-10640a835f0e">
        <con:settings/>
        <con:config>
          <script>def outtype = testRunner.testCase.testSuite.getPropertyValue("recipientOutMsg")

if (outtype == 'SOAP') {
    	  testRunner.gotoStepByName( "Delay0")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_NoRecord_CTP" id="86b16bf8-65b5-4672-8ebb-c4430be55554">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where
sxm_xml_message like '%${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01%'
and sxm_xml_message like '%/${#TestSuite#donorSoapVersion}%'
and sxm_xml_message_type = 'Performed'
and sxm_sender = '${#TestSuite#recipient}'
and sxm_receiver = '${#TestSuite#donor}'
--and sxm_retry_count &lt;=1</con:query>
          <con:assertion type="Simple NotContains" id="d71d4bce-938f-48bf-ba21-93c08b8f00cf" name="NotContains: Not Contains">
            <con:configuration>
              <token>&lt;SXM_XML_MESSAGE_TYPE>Performed&lt;/SXM_XML_MESSAGE_TYPE></token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="8939b607-7b85-49a9-b6b8-864afc85eaa6" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="888941f9-a9d1-4ced-8ddf-3dfe4dc0339d" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>0</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_EL Table_CTP" id="d6d1cae8-e8d7-43ae-aa1a-046d9a35682a">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.email_logging el join overstappen.email_logging_detail eld on el.el_detail_id = eld.id where 
el_dm_id = '${#TestCase#ctpDMId}'</con:query>
          <con:assertion type="JDBC Status" id="5b056277-e6ec-404a-99fc-8472b329b9f9" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="08c804f2-1638-4310-89c5-8ddef67cc36e" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_Body">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_BODY/text()</path>
              <content>New Performed received on COMP for ${#TestSuite#Recipient}-${#TestSuite#Donor}-${#TestCase#ContractId}-01*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_SUBJECT">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_SUBJECT/text()</path>
              <content>New Performed received on COMP for ${#TestSuite#Recipient}-${#TestSuite#Donor}-${#TestCase#ContractId}-01</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_REASON">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_REASON/text()</path>
              <content>Performed</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="4e4435dd-077d-4bf1-a0da-0ef46339bb12" name="Xpath: assert Receiver">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_RECEIVER_ID/text()</path>
              <content>${#TestSuite#donorId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Delay0" id="c4b33e6f-ea70-4fce-b6ee-641531acb350">
        <con:settings/>
        <con:config>
          <delay>1</delay>
        </con:config>
      </con:testStep>
      <con:setupScript>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import groovy.time.TimeCategory
def today = new Date() 
def now = today.format("yyyy-MM-dd'T'HH:mm:ss")
def wishdate = today 
use(TimeCategory) {
	   wishdate = wishdate + 1.day
}
def proposeddate = today
use(TimeCategory) {
	   proposeddate = proposeddate + 240.seconds
}
def wishdatestr = wishdate.format("yyyy-MM-dd'T'HH:mm:ss")
def proposeddatestr = proposeddate.format("yyyy-MM-dd'T'HH:mm:ss")
def propdatestr = proposeddate.format("yyyy-MM-dd' 'HH:mm:ss")
testRunner.testCase.setPropertyValue("Now",now)
testRunner.testCase.setPropertyValue("wishDate",wishdatestr)
testRunner.testCase.setPropertyValue("proposedDate",proposeddatestr)
testRunner.testCase.setPropertyValue("propDate",propdatestr)
String contractId = funcHandle.getRandomString()
testRunner.testCase.setPropertyValue("contractId",contractId)</con:setupScript>
      <con:tearDownScript/>
      <con:properties/>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>122d3297-f22d-449f-ac52-c46f1bfb714e</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="D1.2a RecipientSOAPDonorGUIOnly" searchProperties="true" id="afb6b2af-fa69-4a8d-b746-0358538fd790" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:settings>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">1000</con:setting>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting>
      </con:settings>
      <con:testStep type="groovy" name="RecipientSOAPDonorGUIOnly" id="36497e95-67d8-4e62-b287-e2862cde30f1">
        <con:settings/>
        <con:config>
          <script>def RecipientInterface = testRunner.testCase.testSuite.getPropertyValue( "RecipientInterface" )
def DonorInterface = testRunner.testCase.testSuite.getPropertyValue( "DonorInterface" )

if (RecipientInterface.contains("SOAP") &amp;&amp; DonorInterface.equalsIgnoreCase("GUI")){
    	  
} else {
	testRunner.gotoStepByName( "Delay0")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="CTR-Sunny Day" id="f6651f17-970c-40b7-9a8c-2af5c2326b7e">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>CompWebserviceSoap11</con:interface>
          <con:operation>SendMessages</con:operation>
          <con:request name="CTR-Sunny Day" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordText" id="3aa22f8f-37c1-4ea2-ba88-b80068a3761f">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#SoapUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="http://coin.nl/ws/schema">\r
   <soapenv:Header/>
   <soapenv:Body>
      <sch:SendMessagesRequest>
         <sch:Sender>${#TestSuite#recipient}</sch:Sender>
         <sch:Messages>
            <sch:Message>
               <sch:Text><![CDATA[<?xml version="1.0"?>
<message xmlns="http://www.coin.nl/Overstappen_MESSAGES">
<header>
<receiver>
<!--Optional:-->
<networkoperator>${#TestSuite#donor}</networkoperator>
<!--Optional:-->
<serviceprovider>${#TestSuite#donor}</serviceprovider>
</receiver>
<sender>
<!--Optional:-->
<networkoperator>${#TestSuite#recipient}</networkoperator>
<!--Optional:-->
<serviceprovider>${#TestSuite#recipient}</serviceprovider>
</sender>
<!--Optional:-->
<messageid>${#TestSuite#recipient}-${#TestCase#contractId}-01</messageid>
<timestamp>${#TestSuite#TimestampNOW}</timestamp>
</header>
<body>
<contractterminationrequest>
<${#TestSuite#soapVersion}>
<dossierid>${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01</dossierid>
<!--Optional:-->
<recipientserviceprovider>${#TestSuite#recipient}</recipientserviceprovider>
<!--Optional:-->
<recipientnetworkoperator>${#TestSuite#recipient}</recipientnetworkoperator>
<!--Optional:-->
<donornetworkoperator>${#TestSuite#donor}</donornetworkoperator>
<!--Optional:-->
<donorserviceprovider>${#TestSuite#donor}</donorserviceprovider>
<wishdatetime>${#TestCase#wishdate}</wishdatetime>
${#TestSuite#dossierType}
${#TestSuite#compensationOK}
<name>COIN</name>
<addressblock>
 	<postcode>1389SS</postcode>
	<housenr>99999</housenr>
</addressblock>
<numberseries>
     <start>0173112233</start>
     <end>0173112233</end>
</numberseries>
<validationblock>
    <name>contractid</name>
    <value>9-${#TestCase#contractID}</value>
 </validationblock>
<note>Sunny day-sent ${#TestSuite#soapVersion} expect ${#TestSuite#donorSoapVersion}-linenr. ${#TestSuite#lineNumber}</note>
</${#TestSuite#soapVersion}>
</contractterminationrequest>
</body>
</message>]]]]>><![CDATA[</sch:Text>
            </sch:Message>
         </sch:Messages>
      </sch:SendMessagesRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="XPath Match" name="Match content of [ns2:TransactionId] using RegEx" id="1c471417-807a-4012-a734-b2dd5be94c8f">
              <con:configuration>
                <path>declare namespace ns2='http://coin.nl/ws/schema';
//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]/text()</path>
                <content>*</content>
                <allowWildcards>true</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" name="Check count of [ns2:TransactionId]" id="345c96a3-89a0-476e-9875-b0c18e04ef5b">
              <con:configuration>
                <path>declare namespace ns2='http://coin.nl/ws/schema';
count( //ns2:SendMessagesResponse/ns2:TransactionId)</path>
                <content>1</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert node [ns2:TransactionId]" id="63f77b9d-d209-4d74-ad56-a26982ab75c5">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
//def groovyUtilsPro = new com.eviware.soapui.support.GroovyUtilsPro( context )

def holder = new XmlHolder( messageExchange.responseContentAsXml )
holder.namespaces["ns2"] = "http://coin.nl/ws/schema"
def transactionId = holder.getNodeValue( "//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]" )
messageExchange.modelItem.testStep.testCase.setPropertyValue("transactionId",transactionId)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#TestSuite#recipientUserName}</con:username>
              <con:password>${#TestSuite#recipientPassWord}</con:password>
              <con:domain xsi:nil="true"/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://coin.nl/SendMessages"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_ST Table" id="71c5ddb8-2bd0-4c11-9c76-723044bd97e8">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_transactions 
where st_transaction_id = '${#TestCase#transactionId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Verify TransactionId" id="0314e1fa-b1cb-4932-bba8-55dd87029a85">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_TRANSACTION_ID[1]</path>
              <content>${#TestCase#transactionId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify ST_SEND_RECEIVED" id="9db0e630-c611-4fc1-b0bc-fb6028a6a7c3">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_SEND_RECEIVED[1]</path>
              <content>received</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" name="Contains: Contain message Type" id="85caea84-7bde-4674-9d00-009229cb7411">
            <con:configuration>
              <token>contractterminationrequest</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="77af631e-a991-48c5-b7c6-43b4c54de0ad" name="Script: store SoapTransaction.id">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "Id");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="7db1c36f-fcfc-4bbc-b1ec-f901a3b0ec39" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="0d714a93-1143-4b06-a4e8-9f98de60aa51" name="Xpath: assert UserIP" disabled="true">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_IP/text()</path>
              <content>${#Project#UserIP}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="637d7fef-4b6f-4350-800d-ba7d7d0117ba" name="Xpath: assert UserName">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_NAME/text()</path>
              <content>${#TestSuite#recipientUserName}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="06f4d597-3d09-45a6-817f-d816cd031090" name="Xpath: assert TechSender">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_TECHNICAL_SENDER/text()</path>
              <content>${#TestSuite#recipient}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Wait For Poller" id="208742c8-5d06-4680-a6f4-60cce0b0d2d4">
        <con:settings/>
        <con:config>
          <delay>${#TestSuite#PollTime}</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_RSXM Table_CTR" id="deed326b-5b43-4507-91f6-b1293ec7f398">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.raw_soap_xml_messages where rsxm_st_id = '${#TestCase#Id}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: XPath Match" id="14d90270-6f91-4150-993a-d24f2adbd507">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/RSXM_STATUS[1]</path>
              <content>Done</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="f1d8a12b-1ed5-4bc1-a43d-3bda335f99be" name="JDBC Status"/>
          <con:assertion type="GroovyScriptAssertion" id="8626d996-47c3-418e-9452-d6a4e8a3a5d0" name="Script: SaveRSXM_DM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/RSXM_DM_ID[1]", "ctrDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="4b937731-34c5-49d4-8f06-6091f30d2ab8" name="Script: SaveRSXM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctrRSXMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_MSL Table_CTR" id="c378ff61-5708-432d-8002-30cf201edd37">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>Select * from overstappen.message_logging where 
msl_soap_transaction_id = '${#TestCase#transactionId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: assert MSL_CLC_ID]" id="e99eef8e-047f-4dff-930b-7b92f2348249">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/MSL_CLC_ID[1]/text()</path>
              <content>57</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="e095441a-3cf8-4288-8e40-4300718feece" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="f57efed5-4a9e-4d5d-9bac-d88d64b28250" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="a791b62c-68e3-4fb7-b301-a3fbaac6d1e7" name="Xpath: assert SoapTransactionId">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_ST_ID/text()</path>
              <content>${#TestCase#Id}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table_CTR" id="84c292b4-5986-46c4-a94b-bf0ac9d2b77d">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier where 
ctd_switchid = '${#TestSuite#Recipient}-${#TestSuite#Donor}-${#TestCase#ContractId}-01'</con:query>
          <con:assertion type="XPath Match" name="Xpath: assert CTD_DOSSIER_STATUS]" id="ac17d9f6-9653-435c-bd0c-9af6917f2aa6">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_DOSSIER_STATUS[1]/text()</path>
              <content>Pending</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert CTD_PROCESS_STATUS]" id="ede8cc08-99ab-46ca-baf4-97e9f0895428">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_PROCESS_STATUS[1]/text()</path>
              <content>Request</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: assert ion ctd_id">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def ctdid = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctdId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="d8aa7352-7871-4269-99bf-e0e1cee4d057" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTR" id="eb70549b-56b2-40d7-bd85-bb5e376c164b">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where dm_ctd_id = ${#TestCase#ctdId} 
and dm_mst_id=1 
order by createddate desc</con:query>
          <con:assertion type="XPath Match" id="22e366c7-6a4e-4580-9e30-c5cb86194c3d" name="Xpath: SoapVersion">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/IT_INTERFACE_TYPE[1]</path>
              <content>*${#TestSuite#soapVersion}*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="86a055cd-87c0-431a-bfcc-f2f906ee445c" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="f0e0334a-a74b-4594-a5cc-9bef4817130f" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/ID/text()</path>
              <content>${#TestCase#ctrDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="855082da-6cd5-4265-a9f4-212d30b1e262" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctrDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_NoRecord_CTR" id="2a12d60e-876e-42cc-a528-bd02ebc4bbf7">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where
sxm_xml_message like '%${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01%'
and sxm_xml_message_type = 'Request'
and sxm_sender = '${#TestSuite#recipient}'
and sxm_receiver = '${#TestSuite#donor}'</con:query>
          <con:assertion type="JDBC Status" id="2c377262-d921-458d-b152-eab80c489e7e" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="f2e55045-604c-4d10-b06c-7039a60718bf" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>0</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_EL Table_CTR" id="0c6d2c88-473e-461b-831a-dd85b695fac4">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.email_logging el join overstappen.email_logging_detail eld on el.el_detail_id = eld.id where 
el_dm_id = '${#TestCase#ctrDMId}'</con:query>
          <con:assertion type="JDBC Status" id="5b056277-e6ec-404a-99fc-8472b329b9f9" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="08c804f2-1638-4310-89c5-8ddef67cc36e" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_Body">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_BODY/text()</path>
              <content>New Request received on COMP for ${#TestSuite#Recipient}-${#TestSuite#Donor}-${#TestCase#ContractId}-01*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_SUBJECT">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_SUBJECT/text()</path>
              <content>*New Request received on COMP for ${#TestSuite#Recipient}-${#TestSuite#Donor}-${#TestCase#ContractId}-01</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_REASON">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_REASON/text()</path>
              <content>Request</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="4e4435dd-077d-4bf1-a0da-0ef46339bb12" name="Xpath: assert Receiver">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_RECEIVER_ID/text()</path>
              <content>${#TestSuite#donorId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Sel_CTRA ok" id="b4291275-63c7-48f3-820a-3d9ff86be0dc">
        <con:settings/>
        <con:config>
          <script>//Send  CTRA ok for ${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#contractId}-01
//Business: ${#TestSuite#dossierType}
import nl.coin.Selenium.SampleTest;
import nl.coin.Selenium.SeleniumActions;
import nl.coin.Selenium.JavaActions;
def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser")
def recipient = testRunner.testCase.testSuite.getPropertyValue("recipient")
def donor = testRunner.testCase.testSuite.getPropertyValue("donor")
def contractId = testRunner.testCase.getPropertyValue("contractId")
def donorDossierType = testRunner.testCase.testSuite.getPropertyValue("donorDossierType")
def dossierID = javaHandle.getDossierID(recipient, donor, contractId)
log.info dossierID
def projectName = testRunner.testCase.testSuite.project.name
def testSuiteName = testRunner.testCase.testSuite.name
def testCaseName = testRunner.testCase.name
def testStepName = context.getCurrentStep().getLabel()
log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName)
def driver = seleniumHandle.openBrowser(browser);
//Login to application
log.info seleniumHandle.browseURL(guiUrl);
log.info(driver.getTitle());
def sampleArray = seleniumHandle.getCredentials(donor)
log.info seleniumHandle.enterData("HomePage","userName", sampleArray[0]);
log.info seleniumHandle.enterData("HomePage","passWord", sampleArray[1]);
//log.info seleniumHandle.clickObject("HomePage","8HrsSession");
log.info seleniumHandle.clickObject("HomePage","login");
log.info seleniumHandle.clickObject("HomePage","dossiers");
log.info seleniumHandle.clickObject("HomePage","SearchTab");
log.info seleniumHandle.enterData("HomePage","DossierID",dossierID);
sleep(1000)
log.info seleniumHandle.clickObject("HomePage","SearchButton");
log.info seleniumHandle.clickObject("HomePage","ViewDetailsSearch");
//need to add select dropdown code
if (donorDossierType == "&lt;business>Y&lt;/business>"){
	log.info seleniumHandle.enterDataSelectDropDown("HomePage","businessType", "Business");	
log.info seleniumHandle.enterDataSelectDropDownByValue("HomePage","blockingCode", "0");
} else {
	log.info seleniumHandle.enterDataSelectDropDown("HomePage","businessType", "Consumer");
	
log.info seleniumHandle.enterDataSelectDropDownByValue("HomePage","ConsumerCTRAblockingCode", "0");
}
log.info seleniumHandle.enterData("HomePage","requestAnswerNote",dossierID);
sleep(1000)
log.info seleniumHandle.clickObject("HomePage","sendRequestAnswer");
sleep(1000)
log.info seleniumHandle.getText("HomePage","resultMessage");
log.info seleniumHandle.quitBrowser();</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table 1" id="d0bffbce-d808-4abe-9727-c768d81f0f5d">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier 
where id='${#TestCase#ctdId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [ST_TRANSACTION_ID]" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//CTD_SWITCHID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_dossier_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_DOSSIER_STATUS</path>
              <content>Pending</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_process_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_PROCESS_STATUS</path>
              <content>Request Answer OK</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="b2d335d6-98ad-431d-b038-81b8397f6e26" name="JDBC Status"/>
          <con:assertion type="GroovyScriptAssertion" id="4271ec85-309c-4058-b64b-2e7ed1da9acc" name="Script: assert ion">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def ctraid = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctraID");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTRA" id="30bcee21-d8a4-4656-822d-aed151d70198">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where dm_ctd_id = ${#TestCase#ctdId} 
and dm_mst_id=3 
order by createddate desc</con:query>
          <con:assertion type="XQuery Match" id="40cc6fa1-0d78-43c5-a10b-f043ddf625c6" name="XQuery Match">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/IT_INTERFACE_TYPE[1]</path>
              <content>GUI</content>
              <allowWildcards>false</allowWildcards>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="eb3ca4cd-0d91-4992-83c0-13f973c2ed5a" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="2ddcb8b9-efbe-4f5a-9af2-35bbe2669158" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/DM_CTD_ID/text()</path>
              <content>${#TestCase#ctraId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="7386f85c-3e45-4923-86c9-bf4e79fedb03" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctraDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_MSL Table_CTRA" id="cf833336-2c95-4015-b083-e48f31768770">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.message_logging 
where msl_ctd_id=${#TestCase#ctdId} 
and msl_dm_id=${#TestCase#ctradmId}</con:query>
          <con:assertion type="XPath Match" name="Xpath: assert MSL_CLC_ID]" id="e99eef8e-047f-4dff-930b-7b92f2348249">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/MSL_CLC_ID[1]/text()</path>
              <content>57</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="e095441a-3cf8-4288-8e40-4300718feece" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="26a10fc7-0032-44c7-a379-d3aa026bff83" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_check SXM Create_CTRA" id="3e1d7fb2-1df9-4479-91e3-13d679ca32ba">
        <con:settings/>
        <con:config>
          <script>def outtype = testRunner.testCase.testSuite.getPropertyValue("donorOutMsg")

if (outtype == 'EMAIL') {
    	  testRunner.gotoStepByName("JDBC_SXM Table_NoRecord_CTRA")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_CTRA" id="fd7aeadd-2b3b-4b33-a8c3-87dcc45ebbae">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where
sxm_xml_message like '%${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01%'
and sxm_xml_message_type = 'Request answer'
and sxm_sender = '${#TestSuite#donor}'
and sxm_receiver = '${#TestSuite#recipient}'</con:query>
          <con:assertion type="JDBC Status" id="09b22ae1-8f88-48ec-acbd-a7d490b3aff0" name="JDBC Status"/>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [SXM_ID]" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//ID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="48484a4f-1e1a-4b8c-a837-7e7bbb3ed5ae" name="XPath: SoapVersion">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/SXM_XML_MESSAGE[1]/text()</path>
              <content>*&lt;/${#TestSuite#soapVersion}>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_check SXM Create1_CTRA" id="8bd24b8f-c8f1-4b15-b314-5a19eb156594">
        <con:settings/>
        <con:config>
          <script>def outtype = testRunner.testCase.testSuite.getPropertyValue("donorOutMsg")

if (outtype == 'SOAP') {
    	  testRunner.gotoStepByName( "CTCH")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_NoRecord_CTRA" id="13771ea0-a7cb-42d0-86d5-834c077e3d01">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where
sxm_xml_message like '%${#TestCase#switchId}%'
and sxm_xml_message_type = 'Request answer'
and sxm_sender = '${#TestSuite#donor}'
and sxm_receiver = '${#TestSuite#recipient}'</con:query>
          <con:assertion type="JDBC Status" id="14bf4c96-3f27-4539-b785-19d738670e67" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="481154a3-7680-47d7-8834-1d82386eb844" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>0</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_EL Table_CTRA" id="42869408-215c-4da1-b068-7d41f6965f69">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.email_logging el join overstappen.email_logging_detail eld on el.el_detail_id = eld.id where 
el_dm_id = '${#TestCase#ctraDMId}'</con:query>
          <con:assertion type="JDBC Status" id="5b056277-e6ec-404a-99fc-8472b329b9f9" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="08c804f2-1638-4310-89c5-8ddef67cc36e" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_Body">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_BODY/text()</path>
              <content>New Request Answer received on COMP for ${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_SUBJECT">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_SUBJECT/text()</path>
              <content>New Request Answer received on COMP for ${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_REASON">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_REASON/text()</path>
              <content>RequestAnswer</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="4e4435dd-077d-4bf1-a0da-0ef46339bb12" name="Xpath: assert Receiver">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_RECEIVER_ID/text()</path>
              <content>${#TestSuite#recipientId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="CTCH" id="630d03c0-9e83-4929-b3e8-a2569cc68a27">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>CompWebserviceSoap11</con:interface>
          <con:operation>SendMessages</con:operation>
          <con:request name="CTCH" id="83d7229a-676a-4c41-81cc-3429f324fea1" wssPasswordType="PasswordText">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#SoapUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="http://coin.nl/ws/schema">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:SendMessagesRequest>
         <sch:Sender>${#TestSuite#recipient}</sch:Sender>
         <sch:Messages>
            <sch:Message>
               <sch:Text><![CDATA[<?xml version="1.0"?>
<message xmlns="http://www.coin.nl/Overstappen_MESSAGES">
<header>
<receiver>
<serviceprovider>${#TestSuite#donor}</serviceprovider>
</receiver>
<sender>
<serviceprovider>${#TestSuite#recipient}</serviceprovider>
</sender>
<messageid>${#TestSuite#recipient}-${#TestCase#contractId}-001</messageid>
<timestamp>${#TestSuite#TimestampNOW}</timestamp>
</header>
<body>
<change>
<${#TestSuite#soapVersion}>
<dossierid>${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01</dossierid>
<wishdatetime>${#TestCase#proposedDate}</wishdatetime>
<note>Change ${#TestSuite#soapVersion} OK</note>
</${#TestSuite#soapVersion}>
</change>
</body>
</message>]]]]>><![CDATA[</sch:Text>
            </sch:Message>
         </sch:Messages>
      </sch:SendMessagesRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="0408c23d-c32c-480c-b33e-7f633dc17c95"/>
            <con:assertion type="XPath Match" id="611515f4-aa5a-44bb-9038-5efb4661d656" name="XPath Match">
              <con:configuration>
                <path>declare namespace ns2='http://coin.nl/ws/schema';
//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]/text()</path>
                <content>*</content>
                <allowWildcards>true</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="4c4aa14b-781b-4325-8f36-84e716be7574" name="Script Assertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
//def groovyUtilsPro = new com.eviware.soapui.support.GroovyUtilsPro( context )

def holder = new XmlHolder( messageExchange.responseContentAsXml )
holder.namespaces["ns2"] = "http://coin.nl/ws/schema"
def transactionId = holder.getNodeValue( "//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]" )
messageExchange.modelItem.testStep.testCase.setPropertyValue("ctchTransactionId",transactionId)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#TestSuite#recipientUserName}</con:username>
              <con:password>${#TestSuite#recipientPassWord}</con:password>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_ST Table CTCH" id="65b374c0-e3f4-4753-ae62-dd6f0cfd0d20">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_transactions 
where st_transaction_id = '${#TestCase#ctchTransactionId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Verify TransactionId" id="0314e1fa-b1cb-4932-bba8-55dd87029a85">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_TRANSACTION_ID[1]</path>
              <content>${#TestCase#ctchTransactionId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify ST_SEND_RECEIVED" id="9db0e630-c611-4fc1-b0bc-fb6028a6a7c3">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_SEND_RECEIVED[1]</path>
              <content>received</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" name="Contains: Contain message Type" id="85caea84-7bde-4674-9d00-009229cb7411">
            <con:configuration>
              <token>change</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script: assert node [ID]" id="919aa515-934c-4b10-bd9d-dcd08c81b41c">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctchId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="536c932a-ec2b-4a41-a82c-1e0b893420da" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="62a92cf4-098c-4225-b3a3-aaedfc74f454" name="Xpath: assert UserIP" disabled="true">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_IP/text()</path>
              <content>${#Project#UserIP}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6c77e4af-f0a1-45b4-84bd-26b35c497e9b" name="Xpath: assert UserName">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_NAME/text()</path>
              <content>${#TestSuite#recipientUserName}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="34cdcaaf-6545-4ea2-be40-896a24ac8ff5" name="Xpath: assert TechSender">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_TECHNICAL_SENDER/text()</path>
              <content>${#TestSuite#recipient}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Wait For Send Poller 3" id="efe0ac5e-80a5-43fc-8c77-9b65ebaecb93">
        <con:settings/>
        <con:config>
          <delay>${#TestSuite#PollTime}</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_RSXM Table_CTCH" id="dda02f18-8c61-4891-8a57-1de63070db92">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.raw_soap_xml_messages where rsxm_st_id = '${#TestCase#ctchId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: XPath Match" id="14d90270-6f91-4150-993a-d24f2adbd507">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/RSXM_STATUS[1]</path>
              <content>Done</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="cef1de67-f91b-44c8-8eb2-02632fc894c8" name="JDBC Status"/>
          <con:assertion type="GroovyScriptAssertion" id="f1a3eb7a-2d84-4ce0-92b5-02ea84e76c93" name="Script: SaveRSXM_DM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/RSXM_DM_ID[1]", "ctrDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="5cac7e14-8dd9-42ee-97fa-17260d1d69d8" name="Script: SaveRSXM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctchRSXMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_MSL Table_CTCH" id="8f8a76a9-ffbe-44f1-a910-7c371d52f5dd">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>Select * from overstappen.message_logging where 
msl_soap_transaction_id = '${#TestCase#ctchTransactionId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: assert MSL_CLC_ID]" id="e99eef8e-047f-4dff-930b-7b92f2348249">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/MSL_CLC_ID[1]/text()</path>
              <content>57</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="e095441a-3cf8-4288-8e40-4300718feece" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="ddae2cf0-0368-42a1-bada-4e4233433426" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="17a36732-fba0-49df-b03b-ca321c1c0b4d" name="Xpath: assert SoapTransactionId">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_ST_ID/text()</path>
              <content>${#TestCase#ctchId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table_CTCH" id="715d72a4-d167-451d-a31b-a8a43c25d3d0">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier 
where id='${#TestCase#ctdId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of CTD record" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//CTD_SWITCHID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_dossier_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_DOSSIER_STATUS</path>
              <content>Pending</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_process_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_PROCESS_STATUS</path>
              <content>Change</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6c735671-36ae-48e4-8841-34f83e3f1b4e" name="Xpath: XPath Match">
            <con:configuration>
              <path>//CTD_CTCH_WISHDATETIME</path>
              <content>${#TestCase#propDate}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="dca9796f-f928-4ad7-9f25-001add2a87b9" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTCH" id="3c27e72e-5398-4000-8a7d-5e0df5cd0327">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where dm_ctd_id = ${#TestCase#ctdId} 
and dm_mst_id=7 
order by createddate desc</con:query>
          <con:assertion type="XPath Match" id="2f7d35d5-6695-4e22-aecf-3764a6a3f60c" name="Xpath: 1">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/IT_INTERFACE_TYPE[1]</path>
              <content>*${#TestSuite#soapVersion}*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="37df4363-584d-4809-81bd-8ecd535e2b40" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="f3cb166c-36a7-49aa-bb1f-ee8be8c8cd80" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/ID/text()</path>
              <content>${#TestCase#ctrDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="5be081ea-d382-481b-b91b-07a5211858db" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctchDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_NoRecord_CTCH" id="d17015a3-4522-4191-b339-b2e33b64f506">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where
sxm_xml_message like '%${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01%'
and sxm_xml_message_type = 'Change'
and sxm_sender = '${#TestSuite#recipient}'
and sxm_receiver = '${#TestSuite#donor}'</con:query>
          <con:assertion type="JDBC Status" id="c4d30bfb-c3cc-4542-b887-e7daa215344f" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="ebaae9e2-b58a-4c9b-a0de-003b8c89de81" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>0</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_EL Table_CTCH" id="442c9eb6-eacc-478f-a16b-0a9ef7f1f0ce">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.email_logging el join overstappen.email_logging_detail eld on el.el_detail_id = eld.id where 
el_dm_id = '${#TestCase#ctchDMId}'</con:query>
          <con:assertion type="JDBC Status" id="5b056277-e6ec-404a-99fc-8472b329b9f9" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="08c804f2-1638-4310-89c5-8ddef67cc36e" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_Body">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_BODY/text()</path>
              <content>New Change received on COMP for ${#TestSuite#Recipient}-${#TestSuite#Donor}-${#TestCase#ContractId}-01*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_SUBJECT">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_SUBJECT/text()</path>
              <content>New Change received on COMP for ${#TestSuite#Recipient}-${#TestSuite#Donor}-${#TestCase#ContractId}-01</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_REASON">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_REASON/text()</path>
              <content>Change</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="4e4435dd-077d-4bf1-a0da-0ef46339bb12" name="Xpath: assert Receiver">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_RECEIVER_ID/text()</path>
              <content>${#TestSuite#donorId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Sel_CTCHA ok" id="ab0de9d2-7912-460d-9882-fcc97b86250f">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.*;

def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def funcHandle = new ReadymadeFunctions();

def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser")
def recipient = testRunner.testCase.testSuite.getPropertyValue("recipient")
def donor = testRunner.testCase.testSuite.getPropertyValue("donor")
def contractId = testRunner.testCase.getPropertyValue("contractId")
def dossierID = javaHandle.getDossierID(recipient, donor, contractId)
//def proposedDate = testRunner.testCase.getPropertyValue("proposedDate")

def projectName = testRunner.testCase.testSuite.project.name;
def testSuiteName = testRunner.testCase.testSuite.name;
def testCaseName = testRunner.testCase.name;
def testStepName = context.getCurrentStep().getLabel();

log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName);

try {
	funcHandle.sendCTCHA(seleniumHandle, javaHandle, browser, guiUrl, donor, dossierID, "0", null);
} catch (Exception e) {
	testRunner.fail(e.getClass().getSimpleName());
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Wait For Poller 4" id="277c4329-4f59-432f-a193-7a24774d3ad3">
        <con:settings/>
        <con:config>
          <delay>${#TestSuite#PollTime}</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table_CTCHA-ok" id="b1198430-f5ea-44dd-8bc8-fafb9f198de0">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier 
where id='${#TestCase#ctdId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of CTD record" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//CTD_SWITCHID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_dossier_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_DOSSIER_STATUS</path>
              <content>Pending</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_process_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_PROCESS_STATUS</path>
              <content>Change Answer OK</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="d39811c4-2232-47ee-ba08-6ba3ca210866" name="Xpath: XPath Match">
            <con:configuration>
              <path>//CTD_REQUESTEDDATETIME</path>
              <content>${#TestCase#propDate}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="af8a9c23-57b9-4f46-a2f0-69bcd2ab4af3" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTCHA" id="fa12719d-3fa8-4e54-8ab6-21ec66a7a555">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where dm_ctd_id = ${#TestCase#ctdId} 
and dm_mst_id=9 
order by createddate desc</con:query>
          <con:assertion type="XPath Match" id="8af8dc75-df09-4ea0-b7eb-67cc0baa0261" name="Xpath: 1">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/IT_INTERFACE_TYPE[1]</path>
              <content>GUI</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="bd859157-dcc5-4ef6-9e3c-d9b4efb1f01c" name="JDBC Status"/>
          <con:assertion type="GroovyScriptAssertion" id="5a31d744-1db8-481d-9c68-030bce64e9a2" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctchaDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_MSL Table_CTCHA" id="fb53d618-6afe-4e3a-a7e6-98396d71534e">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.message_logging 
where msl_ctd_id=${#TestCase#ctdId} 
and msl_dm_id=${#TestCase#ctchadmId}</con:query>
          <con:assertion type="XPath Match" name="Xpath: assert MSL_CLC_ID]" id="e99eef8e-047f-4dff-930b-7b92f2348249">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/MSL_CLC_ID[1]/text()</path>
              <content>57</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="e095441a-3cf8-4288-8e40-4300718feece" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="26a10fc7-0032-44c7-a379-d3aa026bff83" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_check SXM Create_CTCHA" id="3cae0fb9-da0f-4d38-a047-3aa485c8262e">
        <con:settings/>
        <con:config>
          <script>def outtype = testRunner.testCase.testSuite.getPropertyValue("donorOutMsg")

if (outtype == 'EMAIL') {
    	  testRunner.gotoStepByName("JDBC_SXM Table_NoRecord_CTCHA")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_CTCHA" id="e4a4d064-4f7a-41e3-8648-b20281aafebb">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where 
sxm_xml_message like '%${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01%'
and sxm_xml_message like '%&lt;blocking>N&lt;/blocking>%'
and sxm_xml_message_type = 'Change answer'
and sxm_sender = '${#TestSuite#donor}'
and sxm_receiver = '${#TestSuite#recipient}'</con:query>
          <con:assertion type="JDBC Status" id="19f6e252-7356-4c05-9f21-4ac8436f2557" name="JDBC Status"/>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [SXM_ID]" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//ID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" id="d469bbc6-672b-4bb0-b643-aba122a2e2c8" name="Contains: wishdatetime">
            <con:configuration>
              <token>${#TestCase#proposedDate}&amp;lt;/wishdatetime&amp;gt;</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple NotContains" id="5cfb22ae-1b02-4152-96f0-ff18cd894bca" name="NotContains: no proposedatetime">
            <con:configuration>
              <token>&amp;lt;/proposeddatetime&amp;gt;</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="7e51312e-ff87-4be1-87e0-9fc542f430d6" name="Xpath: header sender receiver">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/SXM_XML_MESSAGE[1]</path>
              <content><![CDATA[*<header>
      <receiver>
                  <networkoperator>${#TestSuite#recipient}</networkoperator>
         	              <serviceprovider>${#TestSuite#recipient}</serviceprovider>
               </receiver>
      <sender>
                  <networkoperator>${#TestSuite#donor}</networkoperator>
         		          <serviceprovider>${#TestSuite#donor}</serviceprovider>
               </sender>*]]></content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="18c6cfb2-213b-4206-b98f-7d89ed896be6" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/SXM_DM_ID/text()</path>
              <content>${#TestCase#ctchaDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="bf6b4b97-103e-462f-a10e-96d0cdacf08b" name="XPath Match">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/SXM_XML_MESSAGE[1]/text()</path>
              <content>*&lt;/${#TestSuite#soapVersion}>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_check SXM Create1_CTCHA" id="4504ab9e-6e1a-4f77-b70b-bf62f12591cd">
        <con:settings/>
        <con:config>
          <script>def outtype = testRunner.testCase.testSuite.getPropertyValue("donorOutMsg")

if (outtype == 'SOAP') {
    	  testRunner.gotoStepByName( "CTP")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_NoRecord_CTCHA" id="e405f5a8-fc6c-4e0e-85da-177694b19698">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where 
sxm_xml_message like '%${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01%'
and sxm_xml_message like '%&lt;blocking>N&lt;/blocking>%'
and sxm_xml_message_type = 'Change answer'
and sxm_sender = '${#TestSuite#donor}'
and sxm_receiver = '${#TestSuite#recipient}'</con:query>
          <con:assertion type="JDBC Status" id="14bf4c96-3f27-4539-b785-19d738670e67" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="481154a3-7680-47d7-8834-1d82386eb844" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>0</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_EL Table_CTCHA" id="8cdb2efd-4852-4c23-a10a-c13d7fedaa20">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.email_logging el join overstappen.email_logging_detail eld on el.el_detail_id = eld.id where 
el_dm_id = '${#TestCase#ctchaDMId}'</con:query>
          <con:assertion type="JDBC Status" id="5b056277-e6ec-404a-99fc-8472b329b9f9" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="08c804f2-1638-4310-89c5-8ddef67cc36e" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_Body">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_BODY/text()</path>
              <content>New Change Answer received on COMP for ${#TestCase#switchId}*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_SUBJECT">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_SUBJECT/text()</path>
              <content>New Change Answer received on COMP for ${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_REASON">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_REASON/text()</path>
              <content>ChangeAnswer</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="4e4435dd-077d-4bf1-a0da-0ef46339bb12" name="Xpath: assert Receiver">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_RECEIVER_ID/text()</path>
              <content>${#TestSuite#recipientId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="CTP" id="09980fd2-6e69-44ba-b51c-724face5b0ea">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>CompWebserviceSoap11</con:interface>
          <con:operation>SendMessages</con:operation>
          <con:request name="CTP" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="PasswordText" id="3aa22f8f-37c1-4ea2-ba88-b80068a3761f">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#SoapUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="http://coin.nl/ws/schema">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <sch:SendMessagesRequest>\r
         <sch:Sender>${#TestSuite#recipient}</sch:Sender>\r
         <sch:Messages>\r
            <sch:Message>\r
               <sch:Text><![CDATA[<?xml version="1.0"?>
<message xmlns="http://www.coin.nl/Overstappen_MESSAGES">
<header>
<receiver>
<!--Optional:-->
<networkoperator>${#TestSuite#donor}</networkoperator>
<!--Optional:-->
<serviceprovider>${#TestSuite#donor}</serviceprovider>
</receiver>
<sender>
<!--Optional:-->
<networkoperator>${#TestSuite#recipient}</networkoperator>
<!--Optional:-->
<serviceprovider>${#TestSuite#recipient}</serviceprovider>
</sender>
<!--Optional:-->
<messageid>${#TestSuite#recipient}-${#TestCase#ContractId}-003</messageid>
<timestamp>${#TestSuite#TimestampNOW}</timestamp>
</header>
<body>
<contractterminationperformed>
<${#TestSuite#soapVersion}>
<dossierid>${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01</dossierid>
<actualdatetime>${#TestSuite#TimestampNOW}</actualdatetime>
<note>performed sent ${#TestSuite#soapVersion}, expect ${#TestSuite#donorSoapVersion}</note>
</${#TestSuite#soapVersion}>
</contractterminationperformed>
</body>
</message>]]]]>><![CDATA[</sch:Text>\r
            </sch:Message>\r
         </sch:Messages>\r
      </sch:SendMessagesRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request>
            <con:assertion type="XPath Match" name="Match content of [ns2:TransactionId] using RegEx" id="1c471417-807a-4012-a734-b2dd5be94c8f">
              <con:configuration>
                <path>declare namespace ns2='http://coin.nl/ws/schema';
//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]/text()</path>
                <content>*</content>
                <allowWildcards>true</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" name="Check count of [ns2:TransactionId]" id="345c96a3-89a0-476e-9875-b0c18e04ef5b">
              <con:configuration>
                <path>declare namespace ns2='http://coin.nl/ws/schema';
count( //ns2:SendMessagesResponse/ns2:TransactionId)</path>
                <content>1</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" name="Assert node [ns2:TransactionId]" id="63f77b9d-d209-4d74-ad56-a26982ab75c5">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
//def groovyUtilsPro = new com.eviware.soapui.support.GroovyUtilsPro( context )

def holder = new XmlHolder( messageExchange.responseContentAsXml )
holder.namespaces["ns2"] = "http://coin.nl/ws/schema"
def transactionId = holder.getNodeValue( "//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]" )
messageExchange.modelItem.testStep.testCase.setPropertyValue("ctpTransactionId",transactionId)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#TestSuite#recipientUserName}</con:username>
              <con:password>${#TestSuite#recipientPassWord}</con:password>
              <con:domain xsi:nil="true"/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508" action="http://coin.nl/SendMessages"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_ST Table CTP" id="57547b02-9208-4e96-b7a2-cdfdc453f5dc">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_transactions 
where st_transaction_id = '${#TestCase#ctpTransactionId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Verify TransactionId" id="0314e1fa-b1cb-4932-bba8-55dd87029a85">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_TRANSACTION_ID[1]</path>
              <content>${#TestCase#ctpTransactionId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify ST_SEND_RECEIVED" id="9db0e630-c611-4fc1-b0bc-fb6028a6a7c3">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_SEND_RECEIVED[1]</path>
              <content>received</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" name="Contains: Contain message Type" id="85caea84-7bde-4674-9d00-009229cb7411">
            <con:configuration>
              <token>contractterminationperformed</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script: assert node [ID]" id="919aa515-934c-4b10-bd9d-dcd08c81b41c">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctpId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="cdf71928-4f2d-439e-9755-22b3e1d12bf1" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="4dcac48f-4ae9-4d7c-8bb3-a374c5278725" name="Xpath: assert UserIP" disabled="true">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_IP/text()</path>
              <content>${#Project#UserIP}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="7b79d9d6-ca0a-4e44-b56f-276ad51188e9" name="Xpath: assert UserName">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_NAME/text()</path>
              <content>${#TestSuite#recipientUserName}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="c1e9649c-7c47-4069-9adc-768ba69030e7" name="Xpath: assert TechSender">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_TECHNICAL_SENDER/text()</path>
              <content>${#TestSuite#recipient}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Wait For Poller 1" id="a401a124-a461-4e16-84c9-601c7d090942">
        <con:settings/>
        <con:config>
          <delay>${#TestSuite#PollTime}</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_RSXM Table_CTP" id="8d53acac-7458-49c7-b8f5-42c7f7cf6cc5">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.raw_soap_xml_messages where rsxm_st_id = '${#TestCase#ctpId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: XPath Match" id="14d90270-6f91-4150-993a-d24f2adbd507">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/RSXM_STATUS[1]</path>
              <content>Done</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="d97f5a0c-1691-4fef-b90a-be122d568dc2" name="JDBC Status"/>
          <con:assertion type="GroovyScriptAssertion" id="e88044e5-e189-4cb7-91b2-da9332eaf6c6" name="Script: SaveRSXM_DM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/RSXM_DM_ID[1]", "ctpDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="82c91da9-6477-4189-b591-8b2edc8acdf4" name="Script: SaveRSXM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctpRSXMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_MSL Table_CTP" id="24ee22b4-73a6-49c3-ba84-9a35261f015f">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>Select * from overstappen.message_logging where 
msl_soap_transaction_id = '${#TestCase#ctpTransactionId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: assert MSL_CLC_ID]" id="e99eef8e-047f-4dff-930b-7b92f2348249">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/MSL_CLC_ID[1]/text()</path>
              <content>57</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="e095441a-3cf8-4288-8e40-4300718feece" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="44bcd1c8-107e-4c9e-bd74-1dc17c3e10cb" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6ff99ba3-5330-4bcd-b803-dd187c4b1449" name="Xpath: assert SoapTransactionId">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_ST_ID/text()</path>
              <content>${#TestCase#ctpId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table_CTP" id="8a172511-33e1-41d7-9c1a-a9e64de4bfb5">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier 
where id = '${#TestCase#ctdId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of CTD record" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//CTD_SWITCHID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_process_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_PROCESS_STATUS</path>
              <content>Performed</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_dossier_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_DOSSIER_STATUS</path>
              <content>Completed</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="031d2b57-2c5e-44f1-8519-2ad790ad910a" name="Xpath: verify ctd_ctp_buffering is false">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CTP_BUFFERING[1]</path>
              <content>f</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="c4bd875f-4f7f-4f59-a9bf-7a3068419cb4" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTP" id="365746b1-87ec-4715-aef2-7a45c1baa85e">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where dm_ctd_id = ${#TestCase#ctdId} 
and dm_mst_id=5 
order by createddate desc</con:query>
          <con:assertion type="XPath Match" id="8273aa94-4170-4178-ad8f-472138da1833" name="Xpath: 1">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/IT_INTERFACE_TYPE[1]</path>
              <content>*${#TestSuite#soapVersion}*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="4b5160c8-7fc3-4231-a254-0eabff2e6325" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="bb1c223d-972d-4a25-bb1d-9c9ebc5ff0b6" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/ID/text()</path>
              <content>${#TestCase#ctpDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="abf35449-731f-4f29-8b80-bceea0251249" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctpDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_NoRecord_CTP" id="d2e5617c-beb2-421a-b976-bac4183708bc">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where
sxm_xml_message like '%${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#ContractId}-01%'
and sxm_xml_message_type = 'Performed'
and sxm_sender = '${#TestSuite#recipient}'
and sxm_receiver = '${#TestSuite#donor}'
--and sxm_retry_count &lt;=1</con:query>
          <con:assertion type="JDBC Status" id="8939b607-7b85-49a9-b6b8-864afc85eaa6" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="888941f9-a9d1-4ced-8ddf-3dfe4dc0339d" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>0</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_EL Table_CTP" id="067c7b78-bd0a-4ee1-b522-c2c795ec2c65">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.email_logging el join overstappen.email_logging_detail eld on el.el_detail_id = eld.id where 
el_dm_id = '${#TestCase#ctpDMId}'</con:query>
          <con:assertion type="JDBC Status" id="5b056277-e6ec-404a-99fc-8472b329b9f9" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="08c804f2-1638-4310-89c5-8ddef67cc36e" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_Body">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_BODY/text()</path>
              <content>New Performed received on COMP for ${#TestSuite#Recipient}-${#TestSuite#Donor}-${#TestCase#ContractId}-01*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_SUBJECT">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_SUBJECT/text()</path>
              <content>New Performed received on COMP for ${#TestSuite#Recipient}-${#TestSuite#Donor}-${#TestCase#ContractId}-01</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_REASON">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_REASON/text()</path>
              <content>Performed</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="4e4435dd-077d-4bf1-a0da-0ef46339bb12" name="Xpath: assert Receiver">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_RECEIVER_ID/text()</path>
              <content>${#TestSuite#donorId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Delay0" id="0986d3d8-5922-4d4e-9499-7e067a8bf476">
        <con:settings/>
        <con:config>
          <delay>1</delay>
        </con:config>
      </con:testStep>
      <con:setupScript>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import groovy.time.TimeCategory
def today = new Date() 
def now = today.format("yyyy-MM-dd'T'HH:mm:ss")
def wishdate = today 
use(TimeCategory) {
	   wishdate = wishdate + 1.days
}
def proposeddate = today
use(TimeCategory) {
	   proposeddate = proposeddate + 180.seconds
}
def wishdatestr = wishdate.format("yyyy-MM-dd'T'HH:mm:ss")
def proposeddatestr = proposeddate.format("yyyy-MM-dd'T'HH:mm:ss")
def propdatestr = proposeddate.format("yyyy-MM-dd' 'HH:mm:ss")
testRunner.testCase.setPropertyValue("Now",now)
testRunner.testCase.setPropertyValue("wishDate",wishdatestr)
testRunner.testCase.setPropertyValue("proposedDate",proposeddatestr)
testRunner.testCase.setPropertyValue("propDate",propdatestr)
String contractId = funcHandle.getRandomString()
testRunner.testCase.setPropertyValue("contractId",contractId)</con:setupScript>
      <con:tearDownScript/>
      <con:properties/>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>122d3297-f22d-449f-ac52-c46f1bfb714e</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="D1.2b RecipientGUIDonorSOAP_BusinessGuiOnly_BusinessReq" searchProperties="true" id="4f76bfa6-70fb-4d82-a308-f1b82bc5954c" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:settings>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">1000</con:setting>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting>
      </con:settings>
      <con:testStep type="groovy" name="RecipientGUIDonorSOAP_BusinessGuiOnly_BusinessReq" id="15cccaee-5379-480f-9f33-96622bd4e5cf">
        <con:settings/>
        <con:config>
          <script><![CDATA[def RecipientInterface = testRunner.testCase.testSuite.getPropertyValue( "RecipientInterface" )
def DonorInterface = testRunner.testCase.testSuite.getPropertyValue( "DonorInterface" )

def dossierType = testRunner.testCase.testSuite.getPropertyValue( "dossierType" )
def busguionly = testRunner.testCase.testSuite.getPropertyValue( "BusinessGuiOnly" )

if (RecipientInterface.contains("GUI") && !RecipientInterface.equalsIgnoreCase("GUI") && DonorInterface.contains("SOAP") && dossierType == '<business>Y</business>' && busguionly == 'true'){
    	  
} else {
	testRunner.gotoStepByName( "Delay0")
}]]></script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Sel_CTR" id="b9b8652a-baec-4060-9f89-53ca0b92c1c1">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.*;

def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def funcHandle = new ReadymadeFunctions();

def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser")
def recipient = testRunner.testCase.testSuite.getPropertyValue("recipient")
def donor = testRunner.testCase.testSuite.getPropertyValue("donor")
def contractId = testRunner.testCase.getPropertyValue("contractId")
def dossierType = testRunner.testCase.testSuite.getPropertyValue("dossierType")
def wishDate = testRunner.testCase.getPropertyValue("wishDate")

def projectName = testRunner.testCase.testSuite.project.name
def testSuiteName = testRunner.testCase.testSuite.name
def testCaseName = testRunner.testCase.name
def testStepName = context.getCurrentStep().getLabel()

log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName)

try {
	def switchId = funcHandle.sendCTR(seleniumHandle, javaHandle, browser, guiUrl, recipient, donor, contractId, dossierType, wishDate);

	testRunner.testCase.setPropertyValue("switchId",switchId);
} catch (Exception e) {
	testRunner.fail(e.getClass().getSimpleName());
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table_CTR" id="9f0ff368-3165-4c66-943d-684164849a30">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier 
where ctd_switchid = '${#TestCase#switchId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: assert CTD_DOSSIER_STATUS]" id="ac17d9f6-9653-435c-bd0c-9af6917f2aa6">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_DOSSIER_STATUS[1]/text()</path>
              <content>Pending</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert CTD_PROCESS_STATUS]" id="ede8cc08-99ab-46ca-baf4-97e9f0895428">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_PROCESS_STATUS[1]/text()</path>
              <content>Request</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: assert ion ctd_id switchid">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def ctdid = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctdId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="19026b41-ccca-4883-97c3-823163e38824" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTR" id="efda895a-0d54-45f7-8f8f-09e1f44dc122">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where dm_ctd_id = ${#TestCase#ctdId} 
and dm_mst_id=1 
order by createddate desc</con:query>
          <con:assertion type="XPath Match" id="22e366c7-6a4e-4580-9e30-c5cb86194c3d" name="Xpath: SoapVersion">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/IT_INTERFACE_TYPE[1]</path>
              <content>GUI</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="5cb6bed4-aa52-4dfc-bd1e-09609461ec9b" name="JDBC Status"/>
          <con:assertion type="GroovyScriptAssertion" id="e6d48642-905b-421c-ae06-155b9f37e6d2" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctrDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_MSL Table_CTR" id="1266a8d1-faf4-469b-ba25-ba8c9fdfe2a3">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.message_logging 
where msl_ctd_id=${#TestCase#ctdId} 
and msl_dm_id=${#TestCase#ctrdmId}</con:query>
          <con:assertion type="XPath Match" name="Xpath: assert MSL_CLC_ID]" id="e99eef8e-047f-4dff-930b-7b92f2348249">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/MSL_CLC_ID[1]/text()</path>
              <content>57</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="e095441a-3cf8-4288-8e40-4300718feece" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="26a10fc7-0032-44c7-a379-d3aa026bff83" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_CheckOutGoingMsgType" id="ce70fa31-68c0-4fbb-8902-0369ac63493a">
        <con:settings/>
        <con:config>
          <script>def outtype = testRunner.testCase.testSuite.getPropertyValue("recipientOutMsg")

if (outtype == 'EMAIL') {
    	  testRunner.gotoStepByName( "JDBC_SXM Table_NoRecord_CTR")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_CTR" id="b69b93ed-d7a5-4f8a-8338-b347ab1991f4">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where
sxm_xml_message like '%${#TestCase#switchId}%'
and sxm_xml_message_type = 'Request'
and sxm_sender = '${#TestSuite#recipient}'
and sxm_receiver = '${#TestSuite#donor}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [ST_TRANSACTION_ID]" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//ID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" name="Contains: Contains" id="a1e1b0ed-fff7-4f8c-9eba-dee62ae7b198">
            <con:configuration>
              <token>contractterminationrequest</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6c4dac59-737d-4969-bf30-85d9166e950e" name="Xpath: 1">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/SXM_XML_MESSAGE[1]</path>
              <content>*&lt;/${#TestSuite#donorSoapVersion}>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="3ccbb5f8-44c9-4b03-b8f6-53810791432b" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="ec149c4f-2d75-4b3b-a5fb-66d71dedab94" name="Xpath: assert DMId" disabled="true">
            <con:configuration>
              <path>/Results/ResultSet/Row/SXM_DM_ID/text()</path>
              <content>${#TestCase#ctrDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6e0b600f-caf3-458e-b3ff-d4e6b3cb5a87" name="Xpath: assert SXMID" disabled="true">
            <con:configuration>
              <path>/Results/ResultSet/Row/ID/text()</path>
              <content>${#TestCase#stSXMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_CheckOutGoingMsgType1" id="a8e3a48c-e58e-48df-aeeb-ef68d5076bb8">
        <con:settings/>
        <con:config>
          <script>def outtype = testRunner.testCase.testSuite.getPropertyValue("recipientOutMsg")

if (outtype == 'SOAP') {
    	  testRunner.gotoStepByName( "CTRA-ok")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_NoRecord_CTR" id="8cc4c868-7011-46fb-b8b8-b398ec1e08c2">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where
sxm_xml_message like '%${#TestCase#switchId}%'
and sxm_xml_message_type = 'Request'
and sxm_sender = '${#TestSuite#recipient}'
and sxm_receiver = '${#TestSuite#donor}'</con:query>
          <con:assertion type="JDBC Status" id="79ddb734-e96d-44bc-897c-fb57b90350ca" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="b59bf65a-290f-4cd1-acea-88560508a0ed" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>0</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_EL Table_CTR" id="6067b927-5791-49f8-9226-1d080ba017f0">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.email_logging el join overstappen.email_logging_detail eld on el.el_detail_id = eld.id where 
el_dm_id = '${#TestCase#ctrDMId}'</con:query>
          <con:assertion type="JDBC Status" id="5b056277-e6ec-404a-99fc-8472b329b9f9" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="08c804f2-1638-4310-89c5-8ddef67cc36e" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_Body">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_BODY/text()</path>
              <content>New Request received on COMP for ${#TestCase#switchId}*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_SUBJECT">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_SUBJECT/text()</path>
              <content>*New Request received on COMP for ${#TestCase#switchId}</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_REASON">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_REASON/text()</path>
              <content>Request</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="4e4435dd-077d-4bf1-a0da-0ef46339bb12" name="Xpath: assert Receiver">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_RECEIVER_ID/text()</path>
              <content>${#TestSuite#donorId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="CTRA-ok" id="ce5accad-164d-4483-94d6-645989b251b5">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>CompWebserviceSoap11</con:interface>
          <con:operation>SendMessages</con:operation>
          <con:request name="CTRA-ok" id="83d7229a-676a-4c41-81cc-3429f324fea1" wssPasswordType="PasswordText">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#SoapUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="http://coin.nl/ws/schema">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:SendMessagesRequest>
         <sch:Sender>${#TestSuite#donor}</sch:Sender>
         <sch:Messages>
            <sch:Message>
               <sch:Text><![CDATA[<?xml version="1.0"?>
<message xmlns="http://www.coin.nl/Overstappen_MESSAGES">
<header>
<receiver>
<!--Optional:-->
<networkoperator>${#TestSuite#recipient}</networkoperator>
<!--Optional:-->
<serviceprovider>${#TestSuite#recipient}</serviceprovider>
</receiver>
<sender>
<!--Optional:-->
<networkoperator>${#TestSuite#donor}</networkoperator>
<!--Optional:-->
<serviceprovider>${#TestSuite#donor}</serviceprovider>
</sender>
<!--Optional:-->
<messageid>${#TestSuite#donor}-${#TestCase#ContractId}-01</messageid>
<timestamp>${#TestSuite#TimestampNOW}</timestamp>
</header>
<body>
<contractterminationrequestanswer>
<${#TestSuite#donorSoapVersion}>
<dossierid>${#TestCase#switchId}</dossierid>
${#TestSuite#donorDossierType}
<blocking>N</blocking>
<wishdatetime>${#TestCase#wishdate}</wishdatetime>
<blockingcode>0</blockingcode>
<note>Request Answer OK ${#TestSuite#soapVersion} OK</note>
</${#TestSuite#donorSoapVersion}>
</contractterminationrequestanswer>
</body>
</message>]]]]>><![CDATA[</sch:Text>
            </sch:Message>
         </sch:Messages>
      </sch:SendMessagesRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="0408c23d-c32c-480c-b33e-7f633dc17c95"/>
            <con:assertion type="XPath Match" id="8131d7ae-9a5a-491b-aefe-ae2214c93e1b" name="XPath Match">
              <con:configuration>
                <path>declare namespace ns2='http://coin.nl/ws/schema';
//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]/text()</path>
                <content>*</content>
                <allowWildcards>true</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="8fd52b42-3f32-4928-9b32-f521197d004e" name="Script Assertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
//def groovyUtilsPro = new com.eviware.soapui.support.GroovyUtilsPro( context )

def holder = new XmlHolder( messageExchange.responseContentAsXml )
holder.namespaces["ns2"] = "http://coin.nl/ws/schema"
def transactionId = holder.getNodeValue( "//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]" )
messageExchange.modelItem.testStep.testCase.setPropertyValue("ctraTransactionId",transactionId)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#TestSuite#donorUserName}</con:username>
              <con:password>${#TestSuite#donorPassWord}</con:password>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_ST Table CTRA" id="20cb1c82-a33b-42a4-8920-be95b1e3e7c4">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_transactions 
where st_transaction_id = '${#TestCase#ctraTransactionId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Verify TransactionId" id="0314e1fa-b1cb-4932-bba8-55dd87029a85">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_TRANSACTION_ID[1]</path>
              <content>${#TestCase#ctraTransactionId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify ST_SEND_RECEIVED" id="9db0e630-c611-4fc1-b0bc-fb6028a6a7c3">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_SEND_RECEIVED[1]</path>
              <content>received</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" name="Contains: Contain message Type" id="85caea84-7bde-4674-9d00-009229cb7411">
            <con:configuration>
              <token>contractterminationrequestanswer</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script: assert node [ID]" id="919aa515-934c-4b10-bd9d-dcd08c81b41c">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctraId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="86d3842b-e5b8-4f08-b99b-b02e24cf2fc4" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="9ca130cd-0141-4911-925b-c46958e26441" name="Xpath: assert UserIP" disabled="true">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_IP/text()</path>
              <content>${#Project#UserIP}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="718d1492-f757-4043-8ab0-2ffbf41bede6" name="Xpath: assert UserName">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_NAME/text()</path>
              <content>${#TestSuite#donorUserName}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="7f701631-99c8-4eab-84e0-75d46a798fcc" name="Xpath: assert TechSender">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_TECHNICAL_SENDER/text()</path>
              <content>${#TestSuite#donor}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Wait For Poller 2" id="5b6f3e94-83f7-46f2-b94d-d5ffaad268f1">
        <con:settings/>
        <con:config>
          <delay>${#TestSuite#PollTime}</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_RSXM Table_CTRA" id="727db028-f182-471b-a8ab-8818066195b8">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.raw_soap_xml_messages where rsxm_st_id = '${#TestCase#ctraId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: XPath Match" id="14d90270-6f91-4150-993a-d24f2adbd507">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/RSXM_STATUS[1]</path>
              <content>Done</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="e2858a53-2e03-4a40-b0d8-7053e232d1b1" name="JDBC Status"/>
          <con:assertion type="GroovyScriptAssertion" id="3e60cf15-7e20-4bde-b967-e26879ff51af" name="Script: SaveRSXM_DM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/RSXM_DM_ID[1]", "ctrDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="93d87ecb-2b79-4883-b89e-8ec966ab3af3" name="Script: SaveRSXM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctraRSXMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_MSL Table_CTRA" id="9b722fc7-4f04-4c7f-b6af-d98159df6f2c">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>Select * from overstappen.message_logging where 
msl_soap_transaction_id = '${#TestCase#ctraTransactionId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: assert MSL_CLC_ID]" id="e99eef8e-047f-4dff-930b-7b92f2348249">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/MSL_CLC_ID[1]/text()</path>
              <content>57</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="e095441a-3cf8-4288-8e40-4300718feece" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="917d7c50-c8b6-4d99-b6bc-1e5cc45d366c" name="Xpath: assert SoapTransactionId">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_ST_ID/text()</path>
              <content>${#TestCase#ctraId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table 1" id="130266c9-390c-4509-8636-e33f9a94b5cd">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier 
where id='${#TestCase#ctdId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [ST_TRANSACTION_ID]" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//CTD_SWITCHID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_dossier_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_DOSSIER_STATUS</path>
              <content>Pending</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_process_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_PROCESS_STATUS</path>
              <content>Request Answer OK</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="f1634f5b-7b26-4777-9ee7-2012c2678c07" name="Script: assert ion">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def ModifiedDate = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/CONTRACT_TERMINATION_DOSSIER.MODIFIEDDATE[1]", "ModifiedDate");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="f7e313a5-ef5e-4f86-9240-a10a978a2c21" name="Xpath: Verify ctp_buffering">
            <con:configuration>
              <path>//CTD_CTP_BUFFERING</path>
              <content>t</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="56d4b1e0-5f6c-4284-8d93-a944881fab9d" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTRA" id="77ca1f7a-68a0-4214-aa16-012d0494b4c4">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where dm_ctd_id = ${#TestCase#ctdId} 
and dm_mst_id=3 
order by createddate desc</con:query>
          <con:assertion type="XQuery Match" id="40cc6fa1-0d78-43c5-a10b-f043ddf625c6" name="XQuery Match">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/IT_INTERFACE_TYPE[1]</path>
              <content>*${#TestSuite#donorSoapVersion}*</content>
              <allowWildcards>true</allowWildcards>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="150530f7-1461-41ac-a6ba-d3784260b12e" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="a3708109-8254-4704-a509-a126754e4bca" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/ID/text()</path>
              <content>${#TestCase#ctrDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="2e9cba6c-0da8-4023-969e-002fe510345d" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctraDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_check SXM Create_CTRA" id="6db65247-4371-455c-8a10-5711c89d1890">
        <con:settings/>
        <con:config>
          <script>def outtype = testRunner.testCase.testSuite.getPropertyValue("donorOutMsg")

if (outtype == 'EMAIL') {
    	  testRunner.gotoStepByName("JDBC_SXM Table_NoRecord_CTRA")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_CTRA" id="0fbe669c-5d58-4b31-8453-9664c17043dd">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where
sxm_xml_message like '%${#TestCase#switchId}%'
and sxm_xml_message_type = 'Request answer'
and sxm_sender = '${#TestSuite#donor}'
and sxm_receiver = '${#TestSuite#recipient}'</con:query>
          <con:assertion type="JDBC Status" id="09b22ae1-8f88-48ec-acbd-a7d490b3aff0" name="JDBC Status"/>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [SXM_ID]" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//ID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_check SXM Create1_CTRA" id="40973ac1-951c-4ca6-97a4-1a50a36b191e">
        <con:settings/>
        <con:config>
          <script>def outtype = testRunner.testCase.testSuite.getPropertyValue("donorOutMsg")

if (outtype == 'SOAP') {
    	  testRunner.gotoStepByName( "Sel_CTC")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_NoRecord_CTRA" id="0665becf-edaa-4eb8-b4e5-e8e6539dac79">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where
sxm_xml_message like '%${#TestCase#switchId}%'
and sxm_xml_message_type = 'Request answer'
and sxm_sender = '${#TestSuite#donor}'
and sxm_receiver = '${#TestSuite#recipient}'</con:query>
          <con:assertion type="JDBC Status" id="14bf4c96-3f27-4539-b785-19d738670e67" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="481154a3-7680-47d7-8834-1d82386eb844" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>0</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_EL Table_CTRA" id="2e75fb98-871a-4ed2-80af-15dcbb8f5192">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.email_logging el join overstappen.email_logging_detail eld on el.el_detail_id = eld.id where 
el_dm_id = '${#TestCase#ctraDMId}'</con:query>
          <con:assertion type="JDBC Status" id="5b056277-e6ec-404a-99fc-8472b329b9f9" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="08c804f2-1638-4310-89c5-8ddef67cc36e" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_Body">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_BODY/text()</path>
              <content>New Request Answer received on COMP for ${#TestCase#switchId}*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_SUBJECT">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_SUBJECT/text()</path>
              <content>New Request Answer received on COMP for ${#TestCase#switchId}</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_REASON">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_REASON/text()</path>
              <content>RequestAnswer</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="4e4435dd-077d-4bf1-a0da-0ef46339bb12" name="Xpath: assert Receiver">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_RECEIVER_ID/text()</path>
              <content>${#TestSuite#recipientId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Sel_CTC" id="59fc7051-e1f1-42ed-886e-166d500d186a">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.*;

def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def funcHandle = new ReadymadeFunctions();

def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser")
def recipient = testRunner.testCase.testSuite.getPropertyValue("recipient")
def donor = testRunner.testCase.testSuite.getPropertyValue("donor")
def contractId = testRunner.testCase.getPropertyValue("contractId")
def switchId = testRunner.testCase.getPropertyValue("switchId")

def projectName = testRunner.testCase.testSuite.project.name
def testSuiteName = testRunner.testCase.testSuite.name
def testCaseName = testRunner.testCase.name
def testStepName = context.getCurrentStep().getLabel()

log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName)

try {
	funcHandle.sendCTC(seleniumHandle, javaHandle, browser, guiUrl, recipient, switchId);
} catch (Exception e) {
	testRunner.fail(e.getClass().getSimpleName());
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table_CTC" id="b8438b4d-8d2a-4b3f-912b-dea7609f7342">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier 
where id = '${#TestCase#ctdId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of CTD record" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//CTD_SWITCHID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_process_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_PROCESS_STATUS</path>
              <content>Cancel</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_dossier_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_DOSSIER_STATUS</path>
              <content>Cancelled</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="e5674e64-b285-4e2d-b343-7a640c978165" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTC" id="530975bd-117d-4f5e-b72e-cf5925c01dd8">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where dm_ctd_id = ${#TestCase#ctdId} 
and dm_mst_id=11 
order by createddate desc</con:query>
          <con:assertion type="JDBC Status" id="1846bd70-ede9-4406-b758-7f23241ac3aa" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="b199af58-886b-4a43-943e-d947f7528217" name="Xpath: 1">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/IT_INTERFACE_TYPE[1]</path>
              <content>GUI</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="a3c3835a-84ac-4b43-960e-73892f6ef972" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctcDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_MSL Table_CTC" id="7651eabf-53e2-4ffc-99ff-5a22be816867">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.message_logging 
where msl_ctd_id=${#TestCase#ctdId} 
and msl_dm_id=${#TestCase#ctcdmId}</con:query>
          <con:assertion type="XPath Match" name="Xpath: assert MSL_CLC_ID]" id="e99eef8e-047f-4dff-930b-7b92f2348249">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/MSL_CLC_ID[1]/text()</path>
              <content>57</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="e095441a-3cf8-4288-8e40-4300718feece" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="26a10fc7-0032-44c7-a379-d3aa026bff83" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_CheckOutGoingMsgType_CTC" id="b9d2193d-77cf-4131-a740-6300998d6eab">
        <con:settings/>
        <con:config>
          <script>def outtype = testRunner.testCase.testSuite.getPropertyValue("recipientOutMsg")

if (outtype == 'EMAIL') {
	testRunner.gotoStepByName( "JDBC_SXM Table_NoRecord_CTC")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_CTC" id="efca985f-208b-47e2-b7b4-a6faded4f8b2">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where
sxm_xml_message like '%${#TestCase#switchId}%'
and sxm_xml_message_type = 'Cancel'
and sxm_sender = '${#TestSuite#recipient}'
and sxm_receiver = '${#TestSuite#donor}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [SXM_ID]" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//ID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="3e6d13cd-db91-453a-b133-3482c556c87c" name="Xpath: 1">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/SXM_XML_MESSAGE[1]</path>
              <content>*&lt;/${#TestSuite#donorSoapVersion}>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="11ea6756-4d66-4e9b-8fdd-1174a9ba181b" name="Xpath: soap verson">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/SXM_XML_MESSAGE[1]</path>
              <content>*&lt;/${#TestSuite#donorSoapVersion}>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="f14f60c8-81d7-41d5-b77f-79114ea85e64" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="b3bb5a3c-6664-4d19-bf4c-3acea9c8ba09" name="Xpath: assert DMId" disabled="true">
            <con:configuration>
              <path>/Results/ResultSet/Row/SXM_DM_ID/text()</path>
              <content>${#TestCase#ctrDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_CheckOutGoingMsgType1_CTC" id="d689dc62-838f-47da-a81f-e9a2ba71f9ce">
        <con:settings/>
        <con:config>
          <script>def outtype = testRunner.testCase.testSuite.getPropertyValue("recipientOutMsg")

if (outtype == 'SOAP') {
    	  testRunner.gotoStepByName( "Delay0")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="manualTestStep" name="CheckMail" id="6eda7689-3fd4-4273-b596-056fe5867bf8" disabled="true">
        <con:description>Check for ${#TestSuite#donor}  ${#TestCase#switchId} 
if emails for CTR and CTC have arrived.</con:description>
        <con:settings/>
        <con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_NoRecord_CTC" id="d7dbbddc-184b-4462-8e67-b18125133a48">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where
sxm_xml_message like '%${#TestCase#switchId}%'
and sxm_xml_message_type = 'Cancel'
and sxm_sender = '${#TestSuite#recipient}'
and sxm_receiver = '${#TestSuite#donor}'</con:query>
          <con:assertion type="JDBC Status" id="c475aacc-95de-4284-a9f8-4767c70e9910" name="JDBC Status"/>
          <con:assertion type="Simple NotContains" id="d71d4bce-938f-48bf-ba21-93c08b8f00cf" name="NotContains: Not Contains">
            <con:configuration>
              <token>&lt;SXM_XML_MESSAGE_TYPE>Performed&lt;/SXM_XML_MESSAGE_TYPE></token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple NotContains" id="4880fe0a-4e68-405d-a3eb-797bbd832eb2" name="NotContains: no rows">
            <con:configuration>
              <token>&lt;Row rowNumber="1"></token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="02a2c5a8-0d80-4f36-88de-c5ad753114a5" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>0</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_EL Table_CTC" id="19b11e27-3c96-4998-a27f-d3679ec3f37a">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.email_logging el join overstappen.email_logging_detail eld on el.el_detail_id = eld.id where 
el_dm_id = '${#TestCase#ctcDMId}'</con:query>
          <con:assertion type="JDBC Status" id="5b056277-e6ec-404a-99fc-8472b329b9f9" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="08c804f2-1638-4310-89c5-8ddef67cc36e" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_Body">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_BODY/text()</path>
              <content>New Cancel received on COMP for ${#TestCase#switchId}*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_SUBJECT">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_SUBJECT/text()</path>
              <content>New Cancel received on COMP for ${#TestCase#switchId}</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_REASON">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_REASON/text()</path>
              <content>Cancel</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="4e4435dd-077d-4bf1-a0da-0ef46339bb12" name="Xpath: assert Receiver">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_RECEIVER_ID/text()</path>
              <content>${#TestSuite#donorId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Delay0" id="188628bb-7b64-487e-96af-56a802b69ba6">
        <con:settings/>
        <con:config>
          <delay>1</delay>
        </con:config>
      </con:testStep>
      <con:setupScript>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import groovy.time.TimeCategory
import java.util.Random
def today = new Date() 
def now = String.format('%tFT%&lt;tT', new Date() )
def wishdate = today 
use(TimeCategory) {
	   wishdate = wishdate + 1.days
}
def wishdatestr = wishdate.format("yyyy-MM-dd'T'HH:mm:ss")
def guiwishdatestr = wishdate.format("yyyy-MM-dd")
testRunner.testCase.setPropertyValue("Now",now)
testRunner.testCase.setPropertyValue("wishDate",wishdatestr)
testRunner.testCase.setPropertyValue("guiWishDate",guiwishdatestr)
String contractId = funcHandle.getRandomString(9, "4-");
testRunner.testCase.setPropertyValue("contractId",contractId)</con:setupScript>
      <con:tearDownScript/>
      <con:properties/>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>122d3297-f22d-449f-ac52-c46f1bfb714e</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="D1.2b RecipientGUIDonorGUIOnly" searchProperties="true" id="330f492e-9ec2-4f53-9cd0-4fb73516b4f1" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:settings>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">1000</con:setting>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting>
      </con:settings>
      <con:testStep type="groovy" name="RecipientGUIDonorGUIOnly" id="f12e83d2-52d6-4710-945f-dde5fc4d17f9">
        <con:settings/>
        <con:config>
          <script>def RecipientInterface = testRunner.testCase.testSuite.getPropertyValue( "RecipientInterface" )
def DonorInterface = testRunner.testCase.testSuite.getPropertyValue( "DonorInterface" )

if (RecipientInterface.contains("GUI") &amp;&amp; !RecipientInterface.equalsIgnoreCase("GUI") &amp;&amp; DonorInterface.equalsIgnoreCase("GUI")){
    	  
} else {
	testRunner.gotoStepByName( "Delay0")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Sel_CTR" id="4325e1e9-55a9-4837-9b08-f4452eeb8e8c">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.*;

def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def funcHandle = new ReadymadeFunctions();

def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser")
def recipient = testRunner.testCase.testSuite.getPropertyValue("recipient")
def donor = testRunner.testCase.testSuite.getPropertyValue("donor")
def contractId = testRunner.testCase.getPropertyValue("contractId")
def dossierType = testRunner.testCase.testSuite.getPropertyValue("dossierType")
def wishDate = testRunner.testCase.getPropertyValue("wishDate")

def projectName = testRunner.testCase.testSuite.project.name
def testSuiteName = testRunner.testCase.testSuite.name
def testCaseName = testRunner.testCase.name
def testStepName = context.getCurrentStep().getLabel()

log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName)

try {
	def switchId = funcHandle.sendCTR(seleniumHandle, javaHandle, browser, guiUrl, recipient, donor, contractId, dossierType, wishDate);

	testRunner.testCase.setPropertyValue("switchId",switchId);
} catch (Exception e) {
	testRunner.fail(e.getClass().getSimpleName());
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table_CTR" id="20fc23eb-0f9e-420d-ac4d-58d20a376ffe">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier 
where ctd_switchid = '${#TestCase#switchId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: assert CTD_DOSSIER_STATUS]" id="ac17d9f6-9653-435c-bd0c-9af6917f2aa6">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_DOSSIER_STATUS[1]/text()</path>
              <content>Pending</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert CTD_PROCESS_STATUS]" id="ede8cc08-99ab-46ca-baf4-97e9f0895428">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_PROCESS_STATUS[1]/text()</path>
              <content>Request</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: assert ion ctd_id switchid">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def ctdid = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctdId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="19026b41-ccca-4883-97c3-823163e38824" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTR" id="f4fd6817-4cfb-4e57-a870-0cbf1d73af4f">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where dm_ctd_id = ${#TestCase#ctdId} 
and dm_mst_id=1 
order by createddate desc</con:query>
          <con:assertion type="JDBC Status" id="5cb6bed4-aa52-4dfc-bd1e-09609461ec9b" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="22e366c7-6a4e-4580-9e30-c5cb86194c3d" name="Xpath: SoapVersion">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/IT_INTERFACE_TYPE[1]</path>
              <content>GUI</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="a81f7346-ed3a-437d-b13a-c0fa83f0a628" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctrDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_MSL Table_CTR" id="9e2cd460-61d3-46e3-b217-6ff648482b02">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.message_logging 
where msl_ctd_id=${#TestCase#ctdId} 
and msl_dm_id=${#TestCase#ctrdmId}</con:query>
          <con:assertion type="XPath Match" name="Xpath: assert MSL_CLC_ID]" id="e99eef8e-047f-4dff-930b-7b92f2348249">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/MSL_CLC_ID[1]/text()</path>
              <content>57</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="e095441a-3cf8-4288-8e40-4300718feece" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="26a10fc7-0032-44c7-a379-d3aa026bff83" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_NoRecord_CTR" id="e415f277-b45b-4475-8e58-cf271cef575f">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where
sxm_xml_message like '%${#TestCase#switchId}%'
and sxm_xml_message_type = 'Request'
and sxm_sender = '${#TestSuite#recipient}'
and sxm_receiver = '${#TestSuite#donor}'</con:query>
          <con:assertion type="JDBC Status" id="79ddb734-e96d-44bc-897c-fb57b90350ca" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="b59bf65a-290f-4cd1-acea-88560508a0ed" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>0</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_EL Table_CTR" id="949dcfdc-7375-45d3-b6e5-cc05d26ee104">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.email_logging el join overstappen.email_logging_detail eld on el.el_detail_id = eld.id where 
el_dm_id = '${#TestCase#ctrDMId}'</con:query>
          <con:assertion type="JDBC Status" id="5b056277-e6ec-404a-99fc-8472b329b9f9" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="08c804f2-1638-4310-89c5-8ddef67cc36e" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_Body">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_BODY/text()</path>
              <content>New Request received on COMP for ${#TestCase#switchId}*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_SUBJECT">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_SUBJECT/text()</path>
              <content>*New Request received on COMP for ${#TestCase#switchId}</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_REASON">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_REASON/text()</path>
              <content>Request</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="4e4435dd-077d-4bf1-a0da-0ef46339bb12" name="Xpath: assert Receiver">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_RECEIVER_ID/text()</path>
              <content>${#TestSuite#donorId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Sel_CTRA ok" id="b7631cd8-ade4-4831-8925-fd81804c68af">
        <con:settings/>
        <con:config>
          <script>//Send  CTRA ok for ${#TestSuite#recipient}-${#TestSuite#donor}-${#TestCase#contractId}-01
//Business: ${#TestSuite#dossierType}
import nl.coin.Selenium.SampleTest;
import nl.coin.Selenium.SeleniumActions;
import nl.coin.Selenium.JavaActions;
def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser")
def recipient = testRunner.testCase.testSuite.getPropertyValue("recipient")
def donor = testRunner.testCase.testSuite.getPropertyValue("donor")
def contractId = testRunner.testCase.getPropertyValue("contractId")
def donorDossierType = testRunner.testCase.testSuite.getPropertyValue("donorDossierType")
def dossierID = testRunner.testCase.getPropertyValue("switchId")
log.info dossierID
def projectName = testRunner.testCase.testSuite.project.name
def testSuiteName = testRunner.testCase.testSuite.name
def testCaseName = testRunner.testCase.name
def testStepName = context.getCurrentStep().getLabel()
log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName)
def driver = seleniumHandle.openBrowser(browser);
//Login to application
log.info seleniumHandle.browseURL(guiUrl);
log.info(driver.getTitle());
def sampleArray = seleniumHandle.getCredentials(donor)
log.info seleniumHandle.enterData("HomePage","userName", sampleArray[0]);
log.info seleniumHandle.enterData("HomePage","passWord", sampleArray[1]);
//log.info seleniumHandle.clickObject("HomePage","8HrsSession");
log.info seleniumHandle.clickObject("HomePage","login");
log.info seleniumHandle.clickObject("HomePage","dossiers");
log.info seleniumHandle.clickObject("HomePage","SearchTab");
log.info seleniumHandle.enterData("HomePage","DossierID",dossierID);
sleep(1000)
log.info seleniumHandle.clickObject("HomePage","SearchButton");
log.info seleniumHandle.clickObject("HomePage","ViewDetailsSearch");
//need to add select dropdown code
if (donorDossierType == "&lt;business>Y&lt;/business>"){
	log.info seleniumHandle.enterDataSelectDropDown("HomePage","businessType", "Business");	
log.info seleniumHandle.enterDataSelectDropDownByValue("HomePage","blockingCode", "0");
} else {
	log.info seleniumHandle.enterDataSelectDropDown("HomePage","businessType", "Consumer");
	
log.info seleniumHandle.enterDataSelectDropDownByValue("HomePage","ConsumerCTRAblockingCode", "0");
}
log.info seleniumHandle.enterData("HomePage","requestAnswerNote",dossierID);
sleep(1000)
log.info seleniumHandle.clickObject("HomePage","sendRequestAnswer");
sleep(1000)
log.info seleniumHandle.getText("HomePage","resultMessage");
log.info seleniumHandle.quitBrowser();</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table_CTR" id="bea9edf6-2725-42b9-aa06-6205c05676bb">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier 
where id='${#TestCase#ctdId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [ST_TRANSACTION_ID]" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//CTD_SWITCHID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_dossier_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_DOSSIER_STATUS</path>
              <content>Pending</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_process_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_PROCESS_STATUS</path>
              <content>Request Answer OK</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="b2d335d6-98ad-431d-b038-81b8397f6e26" name="JDBC Status"/>
          <con:assertion type="GroovyScriptAssertion" id="4271ec85-309c-4058-b64b-2e7ed1da9acc" name="Script: assert ion">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def ctraid = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctraID");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTRA" id="2dbb67eb-1584-4565-ae79-82761260e527">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where dm_ctd_id = ${#TestCase#ctdId} 
and dm_mst_id=3 
order by createddate desc</con:query>
          <con:assertion type="XQuery Match" id="40cc6fa1-0d78-43c5-a10b-f043ddf625c6" name="XQuery Match">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/IT_INTERFACE_TYPE[1]</path>
              <content>GUI</content>
              <allowWildcards>false</allowWildcards>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="eb3ca4cd-0d91-4992-83c0-13f973c2ed5a" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="2ddcb8b9-efbe-4f5a-9af2-35bbe2669158" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/DM_CTD_ID/text()</path>
              <content>${#TestCase#ctraId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="515cd8af-6280-4b62-bae3-d33c96c5efac" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctraDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_MSL Table_CTRA" id="d975594f-b67c-4a07-8cef-924e29a95f50">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.message_logging 
where msl_ctd_id=${#TestCase#ctdId} 
and msl_dm_id=${#TestCase#ctradmId}</con:query>
          <con:assertion type="XPath Match" name="Xpath: assert MSL_CLC_ID]" id="e99eef8e-047f-4dff-930b-7b92f2348249">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/MSL_CLC_ID[1]/text()</path>
              <content>57</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="e095441a-3cf8-4288-8e40-4300718feece" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="26a10fc7-0032-44c7-a379-d3aa026bff83" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_check SXM Create_CTRA" id="ec069785-b316-4dbf-9671-6c68d4f96889">
        <con:settings/>
        <con:config>
          <script>def outtype = testRunner.testCase.testSuite.getPropertyValue("donorOutMsg")

if (outtype == 'EMAIL') {
    	  testRunner.gotoStepByName("JDBC_SXM Table_NoRecord_CTRA")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_CTRA" id="406432dc-094e-478c-b7e9-b3ebdd7950de">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where
sxm_xml_message like '%${#TestCase#switchId}%'
and sxm_xml_message_type = 'Request answer'
and sxm_sender = '${#TestSuite#donor}'
and sxm_receiver = '${#TestSuite#recipient}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [SXM_ID]" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//ID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="65126eb3-5fce-4b42-b832-8882ef7a5d51" name="Xpath: header sender receiver">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/SXM_XML_MESSAGE[1]</path>
              <content><![CDATA[*<header>
      <receiver>
                  <networkoperator>${#TestSuite#recipient}</networkoperator>
              	          <serviceprovider>${#TestSuite#recipient}</serviceprovider>
               </receiver>
      <sender>
                  <networkoperator>${#TestSuite#donor}</networkoperator>
         		          <serviceprovider>${#TestSuite#donor}</serviceprovider>
               </sender>*]]></content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="053606e7-8ef0-4e64-92f7-4d02863ea4ab" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="519e7dff-5580-4f66-bb26-820b306b81c8" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/SXM_DM_ID/text()</path>
              <content>${#TestCase#ctraDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="1f003e6a-03a1-4e99-833b-da66f1341e4b" name="Xpath: assert SXMID" disabled="true">
            <con:configuration>
              <path>/Results/ResultSet/Row/ID/text()</path>
              <content>${#TestCase#stSXMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_check SXM Create1_CTRA" id="5d2e51f2-677c-49a7-ac31-c74f26931201">
        <con:settings/>
        <con:config>
          <script>def outtype = testRunner.testCase.testSuite.getPropertyValue("donorOutMsg")

if (outtype == 'SOAP') {
    	  testRunner.gotoStepByName( "Sel_CTC")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_NoRecord_CTRA" id="30e6af4f-7489-48e4-9aa4-ceb5dce82104">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where
sxm_xml_message like '%${#TestCase#switchId}%'
and sxm_xml_message_type = 'Request answer'
and sxm_sender = '${#TestSuite#donor}'
and sxm_receiver = '${#TestSuite#recipient}'</con:query>
          <con:assertion type="JDBC Status" id="14bf4c96-3f27-4539-b785-19d738670e67" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="481154a3-7680-47d7-8834-1d82386eb844" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>0</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_EL Table_CTRA" id="9af30f38-65ee-42da-9702-d242be2f73b2">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.email_logging el join overstappen.email_logging_detail eld on el.el_detail_id = eld.id where 
el_dm_id = '${#TestCase#ctraDMId}'</con:query>
          <con:assertion type="JDBC Status" id="5b056277-e6ec-404a-99fc-8472b329b9f9" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="08c804f2-1638-4310-89c5-8ddef67cc36e" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_Body">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_BODY/text()</path>
              <content>New Request Answer received on COMP for ${#TestCase#switchId}*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_SUBJECT">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_SUBJECT/text()</path>
              <content>New Request Answer received on COMP for ${#TestCase#switchId}</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_REASON">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_REASON/text()</path>
              <content>RequestAnswer</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="4e4435dd-077d-4bf1-a0da-0ef46339bb12" name="Xpath: assert Receiver">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_RECEIVER_ID/text()</path>
              <content>${#TestSuite#recipientId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Sel_CTC" id="a5195c19-b241-43f5-bb19-3fcc22af0d6d">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.*;

def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def funcHandle = new ReadymadeFunctions();

def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser")
def recipient = testRunner.testCase.testSuite.getPropertyValue("recipient")
def donor = testRunner.testCase.testSuite.getPropertyValue("donor")
def contractId = testRunner.testCase.getPropertyValue("contractId")
def switchId = testRunner.testCase.getPropertyValue("switchId")

def projectName = testRunner.testCase.testSuite.project.name
def testSuiteName = testRunner.testCase.testSuite.name
def testCaseName = testRunner.testCase.name
def testStepName = context.getCurrentStep().getLabel()

log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName)

try {
	funcHandle.sendCTC(seleniumHandle, javaHandle, browser, guiUrl, recipient, switchId);
} catch (Exception e) {
	testRunner.fail(e.getClass().getSimpleName());
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table_CTC" id="1ae7a39b-8520-43e4-acaf-d44b4bdc1401">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier 
where id = '${#TestCase#ctdId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of CTD record" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//CTD_SWITCHID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_process_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_PROCESS_STATUS</path>
              <content>Cancel</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_dossier_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_DOSSIER_STATUS</path>
              <content>Cancelled</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="e5674e64-b285-4e2d-b343-7a640c978165" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTC" id="03d9cd54-e40e-46bd-98bc-535a14a397bc">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where dm_ctd_id = ${#TestCase#ctdId} 
and dm_mst_id=11 
order by createddate desc</con:query>
          <con:assertion type="JDBC Status" id="1846bd70-ede9-4406-b758-7f23241ac3aa" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="b199af58-886b-4a43-943e-d947f7528217" name="Xpath: 1">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/IT_INTERFACE_TYPE[1]</path>
              <content>GUI</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="a9d75fcb-065d-4c4b-af79-6008c5eb093c" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctcDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_MSL Table_CTC" id="fbdfd568-1c28-4698-8940-3e22fb5399a9">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.message_logging 
where msl_ctd_id=${#TestCase#ctdId} 
and msl_dm_id=${#TestCase#ctcdmId}</con:query>
          <con:assertion type="XPath Match" name="Xpath: assert MSL_CLC_ID]" id="e99eef8e-047f-4dff-930b-7b92f2348249">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/MSL_CLC_ID[1]/text()</path>
              <content>57</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="e095441a-3cf8-4288-8e40-4300718feece" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="26a10fc7-0032-44c7-a379-d3aa026bff83" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="manualTestStep" name="CheckMail" id="1253b46c-acb0-4943-9045-73252546da36" disabled="true">
        <con:description>Check for ${#TestSuite#donor}  ${#TestCase#switchId} 
if emails for CTR and CTC have arrived.</con:description>
        <con:settings/>
        <con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_NoRecord_CTC" id="f79ed587-82de-4a0e-8a22-c0c128bbcb4e">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where
sxm_xml_message like '%${#TestCase#switchId}%'
and sxm_xml_message_type = 'Cancel'
and sxm_sender = '${#TestSuite#recipient}'
and sxm_receiver = '${#TestSuite#donor}'</con:query>
          <con:assertion type="JDBC Status" id="c475aacc-95de-4284-a9f8-4767c70e9910" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="02a2c5a8-0d80-4f36-88de-c5ad753114a5" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>0</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_EL Table_CTC" id="b461f66b-2b5e-4d38-bf1c-1358e8568ea9">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.email_logging el join overstappen.email_logging_detail eld on el.el_detail_id = eld.id where 
el_dm_id = '${#TestCase#ctcDMId}'</con:query>
          <con:assertion type="JDBC Status" id="5b056277-e6ec-404a-99fc-8472b329b9f9" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="08c804f2-1638-4310-89c5-8ddef67cc36e" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_Body">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_BODY/text()</path>
              <content>New Cancel received on COMP for ${#TestCase#switchId}*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_SUBJECT">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_SUBJECT/text()</path>
              <content>*New Cancel received on COMP for ${#TestCase#switchId}</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_REASON">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_REASON/text()</path>
              <content>Cancel</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="4e4435dd-077d-4bf1-a0da-0ef46339bb12" name="Xpath: assert Receiver">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_RECEIVER_ID/text()</path>
              <content>${#TestSuite#donorId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Delay0" id="da7f1bc1-fb1b-4e35-805a-dc05a37dad15">
        <con:settings/>
        <con:config>
          <delay>1</delay>
        </con:config>
      </con:testStep>
      <con:setupScript>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import groovy.time.TimeCategory
import java.util.Random
def today = new Date() 
def now = String.format('%tFT%&lt;tT', new Date() )
def wishdate = today 
use(TimeCategory) {
	   wishdate = wishdate + 1.days
}
def wishdatestr = wishdate.format("yyyy-MM-dd'T'HH:mm:ss")
def guiwishdatestr = wishdate.format("yyyy-MM-dd")
testRunner.testCase.setPropertyValue("Now",now)
testRunner.testCase.setPropertyValue("wishDate",wishdatestr)
testRunner.testCase.setPropertyValue("guiWishDate",guiwishdatestr)
String contractId = funcHandle.getRandomString(9, "4-");
testRunner.testCase.setPropertyValue("contractId",contractId)</con:setupScript>
      <con:tearDownScript/>
      <con:properties/>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>122d3297-f22d-449f-ac52-c46f1bfb714e</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="D1.3 RecipientGUIOnlyDonorSOAP" searchProperties="true" id="37d01b4e-8746-4569-a47c-0d8c2f119071" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:settings>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">1000</con:setting>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting>
      </con:settings>
      <con:testStep type="groovy" name="RecipientGUIDonorSOAP" id="d5dea197-8ce3-4458-a6d0-70d46791fdd6">
        <con:settings/>
        <con:config>
          <script><![CDATA[def RecipientInterface = testRunner.testCase.testSuite.getPropertyValue( "RecipientInterface" )
def DonorInterface = testRunner.testCase.testSuite.getPropertyValue( "DonorInterface" )

def dossierType = testRunner.testCase.testSuite.getPropertyValue( "dossierType" )
def recBusinessGuiOnly = testRunner.testCase.testSuite.getPropertyValue( "recBusinessGuiOnly" )

if (RecipientInterface.contains("GUI") && !(RecipientInterface.equalsIgnoreCase("GUI")) && DonorInterface.contains("SOAP") && recBusinessGuiOnly.equalsIgnoreCase("true")){
	
} else {
	testRunner.gotoStepByName( "Delay0")
}]]></script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Sel_CTR" id="900c20a3-15ed-4a83-b55f-fe7fa3ed4e2f">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.*;

def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def funcHandle = new ReadymadeFunctions();

def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser")
def recipient = testRunner.testCase.testSuite.getPropertyValue("recipient")
def donor = testRunner.testCase.testSuite.getPropertyValue("donor")
def contractId = testRunner.testCase.getPropertyValue("contractId")
def dossierType = testRunner.testCase.testSuite.getPropertyValue("dossierType")
def wishDate = testRunner.testCase.getPropertyValue("wishDate")

def projectName = testRunner.testCase.testSuite.project.name
def testSuiteName = testRunner.testCase.testSuite.name
def testCaseName = testRunner.testCase.name
def testStepName = context.getCurrentStep().getLabel()

log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName)

try {
	def switchId = funcHandle.sendCTR(seleniumHandle, javaHandle, browser, guiUrl, recipient, donor, contractId, dossierType, wishDate);

	testRunner.testCase.setPropertyValue("switchId",switchId);
} catch (Exception e) {
	testRunner.fail(e.getClass().getSimpleName());
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table_CTR" id="77ff9fa0-ceed-462d-a9c1-865f6c2d863c">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier 
where ctd_switchid = '${#TestCase#switchId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: assert CTD_DOSSIER_STATUS]" id="ac17d9f6-9653-435c-bd0c-9af6917f2aa6">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_DOSSIER_STATUS[1]/text()</path>
              <content>Pending</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: assert CTD_PROCESS_STATUS]" id="ede8cc08-99ab-46ca-baf4-97e9f0895428">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_PROCESS_STATUS[1]/text()</path>
              <content>Request</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: assert ion ctd_id switchid">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def ctdid = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctdId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="bc7d5e6d-e2ce-4678-961a-4bed06c24de5" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTR" id="96f86e5c-44e4-4d97-8963-d67ec4217abc">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where dm_ctd_id = ${#TestCase#ctdId} 
and dm_mst_id=1 
order by createddate desc</con:query>
          <con:assertion type="JDBC Status" id="e16c88de-a3d8-4bbf-9708-469b40ddcde5" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="22e366c7-6a4e-4580-9e30-c5cb86194c3d" name="Xpath: SoapVersion">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/IT_INTERFACE_TYPE[1]</path>
              <content>GUI</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="2b03bcd2-e0ba-494b-9878-e4a1491ed509" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctrDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_MSL Table_CTR" id="c713b0e5-cd3b-4b8b-aac5-afaaa6795986">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.message_logging 
where msl_ctd_id=${#TestCase#ctdId} 
and msl_dm_id=${#TestCase#ctrdmId}</con:query>
          <con:assertion type="XPath Match" name="Xpath: assert MSL_CLC_ID]" id="e99eef8e-047f-4dff-930b-7b92f2348249">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/MSL_CLC_ID[1]/text()</path>
              <content>57</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="e095441a-3cf8-4288-8e40-4300718feece" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="26a10fc7-0032-44c7-a379-d3aa026bff83" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_CheckOutGoingMsgType_CTR" id="0584572a-497e-457e-8051-235f95d07aec">
        <con:settings/>
        <con:config>
          <script>def outtype = testRunner.testCase.testSuite.getPropertyValue("recipientOutMsg")

if (outtype == 'EMAIL') {
    	  testRunner.gotoStepByName( "JDBC Request-Check no Send Status in ST table")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_CTR" id="8db37769-104c-4502-ad35-d54f21559f19">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where
sxm_xml_message like '%${#TestCase#switchId}%'
and sxm_xml_message_type = 'Request'
and sxm_sender = '${#TestSuite#recipient}'
and sxm_receiver = '${#TestSuite#donor}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [ST_TRANSACTION_ID]" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//ID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" name="Contains: Contains" id="a1e1b0ed-fff7-4f8c-9eba-dee62ae7b198">
            <con:configuration>
              <token>contractterminationrequest</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6c4dac59-737d-4969-bf30-85d9166e950e" name="Xpath: 1">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/SXM_XML_MESSAGE[1]</path>
              <content>*&lt;/${#TestSuite#donorSoapVersion}>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="58dd4262-1e01-4085-8f11-e8800c5d88be" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="0e28d734-e392-4f26-9c0f-eb6f0b7d6abf" name="Xpath: assert DMId" disabled="true">
            <con:configuration>
              <path>/Results/ResultSet/Row/SXM_DM_ID/text()</path>
              <content>${#TestCase#ctrDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="9d984b35-fec5-4420-985a-d949389686fb" name="Xpath: assert SXMID" disabled="true">
            <con:configuration>
              <path>/Results/ResultSet/Row/ID/text()</path>
              <content>${#TestCase#stSXMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_CheckOutGoingMsgType1_CTR" id="a85c1a88-f3f4-49a1-8487-e76817fbc394">
        <con:settings/>
        <con:config>
          <script>def outtype = testRunner.testCase.testSuite.getPropertyValue("recipientOutMsg")

if (outtype == 'SOAP') {
    	  testRunner.gotoStepByName( "CTRA-ok")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_ST Table_NoSend" id="c797ec47-c5cb-461b-86fb-d4f60784de79">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_transactions 
where st_sender='${#TestSuite#recipient}' and st_receiver='${#TestSuite#donor}' and st_send_received='SEND' and st_message like '%${#TestCase#switchId}%'</con:query>
          <con:assertion type="JDBC Status" id="cc45d6ef-2316-4378-b582-f321b46f2cc1" name="JDBC Status"/>
          <con:assertion type="Simple NotContains" id="9dc2a7bb-7c16-4bd1-980b-734fceb80acc" name="NotContains: Not Contains" disabled="true">
            <con:configuration>
              <token>&lt;Row rowNumber="1"></token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_EL Table_CTR" id="34cc4f81-8a57-448c-a9b3-0fc8058aa2e5">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.email_logging el join overstappen.email_logging_detail eld on el.el_detail_id = eld.id where 
el_dm_id = '${#TestCase#ctrDMId}'</con:query>
          <con:assertion type="JDBC Status" id="5b056277-e6ec-404a-99fc-8472b329b9f9" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="08c804f2-1638-4310-89c5-8ddef67cc36e" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_Body">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_BODY/text()</path>
              <content>New Request received on COMP for ${#TestSuite#Recipient}-${#TestSuite#Donor}-${#TestCase#ContractId}-01. Please respond on this request within 24 working day hours with a Request Answer*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_SUBJECT">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_SUBJECT/text()</path>
              <content>*New Request received on COMP for ${#TestSuite#Recipient}-${#TestSuite#Donor}-${#TestCase#ContractId}-01</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_REASON">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_REASON/text()</path>
              <content>Request</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="4e4435dd-077d-4bf1-a0da-0ef46339bb12" name="Xpath: assert Receiver">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_RECEIVER_ID/text()</path>
              <content>${#TestSuite#donorId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="CTRA-ok" id="a1aeaecb-4c9a-4946-a476-3420552128c0">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>CompWebserviceSoap11</con:interface>
          <con:operation>SendMessages</con:operation>
          <con:request name="CTRA-ok" id="83d7229a-676a-4c41-81cc-3429f324fea1" wssPasswordType="PasswordText">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#SoapUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="http://coin.nl/ws/schema">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:SendMessagesRequest>
         <sch:Sender>${#TestSuite#donor}</sch:Sender>
         <sch:Messages>
            <sch:Message>
               <sch:Text><![CDATA[<?xml version="1.0"?>
<message xmlns="http://www.coin.nl/Overstappen_MESSAGES">
<header>
<receiver>
<!--Optional:-->
<networkoperator>${#TestSuite#recipient}</networkoperator>
<!--Optional:-->
<serviceprovider>${#TestSuite#recipient}</serviceprovider>
</receiver>
<sender>
<!--Optional:-->
<networkoperator>${#TestSuite#donor}</networkoperator>
<!--Optional:-->
<serviceprovider>${#TestSuite#donor}</serviceprovider>
</sender>
<!--Optional:-->
<messageid>${#TestSuite#donor}-${#TestCase#ContractId}-02</messageid>
<timestamp>${#TestSuite#TimestampNOW}</timestamp>
</header>
<body>
<contractterminationrequestanswer>
<${#TestSuite#donorSoapVersion}>
<dossierid>${#TestCase#SwitchId}</dossierid>
${#TestSuite#donorDossierType}
<blocking>N</blocking>
<wishdatetime>${#TestCase#wishdate}</wishdatetime>
<blockingcode>0</blockingcode>
<note>Request Answer OK ${#TestSuite#soapVersion} OK</note>
</${#TestSuite#donorSoapVersion}>
</contractterminationrequestanswer>
</body>
</message>]]]]>><![CDATA[</sch:Text>
            </sch:Message>
         </sch:Messages>
      </sch:SendMessagesRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="0408c23d-c32c-480c-b33e-7f633dc17c95"/>
            <con:assertion type="XPath Match" id="8131d7ae-9a5a-491b-aefe-ae2214c93e1b" name="XPath Match">
              <con:configuration>
                <path>declare namespace ns2='http://coin.nl/ws/schema';
//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]/text()</path>
                <content>*</content>
                <allowWildcards>true</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="8fd52b42-3f32-4928-9b32-f521197d004e" name="Script Assertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
//def groovyUtilsPro = new com.eviware.soapui.support.GroovyUtilsPro( context )

def holder = new XmlHolder( messageExchange.responseContentAsXml )
holder.namespaces["ns2"] = "http://coin.nl/ws/schema"
def transactionId = holder.getNodeValue( "//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]" )
messageExchange.modelItem.testStep.testCase.setPropertyValue("ctraTransactionId",transactionId)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#TestSuite#donorUserName}</con:username>
              <con:password>${#TestSuite#donorPassWord}</con:password>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_ST Table CTRA" id="38e4e659-4bd2-46de-8b14-453be9383947">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_transactions 
where st_transaction_id = '${#TestCase#ctraTransactionId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Verify TransactionId" id="0314e1fa-b1cb-4932-bba8-55dd87029a85">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_TRANSACTION_ID[1]</path>
              <content>${#TestCase#ctraTransactionId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify ST_SEND_RECEIVED" id="9db0e630-c611-4fc1-b0bc-fb6028a6a7c3">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_SEND_RECEIVED[1]</path>
              <content>received</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" name="Contains: Contain message Type" id="85caea84-7bde-4674-9d00-009229cb7411">
            <con:configuration>
              <token>contractterminationrequestanswer</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script: assert node [ID]" id="919aa515-934c-4b10-bd9d-dcd08c81b41c">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctraId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="f768c42d-88e9-41c9-a0b2-8d05cd171719" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="9155beb2-508d-4306-8bfd-4e9e85cdafb7" name="Xpath: assert UserIP" disabled="true">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_IP/text()</path>
              <content>${#Project#UserIP}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="ad16e040-b3cc-42da-b28e-88ef0a648479" name="Xpath: assert UserName">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_NAME/text()</path>
              <content>${#TestSuite#donorUserName}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b12f671e-b338-4683-b415-be81a185763f" name="Xpath: assert TechSender">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_TECHNICAL_SENDER/text()</path>
              <content>${#TestSuite#donor}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Wait For Poller 2" id="8edd63b9-ed62-431a-be60-7a451711745d">
        <con:settings/>
        <con:config>
          <delay>${#TestSuite#PollTime}</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_RSXM Table_CTRA" id="5d4dbbb9-e746-49f8-9f43-7db5bde4e458">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.raw_soap_xml_messages where rsxm_st_id = '${#TestCase#ctraId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: XPath Match" id="14d90270-6f91-4150-993a-d24f2adbd507">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/RSXM_STATUS[1]</path>
              <content>Done</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="9569e434-49ab-4e45-a050-80ba0e196e2b" name="JDBC Status"/>
          <con:assertion type="GroovyScriptAssertion" id="cdb4ab0d-32f0-4676-9d1f-90b5597e6307" name="Script: SaveRSXM_DM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/RSXM_DM_ID[1]", "ctrDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="7f11d649-790b-4d42-bc9d-54389eb9453d" name="Script: SaveRSXM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctraRSXMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_MSL Table_CTRA" id="6e95e179-d509-446d-86f8-6fdd7042ebef">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>Select * from overstappen.message_logging where 
msl_soap_transaction_id = '${#TestCase#ctraTransactionId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: assert MSL_CLC_ID]" id="e99eef8e-047f-4dff-930b-7b92f2348249">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/MSL_CLC_ID[1]/text()</path>
              <content>57</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="e095441a-3cf8-4288-8e40-4300718feece" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="0698abb2-b5fd-487f-b97c-78ded47ab78d" name="Xpath: assert SoapTransactionId">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_ST_ID/text()</path>
              <content>${#TestCase#ctraId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table 1" id="15ed20cb-1b4b-48be-ac71-0207ca360243">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier 
where id='${#TestCase#ctdId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [ST_TRANSACTION_ID]" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//CTD_SWITCHID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_dossier_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_DOSSIER_STATUS</path>
              <content>Pending</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_process_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_PROCESS_STATUS</path>
              <content>Request Answer OK</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="f1634f5b-7b26-4777-9ee7-2012c2678c07" name="Script: assert ion">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def ModifiedDate = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/CONTRACT_TERMINATION_DOSSIER.MODIFIEDDATE[1]", "ModifiedDate");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="f7e313a5-ef5e-4f86-9240-a10a978a2c21" name="Xpath: Verify ctp_buffering">
            <con:configuration>
              <path>//CTD_CTP_BUFFERING</path>
              <content>t</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="e40439fd-a28d-447c-b44d-3fb2c6ef4dea" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTRA" id="cdfd3473-8e0e-4c9f-bbd1-aecb0a45bc54">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where dm_ctd_id = ${#TestCase#ctdId} 
and dm_mst_id=3 
order by createddate desc</con:query>
          <con:assertion type="XQuery Match" id="40cc6fa1-0d78-43c5-a10b-f043ddf625c6" name="XQuery Match">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/IT_INTERFACE_TYPE[1]</path>
              <content>*${#TestSuite#donorSoapVersion}*</content>
              <allowWildcards>true</allowWildcards>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="aee83c84-1f40-4d13-a66d-1b6209582295" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="d53ba6f3-831f-4961-a4f2-a1f4e5790824" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/ID/text()</path>
              <content>${#TestCase#ctrDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="51c7043f-1ca9-407a-a18c-02af282bce5e" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctraDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_check SXM Create_CTRA" id="46ccbeca-feec-4deb-8afb-bf48175b5845">
        <con:settings/>
        <con:config>
          <script>def outtype = testRunner.testCase.testSuite.getPropertyValue("donorOutMsg")

if (outtype == 'EMAIL') {
    	  testRunner.gotoStepByName("JDBC_SXM Table_NoRecord_CTRA")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_CTRA" id="52524ade-a4fd-4c58-89df-8f6429599e42">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where
sxm_xml_message like '%${#TestCase#switchId}%'
and sxm_xml_message_type = 'Request answer'
and sxm_sender = '${#TestSuite#donor}'
and sxm_receiver = '${#TestSuite#recipient}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [SXM_ID]" id="bf10f636-c029-4dda-9a44-2917d2188cb9" disabled="true">
            <con:configuration>
              <path>//ID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="05ae5fdf-78e9-4f49-bb59-edefc9ff0d94" name="Xpath: XPath Match" disabled="true">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/SXM_XML_MESSAGE[1]</path>
              <content>*&lt;/${#TestSuite#recSoap}>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="81ff77ff-f8eb-43aa-b40d-42cb951150d9" name="Xpath: soapversion" disabled="true">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/SXM_XML_MESSAGE[1]</path>
              <content>*&lt;/${#TestSuite#recSoap}>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="8e149e04-50b1-46af-b467-8b543fca4616" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_check SXM Create1_CTRA" id="929c75c7-5a74-49fe-bbfb-561a48bff6f2">
        <con:settings/>
        <con:config>
          <script>def outtype = testRunner.testCase.testSuite.getPropertyValue("donorOutMsg")

if (outtype == 'SOAP') {
    	  testRunner.gotoStepByName( "Sel_CTCH")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_NoRecord_CTRA" id="0c8b47de-3eaf-40a2-ae71-074d75ce8780">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where
sxm_xml_message like '%${#TestCase#switchId}%'
and sxm_xml_message_type = 'Request answer'
and sxm_sender = '${#TestSuite#donor}'
and sxm_receiver = '${#TestSuite#recipient}'
--and sxm_retry_count &lt;=1</con:query>
          <con:assertion type="Simple NotContains" id="b6d5ae98-57ce-4e00-9ffd-14dd43eb4e5f" name="NotContains: Not Contains">
            <con:configuration>
              <token>&lt;Row rowNumber="1"></token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="043760f7-0e54-48ca-ac4e-540aefdf7d3b" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="9e6eb0ac-6236-43c5-95f1-c9a11a24dd0d" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>0</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_EL Table_CTRA" id="679385da-9362-4b07-ada8-21b459427816">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.email_logging el join overstappen.email_logging_detail eld on el.el_detail_id = eld.id where 
el_dm_id = '${#TestCase#ctraDMId}'</con:query>
          <con:assertion type="JDBC Status" id="5b056277-e6ec-404a-99fc-8472b329b9f9" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="08c804f2-1638-4310-89c5-8ddef67cc36e" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_Body">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_BODY/text()</path>
              <content>New Request Answer received on COMP for ${#TestCase#switchId}*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_SUBJECT">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_SUBJECT/text()</path>
              <content>New Request Answer received on COMP for ${#TestCase#switchId}</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_REASON">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_REASON/text()</path>
              <content>RequestAnswer</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="4e4435dd-077d-4bf1-a0da-0ef46339bb12" name="Xpath: assert Receiver">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_RECEIVER_ID/text()</path>
              <content>${#TestSuite#recipientId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Sel_CTCH" id="39ce38bc-2877-4c62-a4a3-3b47deb653b8">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.*;

def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def funcHandle = new ReadymadeFunctions();

def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser");
def recipient = testRunner.testCase.testSuite.getPropertyValue("recipient");
def dossierID = testRunner.testCase.getPropertyValue("switchId");
def proposeddate = testRunner.testCase.getPropertyValue("guiCh1Wd");

def projectName = testRunner.testCase.testSuite.project.name;
def testSuiteName = testRunner.testCase.testSuite.name;
def testCaseName = testRunner.testCase.name;
def testStepName = context.getCurrentStep().getLabel();

log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName);

try {
	funcHandle.sendCTCH(seleniumHandle, javaHandle, browser, guiUrl, recipient, dossierID, proposeddate+"T00:00:00");
} catch (Exception e) {
	testRunner.fail(e.getClass().getSimpleName());
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table_CTCH" id="ea6174f0-1de1-495c-a53d-17e28799f8a7">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier 
where id='${#TestCase#ctdId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of CTD record" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//CTD_SWITCHID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_dossier_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_DOSSIER_STATUS</path>
              <content>Pending</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_process_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_PROCESS_STATUS</path>
              <content>Change</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="e267842d-3ff9-4b57-8933-f4543db26940" name="Xpath: CTCH_wishdatetime">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CTCH_WISHDATETIME[1]</path>
              <content>${#TestCase#guiCh1Wd} 00:00:00</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="3fdace08-47bc-4a9c-bea3-eedf47960e5e" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTCH" id="282a0490-a918-4e07-a366-2598933f09a7">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where dm_ctd_id = ${#TestCase#ctdId} 
and dm_mst_id=7 
order by createddate desc</con:query>
          <con:assertion type="JDBC Status" id="ad681b60-0b08-414f-bf9e-288a1e48c297" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="2f7d35d5-6695-4e22-aecf-3764a6a3f60c" name="Xpath: 1">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/IT_INTERFACE_TYPE[1]</path>
              <content>GUI</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="89cbd02c-589f-4ac1-b87a-8b1bedc33269" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctchDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_MSL Table_CTCH" id="0acafe50-c976-4378-9c12-b2aec7e3f713">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.message_logging 
where msl_ctd_id=${#TestCase#ctdId} 
and msl_dm_id=${#TestCase#ctchdmId}</con:query>
          <con:assertion type="XPath Match" name="Xpath: assert MSL_CLC_ID]" id="e99eef8e-047f-4dff-930b-7b92f2348249">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/MSL_CLC_ID[1]/text()</path>
              <content>57</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="e095441a-3cf8-4288-8e40-4300718feece" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="26a10fc7-0032-44c7-a379-d3aa026bff83" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_CheckOutGoingMsgType_CTCH" id="168d6910-e222-40fe-979c-42f5b97b84be">
        <con:settings/>
        <con:config>
          <script>def outtype = testRunner.testCase.testSuite.getPropertyValue("recipientOutMsg")

if (outtype == 'EMAIL') {
    	  testRunner.gotoStepByName( "JDBC Request-check no sxm CTCH1")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_CTCH" id="fa6f8a4c-d8b0-4b13-b30c-2c61d8d57b95">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where
sxm_xml_message like '%${#TestCase#switchId}%'
and sxm_xml_message_type = 'Change'
and sxm_sender = '${#TestSuite#recipient}'
and sxm_receiver = '${#TestSuite#donor}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of [ST_TRANSACTION_ID]" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//ID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" name="Contains: Contains" id="a1e1b0ed-fff7-4f8c-9eba-dee62ae7b198">
            <con:configuration>
              <token>change</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="6c4dac59-737d-4969-bf30-85d9166e950e" name="Xpath: Verify soapversion">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/SXM_XML_MESSAGE[1]</path>
              <content>*&lt;/${#TestSuite#donorSoapVersion}>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="6c700e7f-2fe8-4f40-875c-ce91c2e56070" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy_CheckOutGoingMsgType1_CTCH" id="d03b5909-5320-490a-a191-37fcdcb05c45">
        <con:settings/>
        <con:config>
          <script>def outtype = testRunner.testCase.testSuite.getPropertyValue("recipientOutMsg")

if (outtype == 'SOAP') {
    	  testRunner.gotoStepByName( "CTCHA")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_NoRecord_CTCH" id="52785312-a865-46ea-8be3-311064023ab0">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where
sxm_xml_message like '%${#TestCase#switchId}%'
and sxm_xml_message_type = 'Change'
and sxm_sender = '${#TestSuite#recipient}'
and sxm_receiver = '${#TestSuite#donor}'</con:query>
          <con:assertion type="JDBC Status" id="92c5b2ef-5b3a-45cd-a52f-18a256b11942" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="4eda4b2e-a5ed-45a8-9529-701acae315e7" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_EL Table_CTCH" id="5438f5a0-870d-4ddc-99b7-375302270c80">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.email_logging el join overstappen.email_logging_detail eld on el.el_detail_id = eld.id where 
el_dm_id = '${#TestCase#ctchDMId}'</con:query>
          <con:assertion type="JDBC Status" id="5b056277-e6ec-404a-99fc-8472b329b9f9" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="08c804f2-1638-4310-89c5-8ddef67cc36e" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_Body">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_BODY/text()</path>
              <content>New Request received on COMP for ${#TestSuite#Recipient}-${#TestSuite#Donor}-${#TestCase#ContractId}-01. Please respond on this request within 24 working day hours with a Request Answer*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_SUBJECT">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_SUBJECT/text()</path>
              <content>*New Request received on COMP for ${#TestSuite#Recipient}-${#TestSuite#Donor}-${#TestCase#ContractId}-01</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_REASON">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_REASON/text()</path>
              <content>Request</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="4e4435dd-077d-4bf1-a0da-0ef46339bb12" name="Xpath: assert Receiver">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_RECEIVER_ID/text()</path>
              <content>${#TestSuite#donorId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="request" name="CTCHA" id="46a77b92-e587-4b73-8dc5-d80dbecc5003">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>CompWebserviceSoap11</con:interface>
          <con:operation>SendMessages</con:operation>
          <con:request name="CTCHA" id="83d7229a-676a-4c41-81cc-3429f324fea1" wssPasswordType="PasswordText">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#SoapUrl}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="http://coin.nl/ws/schema">
   <soapenv:Header/>
   <soapenv:Body>
      <sch:SendMessagesRequest>
         <sch:Sender>${#TestSuite#donor}</sch:Sender>
         <sch:Messages>
            <sch:Message>
               <sch:Text><![CDATA[<?xml version="1.0"?>
<message xmlns="http://www.coin.nl/Overstappen_MESSAGES">
<header>
<receiver>
<serviceprovider>${#TestSuite#recipient}</serviceprovider>
</receiver>
<sender>
<serviceprovider>${#TestSuite#donor}</serviceprovider>
</sender>
<messageid>${#TestSuite#donor}-${#TestCase#ContractId}-02</messageid>
<timestamp>${#TestSuite#TimestampNOW}</timestamp>
</header>
<body>
<changeanswer>
<${#TestSuite#donorSoapVersion}>
<dossierid>${#TestCase#switchId}</dossierid>
<blocking>N</blocking>
<wishdatetime>${#TestCase#proposedDate}</wishdatetime>
<note>Change Answer sent ${#TestSuit#donorSoapVersion} OK, expected ${#TestSuite#soapVersion} </note>
</${#TestSuite#donorSoapVersion}>
</changeanswer>
</body>
</message>]]]]>><![CDATA[</sch:Text>
            </sch:Message>
         </sch:Messages>
      </sch:SendMessagesRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Response" id="0408c23d-c32c-480c-b33e-7f633dc17c95"/>
            <con:assertion type="GroovyScriptAssertion" id="facd78c0-f429-4837-9e4e-fa25b476d712" name="Script Assertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
//def groovyUtilsPro = new com.eviware.soapui.support.GroovyUtilsPro( context )

def holder = new XmlHolder( messageExchange.responseContentAsXml )
holder.namespaces["ns2"] = "http://coin.nl/ws/schema"
def transactionId = holder.getNodeValue( "//ns2:SendMessagesResponse[1]/ns2:TransactionId[1]" )
messageExchange.modelItem.testStep.testCase.setPropertyValue("ctchaTransactionId",transactionId)</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#TestSuite#donorUserName}</con:username>
              <con:password>${#TestSuite#donorPassWord}</con:password>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_ST Table CTCHA" id="ff58b0ce-a529-4df3-99a5-4b10d35e04f9">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_transactions 
where st_transaction_id = '${#TestCase#ctchaTransactionId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Verify TransactionId" id="0314e1fa-b1cb-4932-bba8-55dd87029a85">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_TRANSACTION_ID[1]</path>
              <content>${#TestCase#ctchaTransactionId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify ST_SEND_RECEIVED" id="9db0e630-c611-4fc1-b0bc-fb6028a6a7c3">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/ST_SEND_RECEIVED[1]</path>
              <content>received</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="Simple Contains" name="Contains: Contain message Type" id="85caea84-7bde-4674-9d00-009229cb7411">
            <con:configuration>
              <token>change</token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" name="Script: assert node [ID]" id="919aa515-934c-4b10-bd9d-dcd08c81b41c">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctchaId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="f6c05a55-b26f-4bd9-b303-56461538a8a2" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="74a35f65-5182-4f24-98a9-1e5e0391bbd2" name="Xpath: assert UserIP" disabled="true">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_IP/text()</path>
              <content>${#Project#UserIP}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b2830046-1c9f-48e7-8767-c86370a584e3" name="Xpath: assert UserName">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_USER_NAME/text()</path>
              <content>${#TestSuite#donorUserName}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b6f9264b-b68d-4956-a328-72471efe5330" name="Xpath: assert TechSender">
            <con:configuration>
              <path>/Results/ResultSet/Row/ST_TECHNICAL_SENDER/text()</path>
              <content>${#TestSuite#donor}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Wait For Poller 4" id="43cd9668-b3a2-4f49-8596-2c8ea82c3ad4">
        <con:settings/>
        <con:config>
          <delay>${#TestSuite#PollTime}</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_RSXM Table_CTCHA" id="86a09237-f716-4cd6-8f35-cd51b339eebb">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.raw_soap_xml_messages where rsxm_st_id = '${#TestCase#ctchaId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: XPath Match" id="14d90270-6f91-4150-993a-d24f2adbd507">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/RSXM_STATUS[1]</path>
              <content>Done</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="d0e1985e-6e3e-45cb-b8b0-b45a21f9a2bd" name="JDBC Status"/>
          <con:assertion type="GroovyScriptAssertion" id="fad17aaa-1f6a-4473-b040-bdb4a0c1356f" name="Script: SaveRSXM_DM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder 
def holder = new XmlHolder( messageExchange.responseContentAsXml ) 
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/RSXM_DM_ID[1]", "ctrDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="a69bac4a-b4d4-48be-b9ac-a1bd4b40aa56" name="Script: SaveRSXM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctchaRSXMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_MSL Table_CTCHA" id="524402ec-b56e-44d6-b24b-87f3e196cba8">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>Select * from overstappen.message_logging where 
msl_soap_transaction_id = '${#TestCase#ctchaTransactionId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: assert MSL_CLC_ID]" id="e99eef8e-047f-4dff-930b-7b92f2348249">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/MSL_CLC_ID[1]/text()</path>
              <content>57</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="e095441a-3cf8-4288-8e40-4300718feece" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="64a67ad5-82d2-4b22-9a8d-02b9ead1c738" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="2fb6578c-865a-470f-aeea-249ec110fc48" name="Xpath: assert SoapTransactionId">
            <con:configuration>
              <path>/Results/ResultSet/Row/MSL_ST_ID/text()</path>
              <content>${#TestCase#ctchaId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table_CTCHA-ok" id="7ed3962a-913d-46b1-a65f-74fbf680cee2">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier 
where id='${#TestCase#ctdId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of CTD record" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//CTD_SWITCHID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_dossier_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_DOSSIER_STATUS</path>
              <content>Pending</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_process_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_PROCESS_STATUS</path>
              <content>Change Answer OK</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="d39811c4-2232-47ee-ba08-6ba3ca210866" name="Xpath: XPath Match">
            <con:configuration>
              <path>//CTD_REQUESTEDDATETIME</path>
              <content>${#TestCase#guiCh1Wd} 00:00:00</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="af8a9c23-57b9-4f46-a2f0-69bcd2ab4af3" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTCHA" id="40f44bbe-a225-400f-b9cb-56276f8ea496">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where dm_ctd_id = ${#TestCase#ctdId} 
and dm_mst_id=9 
order by createddate desc</con:query>
          <con:assertion type="XPath Match" id="8af8dc75-df09-4ea0-b7eb-67cc0baa0261" name="Xpath: 1">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/IT_INTERFACE_TYPE[1]</path>
              <content>*${#TestSuite#donorSoapVersion}*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="bd859157-dcc5-4ef6-9e3c-d9b4efb1f01c" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="7a0a25ac-22bc-4ade-88cf-3ad103b2398d" name="Xpath: assert DMId">
            <con:configuration>
              <path>/Results/ResultSet/Row/ID/text()</path>
              <content>${#TestCase#ctrDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="bdb9f960-a9cb-4388-b896-f3636edde169" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctchaDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_EL Table_CTCHA" id="70262c23-dc0c-46c2-9c98-82dfc4e519df">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.email_logging el join overstappen.email_logging_detail eld on el.el_detail_id = eld.id where 
el_dm_id = '${#TestCase#ctchaDMId}'</con:query>
          <con:assertion type="JDBC Status" id="5b056277-e6ec-404a-99fc-8472b329b9f9" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="08c804f2-1638-4310-89c5-8ddef67cc36e" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_Body">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_BODY/text()</path>
              <content>New Change Answer received on COMP for ${#TestCase#switchId}*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_SUBJECT">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_SUBJECT/text()</path>
              <content>New Change Answer received on COMP for ${#TestCase#switchId}</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_REASON">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_REASON/text()</path>
              <content>ChangeAnswer</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="4e4435dd-077d-4bf1-a0da-0ef46339bb12" name="Xpath: assert Receiver">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_RECEIVER_ID/text()</path>
              <content>${#TestSuite#recipientId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Sel_CTP" id="a18a3837-2556-4a85-b11a-0771e91041ec">
        <con:settings/>
        <con:config>
          <script>//Please send CTP for ${#TestCase#switchId}
//CTRA expected in ${#TestSuite#recipientMessage}, if GUI
//verify for ${#TestSuite#recipient} that the CTRA email is received
import nl.coin.Selenium.SampleTest;
import nl.coin.Selenium.SeleniumActions;
import nl.coin.Selenium.JavaActions;
def seleniumHandle = new SeleniumActions();
def javaHandle = new JavaActions();
def guiUrl = testRunner.testCase.testSuite.project.getPropertyValue("GUIUrl")
def browser = testRunner.testCase.testSuite.getPropertyValue("browser")
def recipient = testRunner.testCase.testSuite.getPropertyValue("recipient")
def donor = testRunner.testCase.testSuite.getPropertyValue("donor")
def contractId = testRunner.testCase.getPropertyValue("contractId")
def switchId = testRunner.testCase.getPropertyValue("switchId")
def projectName = testRunner.testCase.testSuite.project.name
def testSuiteName = testRunner.testCase.testSuite.name
def testCaseName = testRunner.testCase.name
def testStepName = context.getCurrentStep().getLabel()
log.info seleniumHandle.setScreenShotName(projectName+"_"+testSuiteName+"_"+testCaseName+"_"+testStepName)
//Open the browser
def driver = seleniumHandle.openBrowser(browser);
//Login to application
log.info seleniumHandle.browseURL(guiUrl);
log.info(driver.getTitle());
def sampleArray = seleniumHandle.getCredentials(recipient)
log.info seleniumHandle.enterData("HomePage","userName", sampleArray[0]);
log.info seleniumHandle.enterData("HomePage","passWord", sampleArray[1]);
//log.info seleniumHandle.clickObject("HomePage","8HrsSession");
log.info seleniumHandle.clickObject("HomePage","login");
log.info seleniumHandle.clickObject("HomePage","dossiers");
//Click on Performed menu
log.info seleniumHandle.clickObject("HomePage","CancelMenu");
//Get the locator of viewDetails with current dossierID
def byViewDetails =  seleniumHandle.byLocator("HomePage","viewDetailsProper", switchId);
//Click on the view details button
log.info seleniumHandle.clickObject(byViewDetails);
//Enter performed note
log.info seleniumHandle.enterData("HomePage","PerformedNote",switchId);
//click on Send Performed button
log.info seleniumHandle.clickObjectAtLocation("HomePage","SendPerformed")
log.info seleniumHandle.getText("HomePage","resultMessage");
log.info seleniumHandle.quitBrowser();</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_CTD Table_CTP" id="6cc6bc13-ca0b-4b82-b92d-8333f5de7a8c">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.contract_termination_dossier 
where id = '${#TestCase#ctdId}'</con:query>
          <con:assertion type="XPath Match" name="Xpath: Check for existance of CTD record" id="bf10f636-c029-4dda-9a44-2917d2188cb9">
            <con:configuration>
              <path>//CTD_SWITCHID</path>
              <content>*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_process_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_PROCESS_STATUS</path>
              <content>Performed</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" name="Xpath: Verify CTD_dossier_status" id="42b26293-88b7-42bf-b393-0a828138e4b6">
            <con:configuration>
              <path>//CTD_DOSSIER_STATUS</path>
              <content>Completed</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="57872de4-e3eb-4ac6-a875-9146689f119f" name="Xpath: Verify ctd_ctp_buffering">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/CTD_CTP_BUFFERING[1]</path>
              <content>f</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="5d1906d9-833e-4c0e-a60e-6f721ded678c" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_DM Table_CTP" id="8bbaf70a-61df-4641-ac36-55daf156aaad">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select DM.*, IT.IT_INTERFACE_TYPE 
from overstappen.dossier_messages DM left join overstappen.interface_type IT 
on DM.dm_it_id = IT.id 
where dm_ctd_id = ${#TestCase#ctdId} 
and dm_mst_id=5 
order by createddate desc</con:query>
          <con:assertion type="JDBC Status" id="9522087d-47b9-4f57-a36e-06f3b8b0df6e" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="8273aa94-4170-4178-ad8f-472138da1833" name="Xpath: 1">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/IT_INTERFACE_TYPE[1]</path>
              <content>GUI</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="5d93e320-b36f-4283-907d-1fba578a31df" name="Script: SaveDM_ID">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def Id = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results/ResultSet/Row/ID", "ctpDMId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_MSL Table_CTP" id="65765060-9581-4fe8-a59c-f59cfd0d7498">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.message_logging 
where msl_ctd_id=${#TestCase#ctdId} 
and msl_dm_id=${#TestCase#ctpdmId}</con:query>
          <con:assertion type="XPath Match" name="Xpath: assert MSL_CLC_ID]" id="e99eef8e-047f-4dff-930b-7b92f2348249">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/MSL_CLC_ID[1]/text()</path>
              <content>57</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="JDBC Status" id="e095441a-3cf8-4288-8e40-4300718feece" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="26a10fc7-0032-44c7-a379-d3aa026bff83" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_SXM Table_CTP" id="24156f6b-deb3-44d0-8cfb-f1cae06e7cd8">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.soap_xml_messages where
sxm_xml_message like '%${#TestCase#switchId}%'
and sxm_xml_message_type = 'Performed'
and sxm_sender = '${#TestSuite#recipient}'
and sxm_receiver = '${#TestSuite#donor}'</con:query>
          <con:assertion type="JDBC Status" id="c475aacc-95de-4284-a9f8-4767c70e9910" name="JDBC Status"/>
          <con:assertion type="Simple NotContains" id="836d44cf-beaa-49c2-8a5e-5cf16be2ea85" name="NotContains: Not Contains" disabled="true">
            <con:configuration>
              <token>&lt;Row rowNumber="1"></token>
              <ignoreCase>false</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="ad98d404-ebdd-4338-b29a-fe44c6ecf63d" name="Xpath: assert DMId" disabled="true">
            <con:configuration>
              <path>/Results/ResultSet/Row/SXM_DM_ID/text()</path>
              <content>${#TestCase#ctrDMId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="696ffc21-ade8-4452-b52b-b09a6c4243f6" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Delay0" id="9857fbfc-83ac-499c-85df-8a427533f51d">
        <con:settings/>
        <con:config>
          <delay>1</delay>
        </con:config>
      </con:testStep>
      <con:setupScript>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import groovy.time.TimeCategory
def today = new Date() 
def now = today.format("yyyy-MM-dd'T'HH:mm:ss")
def wishdate = today 
use(TimeCategory) {
	   wishdate = wishdate + 1.day
}
def wishdatestr = wishdate.format("yyyy-MM-dd'T'HH:mm:ss")
def cwishdatestr = wishdate.format("yyyy-MM-dd' 'HH:mm:ss")
def guiwishdate = wishdate.format("yyyy-MM-dd")
//ctch wish date
def proposeddate = today
use(TimeCategory) {
	   proposeddate = proposeddate + 200.seconds
}
def proposeddatestr = proposeddate.format("yyyy-MM-dd'T'HH:mm:ss")
def propdatestr = proposeddate.format("yyyy-MM-dd' 'HH:mm:ss")
def guich1wd = proposeddate.format("yyy-MM-dd")
// chch2 proposeddate for OK
def ctch2proposeddate = today
use(TimeCategory) {
	   ctch2proposeddate = ctch2proposeddate + 3.days
}
def ctch2proposeddatestr = ctch2proposeddate.format("yyyy-MM-dd'T'HH:mm:ss")
def ctch2propdatestr = ctch2proposeddate.format("yyyy-MM-dd' 'HH:mm:ss")
def guich2wd = ctch2proposeddate.format("yyyy-MM-dd")
// ctcha2 proposeddate for blocking
def ctcha2proposeddate = today
use(TimeCategory) {
	   ctcha2proposeddate = ctcha2proposeddate + 4.days
}
def ctcha2proposeddatestr = ctcha2proposeddate.format("yyyy-MM-dd'T'HH:mm:ss")
def ctcha2propdatestr = ctcha2proposeddate.format("yyyy-MM-dd' 'HH:mm:ss")
testRunner.testCase.setPropertyValue("Now",now)
testRunner.testCase.setPropertyValue("wishDate",wishdatestr)
testRunner.testCase.setPropertyValue("cwishDate",cwishdatestr)
testRunner.testCase.setPropertyValue("guiWishDate",guiwishdate)
testRunner.testCase.setPropertyValue("ctcha2ProposedDate",ctcha2proposeddatestr)
testRunner.testCase.setPropertyValue("ctcha2PropDate",ctcha2propdatestr)
testRunner.testCase.setPropertyValue("proposedDate",proposeddatestr)
testRunner.testCase.setPropertyValue("propDate",propdatestr)
testRunner.testCase.setPropertyValue("guiCh1Wd",guich1wd)
testRunner.testCase.setPropertyValue("ctch2ProposedDate",ctch2proposeddatestr)
testRunner.testCase.setPropertyValue("ctch2PropDate",ctch2propdatestr)
testRunner.testCase.setPropertyValue("guiCh2Wd",guich2wd)
String contractId = funcHandle.getRandomString(9, "15-");
testRunner.testCase.setPropertyValue("contractId",contractId)</con:setupScript>
      <con:tearDownScript/>
      <con:properties/>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>122d3297-f22d-449f-ac52-c46f1bfb714e</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:properties>
      <con:property>
        <con:name>TimestampNOW</con:name>
        <con:value>${=String.format('%tFT%&lt;tT', new Date())}</con:value>
      </con:property>
      <con:property>
        <con:name>PollTime</con:name>
        <con:value>10000</con:value>
      </con:property>
      <con:property>
        <con:name>lineNumber</con:name>
        <con:value>0</con:value>
      </con:property>
      <con:property>
        <con:name>testdatafile</con:name>
        <con:value>mailNotifications.csv</con:value>
      </con:property>
      <con:property>
        <con:name>browser</con:name>
        <con:value>firefox</con:value>
      </con:property>
    </con:properties>
    <con:setupScript>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
import org.apache.commons.lang.RandomStringUtils
import groovy.time.TimeCategory
import nl.coin.Selenium.*;
def directory = groovyUtils.projectPath + "/"
System.setProperty("projectfiledir", directory)
def seleniumHandle = new SeleniumActions();
def funcHandle = new ReadymadeFunctions();
def Line = funcHandle.getTestDataAndIncreaseLinenumber(testSuite, directory);
String[] propData = Line.split(";")
funcHandle.setRecipientAndDonorSoapCredentials(seleniumHandle, testSuite, directory, propData[0], propData[1]);
testSuite.setPropertyValue("soapVersion",propData[2])
testSuite.setPropertyValue("dossierType",propData[3])
testSuite.setPropertyValue("compensationOK",propData[4])
testSuite.setPropertyValue("donorSoapVersion",propData[5])
def donorDossierType;
if (propData[5] == 'v2'){
  donorDossierType = "";
} else if (!propData[3].equalsIgnoreCase("&lt;business>Y&lt;/business>")) {
  donorDossierType = "&lt;business>N&lt;/business>"
} else {
  donorDossierType = propData[3];
}
testSuite.setPropertyValue("donorDossierType",donorDossierType);
import groovy.sql.Sql;
def  con = funcHandle.createDBConObject(testSuite);
def recepientDetails = funcHandle.setProperty4mDB(testSuite, con, "select spr_code, it_interface_type,business_gui_only from overstappen.service_provider inner join overstappen.interface_type on service_provider.spr_request_it_id = interface_type.id where service_provider.spr_code = '"+ propData[0]+"'", ["business_gui_only", "it_interface_type"] as String[], ["recipientbgo", "recipientif"] as String[]);
def donorDetails = funcHandle.setProperty4mDB(testSuite, con, "select spr_code, it_interface_type,business_gui_only from overstappen.service_provider inner join overstappen.interface_type on service_provider.spr_request_it_id = interface_type.id where service_provider.spr_code = '"+ propData[1]+"'", ["business_gui_only", "it_interface_type"] as String[], ["donorbgo", "donorif"] as String[]);
testSuite.setPropertyValue("RecipientInterface", recepientDetails[1])
testSuite.setPropertyValue("recBusinessGuiOnly", recepientDetails[0])
testSuite.setPropertyValue("DonorInterface", donorDetails[1])
testSuite.setPropertyValue("businessGuiOnly", donorDetails[0])
funcHandle.setProperty4mDB(testSuite, con, "select id from overstappen.service_provider where spr_code='"+ propData[0]+"'", "id", "recipientId")
funcHandle.setProperty4mDB(testSuite, con, "select id from overstappen.service_provider where spr_code='"+ propData[1]+"'", "id", "donorId");
funcHandle.getOutgoingMsgTypeAndSetProperty(testSuite, propData[3], recepientDetails[0], recepientDetails[1], "donorOutMsg");
funcHandle.getOutgoingMsgTypeAndSetProperty(testSuite, propData[3], donorDetails[0], donorDetails[1], "recipientOutMsg");
con.close()</con:setupScript>
    <con:tearDownScript/>
    <con:reportParameters/>
  </con:testSuite>
  <con:testSuite name="3.5.3_4_Cancel/Confirmation_Mails" id="036b5036-ae22-4d84-91f4-9cb778f8c17c" disabled="true">
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase id="2752fc17-c40c-4967-8a66-bd385f7c5736" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RequestAnswerOK_14Days" searchProperties="true">
      <con:settings/>
      <con:testStep type="jdbc" name="JDBC_CTD Table_CTR" id="54b5548f-a588-463c-be86-8bde98335310">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select ctd.* from overstappen.service_provider sp 
inner join overstappen.contract_termination_dossier ctd 
on sp.id =ctd.ctd_spr_recipient_id 
where spr_cancel_automatic=true 
and ctd.ctd_process_status = 'Request Answer OK' 
and extract(year from ctd.ctd_requesteddatetime)= ${#TestSuite#past14thWorkingDayYear}
and extract(month from ctd.ctd_requesteddatetime)= ${#TestSuite#past14thWorkingDayMonth}
and extract(day from ctd.ctd_requesteddatetime)= ${#TestSuite#past14thWorkingDayDay}
order by ctd.CTD_REQUESTEDDATETIME asc</con:query>
          <con:assertion type="JDBC Status" id="6b7fa186-01ea-4b41-ade7-6132cd7f23d0" name="JDBC Status"/>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: assert ion ctd_id" disabled="true">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def ctdid = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctdId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: Save SwitchId" disabled="true">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def switchId = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/CTD_SWITCHID[1]", "switchId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: Save RequestedDateTime" disabled="true">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def requestedDateTime = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/CTD_REQUESTEDDATETIME[1]", "requestedDateTime");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: Save DonorName">
            <con:configuration>
              <scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def DonorId = holder.getNodeValue("//Results[1]/ResultSet[1]/Row[1]/CTD_SPR_DONOR_ID[1]")
def dbhostname = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("DBHostname")
def dbport = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("DBPort")
def dbuser = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("DBUser")
def dbpassword = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("DBPassword")
def dbdatabase = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("DBDatabase")
import groovy.sql.Sql;
import com.mysql.jdbc.*
//Establish JDBC Connection to the DB
def  con = Sql.newInstance("jdbc:postgresql://"+dbhostname+":"+dbport+"/"+dbdatabase+"?user="+dbuser+"&amp;password="+dbpassword);
def query = con.rows("select spr_name from overstappen.service_provider where id="+ DonorId)
log.info ("Query result: "+ query)
log.info query.get(0).getProperty("spr_name")
messageExchange.modelItem.testStep.testCase.setPropertyValue( "donorName", query.get(0).getProperty("spr_name").toString() )</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="19caaaa6-5934-4cd7-afae-307b38bd09be" name="Script: Save ID">
            <con:configuration>
              <scriptText>import com.eviware.soapui.support.XmlHolder
import nl.coin.Selenium.*;
def javaHandle = new JavaActions();
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def resArray = holder.getNodeValues("//Results/ResultSet/Row/ID")
def result = javaHandle.array2String(resArray);
messageExchange.modelItem.testStep.testCase.setPropertyValue("ctdId",result);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="19caaaa6-5934-4cd7-afae-307b38bd09be" name="Script: Save CTD_SWITCHID">
            <con:configuration>
              <scriptText>import com.eviware.soapui.support.XmlHolder
import nl.coin.Selenium.*;
def javaHandle = new JavaActions();
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def resArray = holder.getNodeValues("//Results/ResultSet/Row/CTD_SWITCHID")
def result = javaHandle.array2String(resArray);
messageExchange.modelItem.testStep.testCase.setPropertyValue("switchid",result);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="19caaaa6-5934-4cd7-afae-307b38bd09be" name="Script: Save CTD_REQUESTEDDATETIME">
            <con:configuration>
              <scriptText>import com.eviware.soapui.support.XmlHolder
import nl.coin.Selenium.*;
def javaHandle = new JavaActions();
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def resArray = holder.getNodeValues("//Results/ResultSet/Row/CTD_REQUESTEDDATETIME")
def result = javaHandle.array2String(resArray);
messageExchange.modelItem.testStep.testCase.setPropertyValue("requesteddatetime",result);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="19caaaa6-5934-4cd7-afae-307b38bd09be" name="Script: Save CTD_SPR_DONOR_ID">
            <con:configuration>
              <scriptText>import com.eviware.soapui.support.XmlHolder
import nl.coin.Selenium.*;
def javaHandle = new JavaActions();
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def resArray = holder.getNodeValues("//Results/ResultSet/Row/CTD_SPR_DONOR_ID")
def result = javaHandle.array2String(resArray);
messageExchange.modelItem.testStep.testCase.setPropertyValue("donorid",result);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy: resultantValues" id="375771cd-670c-4209-8892-0ce752f63091">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.*;

def javaHandle = new JavaActions();

def ctdId = testRunner.testCase.getPropertyValue("ctdId");
def switchId = testRunner.testCase.getPropertyValue("switchId");
def requestedDateTime = testRunner.testCase.getPropertyValue("requestedDateTime");
def donorid = testRunner.testCase.getPropertyValue("donorid");

def result = javaHandle.getPastTimeRecords(ctdId, switchId, requestedDateTime, donorid);

testRunner.testCase.setPropertyValue("resCtdId",result[0]);
testRunner.testCase.setPropertyValue("resSwitchId",result[1]);
testRunner.testCase.setPropertyValue("resRequestedDateTime",result[2]);
testRunner.testCase.setPropertyValue("resDonorId",result[3]);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="CheckMail" id="448210e7-6611-427b-b263-b9f9fb30491c" disabled="true">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.SampleTest;
import nl.coin.Selenium.SeleniumActions;
import nl.coin.Selenium.JavaActions;
import java.text.SimpleDateFormat;

def javaHandle = new JavaActions();
def now = testRunner.testCase.getPropertyValue("Now")
def requestedDateTime = testRunner.testCase.getPropertyValue("requestedDateTime")
def donorName = testRunner.testCase.getPropertyValue("donorName")

def date = javaHandle.convertDateFormat(now, "yyyy-MM-dd'T'HH:mm:ss", "yyyy-MM-dd")
def time = javaHandle.convertDateFormat(requestedDateTime, "yyyy-MM-dd' 'HH:mm:ss", "HH:mm:ss")

def todayMailTime = date + " "+ time
log.info todayMailTime

//todayMailTime should be more than current time+15 min
Calendar calendar = Calendar.getInstance();

calendar.setTime(new SimpleDateFormat("yyyy-MM-dd' 'HH:mm:ss").parse(todayMailTime));
calendar.add(Calendar.MINUTE, 15);
		
boolean before = new Date().after(calendar.getTime());
log.info before
if(before) {
	log.info "Mail is generated"
	
	def expectedSubject = "COIN COMP cancel warning : "+javaHandle.convertDateFormat(now, "yyyy-MM-dd'T'HH:mm:ss", "dd-MM-yyyy")+" for provider "+donorName
	log.info expectedSubject

	def verification = javaHandle.checkInUnreadMails(expectedSubject, todayMailTime, "yyyy-MM-dd' 'HH:mm:ss")

	if(!verification) {
		testRunner.fail("No mail is displayed")
	} else {
		log.info "mail displayed with the given preconditions"
	}
} else {
	log.info "Mail is not yest genarated"
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="CheckMail" id="d408f30a-9b3e-4f6f-9997-32b37ac4a8e6" disabled="true">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.SampleTest;
import nl.coin.Selenium.SeleniumActions;
import nl.coin.Selenium.JavaActions;
import java.text.SimpleDateFormat;

def seleniumHandle = new SeleniumActions()
def javaHandle = new JavaActions();
def now = testRunner.testCase.getPropertyValue("Now")
def requestedDateTime = testRunner.testCase.getPropertyValue("requestedDateTime")
def donorName = testRunner.testCase.getPropertyValue("donorName")
def switchId = testRunner.testCase.getPropertyValue("switchId")

def date = javaHandle.convertDateFormat(now, "yyyy-MM-dd'T'HH:mm:ss", "yyyy-MM-dd")
def time = javaHandle.convertDateFormat(requestedDateTime, "yyyy-MM-dd' 'HH:mm:ss", "HH:mm:ss")

def todayMailTime = date + " "+ time
log.info todayMailTime

//todayMailTime should be more than current time+15 min
Calendar calendar = Calendar.getInstance();

calendar.setTime(new SimpleDateFormat("yyyy-MM-dd' 'HH:mm:ss").parse(todayMailTime));
calendar.add(Calendar.MINUTE, 15);
		
boolean before = new Date().after(calendar.getTime());
if(before) {
	log.info "Mail is generated"
	
	def expectedSubject = "COIN COMP cancel warning : "+javaHandle.convertDateFormat(now, "yyyy-MM-dd'T'HH:mm:ss", "dd-MM-yyyy")+" for provider "+donorName
	log.info expectedSubject

	def verification = javaHandle.verifyMailContent(expectedSubject, todayMailTime, "yyyy-MM-dd' 'HH:mm:ss", switchId)

	if(!verification) {
		testRunner.fail("No mail is displayed")
	} else {
		log.info "mail displayed with the given preconditions"
	}
} else {
	log.info "Mail is not yest genarated"
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_EL Table_CTRA" id="74b8894e-e178-49b6-b4a4-7fb893d17bc4">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.email_logging el join overstappen.email_logging_detail eld on el.el_detail_id = eld.id 
where el_reason='CancelScript' 
and el_subject like 'COIN COMP cancel warning : ${#TestSuite#todaydate}%'
and el_body like '%Change Answer OK%'
order by el.id desc limit 100</con:query>
          <con:assertion type="JDBC Status" id="5b056277-e6ec-404a-99fc-8472b329b9f9" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="08c804f2-1638-4310-89c5-8ddef67cc36e" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_Body">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_BODY/text()</path>
              <content>*Functional Error 216 - Invalid Switch Id for the request recieved*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_SUBJECT">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_SUBJECT/text()</path>
              <content>*Functional Error 216*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_REASON">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_REASON/text()</path>
              <content>Notification</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="68473dbd-5cb3-4914-92f6-1f226e130c54" name="Xpath: assert Receiver">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_RECEIVER_ID/text()</path>
              <content>${#TestSuite#donorId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.time.TimeCategory
import nl.coin.Selenium.JavaActions;
def javaHandle = new JavaActions();
def today = new Date() 
def now = today.format("yyyy-MM-dd'T'HH:mm:ss")
testRunner.testCase.setPropertyValue("Now",now)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase id="ac646a1f-3c29-42de-a72c-56ad1aad656b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RequestAnswerOK_15Days" searchProperties="true">
      <con:settings/>
      <con:testStep type="jdbc" name="JDBC_CTD Table_CTR" id="01b0aa1b-ae46-449f-9860-006a6b7d176e">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select ctd.* from overstappen.service_provider sp 
inner join overstappen.contract_termination_dossier ctd 
on sp.id =ctd.ctd_spr_recipient_id 
where spr_cancel_automatic=true 
and ctd.ctd_process_status = 'Request Answer OK' 
and extract(year from ctd.ctd_requesteddatetime)= ${#TestSuite#past15thWorkingDayYear} 
and extract(month from ctd.ctd_requesteddatetime)= ${#TestSuite#past15thWorkingDayMonth} 
and extract(day from ctd.ctd_requesteddatetime)= ${#TestSuite#past15thWorkingDayDay} 
order by ctd.CTD_REQUESTEDDATETIME asc</con:query>
          <con:assertion type="JDBC Status" id="6b7fa186-01ea-4b41-ade7-6132cd7f23d0" name="JDBC Status"/>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: assert ion ctd_id">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def ctdid = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctdId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: Save SwitchId">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def switchId = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/CTD_SWITCHID[1]", "switchId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: Save RequestedDateTime">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def requestedDateTime = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/CTD_REQUESTEDDATETIME[1]", "requestedDateTime");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: Save DonorName">
            <con:configuration>
              <scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
String[] resArray = holder.getNodeValues("//Results/ResultSet/Row/ID/")
String result = "";
for (String str: resArray) {
	result = result + str + ",";
}
if (result.endsWith(",")) {
	result = result.subString (0, result.length -1);
}
messageExchange.modelItem.testStep.testCase.setPropertyValue("ctdId",result);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="copy">
            <con:configuration>
              <scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
String[] resArray = holder.getNodeValues("//Results/ResultSet/Row/ID/")
String result = "";
for (String str: resArray) {
	result = result + str + ",";
}
if (result.endsWith(",")) {
	result = result.subString (0, result.length -1);
}
messageExchange.modelItem.testStep.testCase.setPropertyValue("ctdId",result);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="copy1">
            <con:configuration>
              <scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
String[] resArray = holder.getNodeValues("//Results/ResultSet/Row/CTD_SWITCHID/")
String result = "";
for (String str: resArray) {
	result = result + str + ",";
}
if (result.endsWith(",")) {
	result = result.subString (0, result.length -1);
}
messageExchange.modelItem.testStep.testCase.setPropertyValue("ctdSwitchID",result);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="copy2">
            <con:configuration>
              <scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
String[] resArray = holder.getNodeValues("//Results/ResultSet/Row/REQUESTEDDATETIME/")
String result = "";
for (String str: resArray) {
	result = result + str + ",";
}
if (result.endsWith(",")) {
	result = result.subString (0, result.length -1);
}
messageExchange.modelItem.testStep.testCase.setPropertyValue("ctdSwitchID",result);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Wait For mail" id="7963e243-7764-4f78-bd32-014992038d84">
        <con:settings/>
        <con:config>
          <delay>${#TestSuite#PollTime}</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="CheckMail" id="0ee0ba28-fdbd-4429-9884-c4fb2702c5ce" disabled="true">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.SampleTest;
import nl.coin.Selenium.SeleniumActions;
import nl.coin.Selenium.JavaActions;
import java.text.SimpleDateFormat;

def seleniumHandle = new SeleniumActions()
def javaHandle = new JavaActions();
def now = testRunner.testCase.getPropertyValue("Now")
def requestedDateTime = testRunner.testCase.getPropertyValue("requestedDateTime")
def donorName = testRunner.testCase.getPropertyValue("donorName")

def date = javaHandle.convertDateFormat(now, "yyyy-MM-dd'T'HH:mm:ss", "yyyy-MM-dd")
def time = javaHandle.convertDateFormat(requestedDateTime, "yyyy-MM-dd' 'HH:mm:ss", "HH:mm:ss")

def todayMailTime = date + " "+ time
log.info todayMailTime

//todayMailTime should be more than current time+15 min
Calendar calendar = Calendar.getInstance();

calendar.setTime(new SimpleDateFormat("yyyy-MM-dd' 'HH:mm:ss").parse(todayMailTime));
calendar.add(Calendar.MINUTE, 15);
		
boolean before = new Date().after(calendar.getTime());
log.info before
if(before) {
	log.info "Mail is generated"
	
	def expectedSubject = "COIN COMP cancel warning : "+javaHandle.convertDateFormat(now, "yyyy-MM-dd'T'HH:mm:ss", "dd-MM-yyyy")+" for provider "+donorName
	log.info expectedSubject

	def verification = javaHandle.checkInUnreadMails(expectedSubject, todayMailTime, "yyyy-MM-dd' 'HH:mm:ss")

	if(!verification) {
		testRunner.fail("No mail is displayed")
	} else {
		log.info "mail displayed with the given preconditions"
	}
} else {
	log.info "Mail is not yest genarated"
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="CheckMail" id="649b6c72-916d-4014-9644-40b4204eb11a" disabled="true">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.SampleTest;
import nl.coin.Selenium.SeleniumActions;
import nl.coin.Selenium.JavaActions;
import java.text.SimpleDateFormat;

def seleniumHandle = new SeleniumActions()
def javaHandle = new JavaActions();
def now = testRunner.testCase.getPropertyValue("Now")
def requestedDateTime = testRunner.testCase.getPropertyValue("requestedDateTime")
def donorName = testRunner.testCase.getPropertyValue("donorName")
def switchId = testRunner.testCase.getPropertyValue("switchId")

def date = javaHandle.convertDateFormat(now, "yyyy-MM-dd'T'HH:mm:ss", "yyyy-MM-dd")
def time = javaHandle.convertDateFormat(requestedDateTime, "yyyy-MM-dd' 'HH:mm:ss", "HH:mm:ss")

def todayMailTime = date + " "+ time
log.info todayMailTime

//todayMailTime should be more than current time+15 min
Calendar calendar = Calendar.getInstance();

calendar.setTime(new SimpleDateFormat("yyyy-MM-dd' 'HH:mm:ss").parse(todayMailTime));
calendar.add(Calendar.MINUTE, 15);
		
boolean before = new Date().after(calendar.getTime());
if(before) {
	log.info "Mail is generated"
	
	def expectedSubject = "COIN COMP cancel warning : "+javaHandle.convertDateFormat(now, "yyyy-MM-dd'T'HH:mm:ss", "dd-MM-yyyy")+" for provider "+donorName
	log.info expectedSubject

	def verification = javaHandle.verifyMailContent(expectedSubject, todayMailTime, "yyyy-MM-dd' 'HH:mm:ss", switchId)

	if(!verification) {
		testRunner.fail("No mail is displayed")
	} else {
		log.info "mail displayed with the given preconditions"
	}
} else {
	log.info "Mail is not yest genarated"
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_EL Table_CTRA" id="65524f52-2bb9-4fe6-acdc-2e885ffcb831">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.email_logging el join overstappen.email_logging_detail eld on el.el_detail_id = eld.id 
where el_reason='CancelScript' 
and el_subject like 'COIN COMP cancel warning : ${#TestSuite#todaydate}%'
and el_body like '%Change Answer OK%'
order by el.id desc limit 100</con:query>
          <con:assertion type="JDBC Status" id="5b056277-e6ec-404a-99fc-8472b329b9f9" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="08c804f2-1638-4310-89c5-8ddef67cc36e" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_Body">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_BODY/text()</path>
              <content>*Functional Error 216 - Invalid Switch Id for the request recieved*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_SUBJECT">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_SUBJECT/text()</path>
              <content>*Functional Error 216*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_REASON">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_REASON/text()</path>
              <content>Notification</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="68473dbd-5cb3-4914-92f6-1f226e130c54" name="Xpath: assert Receiver">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_RECEIVER_ID/text()</path>
              <content>${#TestSuite#donorId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.time.TimeCategory
import nl.coin.Selenium.JavaActions;
def javaHandle = new JavaActions();
def today = new Date() 
def now = today.format("yyyy-MM-dd'T'HH:mm:ss")
testRunner.testCase.setPropertyValue("Now",now)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase id="6f501859-28fe-49f6-b0a2-a9d2db94101f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RequestAnswerOK_16Days" searchProperties="true">
      <con:settings/>
      <con:testStep type="jdbc" name="JDBC_CTD Table_CTR" id="50f5aaec-4a85-4e63-9961-ffd6bb8cf1db">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select ctd.* from overstappen.service_provider sp 
inner join overstappen.contract_termination_dossier ctd 
on sp.id =ctd.ctd_spr_recipient_id 
where spr_cancel_automatic=true 
and ctd.ctd_process_status = 'Request Answer OK' 
and extract(year from ctd.ctd_requesteddatetime)= ${#TestSuite#past16thWorkingDayYear} 
and extract(month from ctd.ctd_requesteddatetime)= ${#TestSuite#past16thWorkingDayMonth} 
and extract(day from ctd.ctd_requesteddatetime)= ${#TestSuite#past16thWorkingDayDay} 
order by ctd.CTD_REQUESTEDDATETIME asc</con:query>
          <con:assertion type="JDBC Status" id="6b7fa186-01ea-4b41-ade7-6132cd7f23d0" name="JDBC Status"/>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: assert ion ctd_id">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def ctdid = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctdId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: Save SwitchId">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def switchId = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/CTD_SWITCHID[1]", "switchId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: Save RequestedDateTime">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def requestedDateTime = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/CTD_REQUESTEDDATETIME[1]", "requestedDateTime");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: Save DonorName">
            <con:configuration>
              <scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def DonorId = holder.getNodeValue("//Results[1]/ResultSet[1]/Row[1]/CTD_SPR_DONOR_ID[1]")
def dbhostname = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("DBHostname")
def dbport = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("DBPort")
def dbuser = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("DBUser")
def dbpassword = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("DBPassword")
def dbdatabase = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("DBDatabase")
import groovy.sql.Sql;
import com.mysql.jdbc.*
//Establish JDBC Connection to the DB
def  con = Sql.newInstance("jdbc:postgresql://"+dbhostname+":"+dbport+"/"+dbdatabase+"?user="+dbuser+"&amp;password="+dbpassword);
def query = con.rows("select spr_name from overstappen.service_provider where id="+ DonorId)
log.info ("Query result: "+ query)
log.info query.get(0).getProperty("spr_name")
messageExchange.modelItem.testStep.testCase.setPropertyValue( "donorName", query.get(0).getProperty("spr_name").toString() )</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Wait For mail" id="d6d25e84-3f3f-48e3-a947-89e50a5c4341">
        <con:settings/>
        <con:config>
          <delay>${#TestSuite#PollTime}</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="CheckMail" id="a182a8c8-562b-4ab6-88cf-4c39584906bc" disabled="true">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.SampleTest;
import nl.coin.Selenium.SeleniumActions;
import nl.coin.Selenium.JavaActions;
import java.text.SimpleDateFormat;

def seleniumHandle = new SeleniumActions()
def javaHandle = new JavaActions();
def now = testRunner.testCase.getPropertyValue("Now")
def requestedDateTime = testRunner.testCase.getPropertyValue("requestedDateTime")
def donorName = testRunner.testCase.getPropertyValue("donorName")

def date = javaHandle.convertDateFormat(now, "yyyy-MM-dd'T'HH:mm:ss", "yyyy-MM-dd")
def time = javaHandle.convertDateFormat(requestedDateTime, "yyyy-MM-dd' 'HH:mm:ss", "HH:mm:ss")

def todayMailTime = date + " "+ time
log.info todayMailTime

//todayMailTime should be more than current time+15 min
Calendar calendar = Calendar.getInstance();

calendar.setTime(new SimpleDateFormat("yyyy-MM-dd' 'HH:mm:ss").parse(todayMailTime));
calendar.add(Calendar.MINUTE, 15);
		
boolean before = new Date().after(calendar.getTime());
log.info before
if(before) {
	log.info "Mail is generated"
	
	def expectedSubject = "COIN COMP cancel confirmation : "+javaHandle.convertDateFormat(now, "yyyy-MM-dd'T'HH:mm:ss", "dd-MM-yyyy")+" for provider "+donorName
	log.info expectedSubject

	def verification = javaHandle.checkInUnreadMails(expectedSubject, todayMailTime, "yyyy-MM-dd' 'HH:mm:ss")

	if(!verification) {
		testRunner.fail("No mail is displayed")
	} else {
		log.info "mail displayed with the given preconditions"
	}
} else {
	log.info "Mail is not yest genarated"
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="CheckMail" id="ea6d88c0-6045-4620-99ff-5cfe85a28b01" disabled="true">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.SampleTest;
import nl.coin.Selenium.SeleniumActions;
import nl.coin.Selenium.JavaActions;
import java.text.SimpleDateFormat;

def seleniumHandle = new SeleniumActions()
def javaHandle = new JavaActions();
def now = testRunner.testCase.getPropertyValue("Now")
def requestedDateTime = testRunner.testCase.getPropertyValue("requestedDateTime")
def donorName = testRunner.testCase.getPropertyValue("donorName")
def switchId = testRunner.testCase.getPropertyValue("switchId")

def date = javaHandle.convertDateFormat(now, "yyyy-MM-dd'T'HH:mm:ss", "yyyy-MM-dd")
def time = javaHandle.convertDateFormat(requestedDateTime, "yyyy-MM-dd' 'HH:mm:ss", "HH:mm:ss")

def todayMailTime = date + " "+ time
log.info todayMailTime

//todayMailTime should be more than current time+15 min
Calendar calendar = Calendar.getInstance();

calendar.setTime(new SimpleDateFormat("yyyy-MM-dd' 'HH:mm:ss").parse(todayMailTime));
calendar.add(Calendar.MINUTE, 15);
		
boolean before = new Date().after(calendar.getTime());
if(before) {
	log.info "Mail is generated"
	
	def expectedSubject = "COIN COMP cancel confirmation : "+javaHandle.convertDateFormat(now, "yyyy-MM-dd'T'HH:mm:ss", "dd-MM-yyyy")+" for provider "+donorName
	log.info expectedSubject

	def verification = javaHandle.verifyMailContent(expectedSubject, todayMailTime, "yyyy-MM-dd' 'HH:mm:ss", switchId)

	if(!verification) {
		testRunner.fail("No mail is displayed")
	} else {
		log.info "mail displayed with the given preconditions"
	}
} else {
	log.info "Mail is not yest genarated"
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_EL Table_CTCHA" id="0f6407b7-38ad-432c-91cf-5c3ba390e271">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.email_logging el join overstappen.email_logging_detail eld on el.el_detail_id = eld.id 
where el_reason='CancelScript' 
and el_subject like 'COIN COMP cancel confirmation : ${#TestSuite#todaydate}%'
and el_body like '%Request Answer OK%'
order by el.id desc limit 100</con:query>
          <con:assertion type="JDBC Status" id="5b056277-e6ec-404a-99fc-8472b329b9f9" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="08c804f2-1638-4310-89c5-8ddef67cc36e" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_Body">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_BODY/text()</path>
              <content>*Functional Error 216 - Invalid Switch Id for the request recieved*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_SUBJECT">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_SUBJECT/text()</path>
              <content>*Functional Error 216*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_REASON">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_REASON/text()</path>
              <content>Notification</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="68473dbd-5cb3-4914-92f6-1f226e130c54" name="Xpath: assert Receiver">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_RECEIVER_ID/text()</path>
              <content>${#TestSuite#donorId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.time.TimeCategory
import nl.coin.Selenium.JavaActions;
def javaHandle = new JavaActions();
def today = new Date() 
def now = today.format("yyyy-MM-dd'T'HH:mm:ss")
testRunner.testCase.setPropertyValue("Now",now)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase id="48edfad3-f343-4628-97b6-3a5c56e94571" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Change_14Days" searchProperties="true">
      <con:settings/>
      <con:testStep type="jdbc" name="JDBC_CTD Table_CTR" id="919d9626-fa51-4d07-ad4e-7911023cee6f">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select ctd.* from overstappen.service_provider sp 
inner join overstappen.contract_termination_dossier ctd 
on sp.id =ctd.ctd_spr_recipient_id 
where spr_cancel_automatic=true 
and ctd.ctd_process_status = 'Change' 
and extract(year from ctd.ctd_requesteddatetime)= ${#TestSuite#past14thWorkingDayYear} 
and extract(month from ctd.ctd_requesteddatetime)= ${#TestSuite#past14thWorkingDayMonth} 
and extract(day from ctd.ctd_requesteddatetime)= ${#TestSuite#past14thWorkingDayDay} 
order by ctd.CTD_REQUESTEDDATETIME asc</con:query>
          <con:assertion type="JDBC Status" id="6b7fa186-01ea-4b41-ade7-6132cd7f23d0" name="JDBC Status"/>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: assert ion ctd_id">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def ctdid = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctdId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: Save SwitchId">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def switchId = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/CTD_SWITCHID[1]", "switchId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: Save RequestedDateTime">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def requestedDateTime = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/CTD_REQUESTEDDATETIME[1]", "requestedDateTime");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: Save DonorName">
            <con:configuration>
              <scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def DonorId = holder.getNodeValue("//Results[1]/ResultSet[1]/Row[1]/CTD_SPR_DONOR_ID[1]")
def dbhostname = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("DBHostname")
def dbport = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("DBPort")
def dbuser = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("DBUser")
def dbpassword = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("DBPassword")
def dbdatabase = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("DBDatabase")
import groovy.sql.Sql;
import com.mysql.jdbc.*
//Establish JDBC Connection to the DB
def  con = Sql.newInstance("jdbc:postgresql://"+dbhostname+":"+dbport+"/"+dbdatabase+"?user="+dbuser+"&amp;password="+dbpassword);
def query = con.rows("select spr_name from overstappen.service_provider where id="+ DonorId)
log.info ("Query result: "+ query)
log.info query.get(0).getProperty("spr_name")
messageExchange.modelItem.testStep.testCase.setPropertyValue( "donorName", query.get(0).getProperty("spr_name").toString() )</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Wait For mail" id="63d2a3ca-8662-4150-ba18-0db4d4be0ec5">
        <con:settings/>
        <con:config>
          <delay>${#TestSuite#PollTime}</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="CheckMail" id="ef8b5315-f3ae-4f82-bdcf-a99c2a1b7c88" disabled="true">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.SampleTest;
import nl.coin.Selenium.SeleniumActions;
import nl.coin.Selenium.JavaActions;
import java.text.SimpleDateFormat;

def seleniumHandle = new SeleniumActions()
def javaHandle = new JavaActions();
def now = testRunner.testCase.getPropertyValue("Now")
def requestedDateTime = testRunner.testCase.getPropertyValue("requestedDateTime")
def donorName = testRunner.testCase.getPropertyValue("donorName")

def date = javaHandle.convertDateFormat(now, "yyyy-MM-dd'T'HH:mm:ss", "yyyy-MM-dd")
def time = javaHandle.convertDateFormat(requestedDateTime, "yyyy-MM-dd' 'HH:mm:ss", "HH:mm:ss")

def todayMailTime = date + " "+ time
log.info todayMailTime

//todayMailTime should be more than current time+15 min
Calendar calendar = Calendar.getInstance();

calendar.setTime(new SimpleDateFormat("yyyy-MM-dd' 'HH:mm:ss").parse(todayMailTime));
calendar.add(Calendar.MINUTE, 15);
		
boolean before = new Date().after(calendar.getTime());
log.info before
if(before) {
	log.info "Mail is generated"
	
	def expectedSubject = "COIN COMP cancel warning : "+javaHandle.convertDateFormat(now, "yyyy-MM-dd'T'HH:mm:ss", "dd-MM-yyyy")+" for provider "+donorName
	log.info expectedSubject

	def verification = javaHandle.checkInUnreadMails(expectedSubject, todayMailTime, "yyyy-MM-dd' 'HH:mm:ss")

	if(!verification) {
		testRunner.fail("No mail is displayed")
	} else {
		log.info "mail displayed with the given preconditions"
	}
} else {
	log.info "Mail is not yest genarated"
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="CheckMail" id="97abf760-0f14-44a3-a6a9-83044a22ace9" disabled="true">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.SampleTest;
import nl.coin.Selenium.SeleniumActions;
import nl.coin.Selenium.JavaActions;
import java.text.SimpleDateFormat;

def seleniumHandle = new SeleniumActions()
def javaHandle = new JavaActions();
def now = testRunner.testCase.getPropertyValue("Now")
def requestedDateTime = testRunner.testCase.getPropertyValue("requestedDateTime")
def donorName = testRunner.testCase.getPropertyValue("donorName")
def switchId = testRunner.testCase.getPropertyValue("switchId")

def date = javaHandle.convertDateFormat(now, "yyyy-MM-dd'T'HH:mm:ss", "yyyy-MM-dd")
def time = javaHandle.convertDateFormat(requestedDateTime, "yyyy-MM-dd' 'HH:mm:ss", "HH:mm:ss")

def todayMailTime = date + " "+ time
log.info todayMailTime

//todayMailTime should be more than current time+15 min
Calendar calendar = Calendar.getInstance();

calendar.setTime(new SimpleDateFormat("yyyy-MM-dd' 'HH:mm:ss").parse(todayMailTime));
calendar.add(Calendar.MINUTE, 15);
		
boolean before = new Date().after(calendar.getTime());
if(before) {
	log.info "Mail is generated"
	
	def expectedSubject = "COIN COMP cancel warning : "+javaHandle.convertDateFormat(now, "yyyy-MM-dd'T'HH:mm:ss", "dd-MM-yyyy")+" for provider "+donorName
	log.info expectedSubject

	def verification = javaHandle.verifyMailContent(expectedSubject, todayMailTime, "yyyy-MM-dd' 'HH:mm:ss", switchId)

	if(!verification) {
		testRunner.fail("No mail is displayed")
	} else {
		log.info "mail displayed with the given preconditions"
	}
} else {
	log.info "Mail is not yest genarated"
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_EL Table_CTCH" id="15683832-4a19-4b4f-b273-e13610c711b3">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.email_logging el join overstappen.email_logging_detail eld on el.el_detail_id = eld.id 
where el_reason='CancelScript' 
and el_subject like 'COIN COMP cancel warning : ${#TestSuite#todaydate}%'
and el_body like '%Change%'
order by el.id desc limit 100</con:query>
          <con:assertion type="JDBC Status" id="5b056277-e6ec-404a-99fc-8472b329b9f9" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="08c804f2-1638-4310-89c5-8ddef67cc36e" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_Body">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_BODY/text()</path>
              <content>*Functional Error 216 - Invalid Switch Id for the request recieved*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_SUBJECT">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_SUBJECT/text()</path>
              <content>*Functional Error 216*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_REASON">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_REASON/text()</path>
              <content>Notification</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="68473dbd-5cb3-4914-92f6-1f226e130c54" name="Xpath: assert Receiver">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_RECEIVER_ID/text()</path>
              <content>${#TestSuite#donorId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.time.TimeCategory
import nl.coin.Selenium.JavaActions;
def javaHandle = new JavaActions();
def today = new Date() 
def now = today.format("yyyy-MM-dd'T'HH:mm:ss")
testRunner.testCase.setPropertyValue("Now",now)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase id="dd177e89-fcad-4d1e-9237-c02c320faaf2" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Change_15Days" searchProperties="true">
      <con:settings/>
      <con:testStep type="jdbc" name="JDBC_CTD Table_CTR" id="f1be46a3-3a5e-4fd1-95a1-e8a3d40a7418">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select ctd.* from overstappen.service_provider sp 
inner join overstappen.contract_termination_dossier ctd 
on sp.id =ctd.ctd_spr_recipient_id 
where spr_cancel_automatic=true 
and ctd.ctd_process_status = 'Change' 
and extract(year from ctd.ctd_requesteddatetime)= ${#TestSuite#past15thWorkingDayYear} 
and extract(month from ctd.ctd_requesteddatetime)= ${#TestSuite#past15thWorkingDayMonth} 
and extract(day from ctd.ctd_requesteddatetime)= ${#TestSuite#past15thWorkingDayDay} 
order by ctd.CTD_REQUESTEDDATETIME asc</con:query>
          <con:assertion type="JDBC Status" id="6b7fa186-01ea-4b41-ade7-6132cd7f23d0" name="JDBC Status"/>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: assert ion ctd_id">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def ctdid = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctdId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: Save SwitchId">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def switchId = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/CTD_SWITCHID[1]", "switchId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: Save RequestedDateTime">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def requestedDateTime = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/CTD_REQUESTEDDATETIME[1]", "requestedDateTime");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: Save DonorName">
            <con:configuration>
              <scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def DonorId = holder.getNodeValue("//Results[1]/ResultSet[1]/Row[1]/CTD_SPR_DONOR_ID[1]")
def dbhostname = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("DBHostname")
def dbport = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("DBPort")
def dbuser = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("DBUser")
def dbpassword = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("DBPassword")
def dbdatabase = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("DBDatabase")
import groovy.sql.Sql;
import com.mysql.jdbc.*
//Establish JDBC Connection to the DB
def  con = Sql.newInstance("jdbc:postgresql://"+dbhostname+":"+dbport+"/"+dbdatabase+"?user="+dbuser+"&amp;password="+dbpassword);
def query = con.rows("select spr_name from overstappen.service_provider where id="+ DonorId)
log.info ("Query result: "+ query)
log.info query.get(0).getProperty("spr_name")
messageExchange.modelItem.testStep.testCase.setPropertyValue( "donorName", query.get(0).getProperty("spr_name").toString() )</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Wait For mail" id="fd230883-f63d-476a-9e7c-85f6188cbcec">
        <con:settings/>
        <con:config>
          <delay>${#TestSuite#PollTime}</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="CheckMail" id="2148a9b9-c155-4ace-988b-69ee48e5c3c0" disabled="true">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.SampleTest;
import nl.coin.Selenium.SeleniumActions;
import nl.coin.Selenium.JavaActions;
import java.text.SimpleDateFormat;

def seleniumHandle = new SeleniumActions()
def javaHandle = new JavaActions();
def now = testRunner.testCase.getPropertyValue("Now")
def requestedDateTime = testRunner.testCase.getPropertyValue("requestedDateTime")
def donorName = testRunner.testCase.getPropertyValue("donorName")

def date = javaHandle.convertDateFormat(now, "yyyy-MM-dd'T'HH:mm:ss", "yyyy-MM-dd")
def time = javaHandle.convertDateFormat(requestedDateTime, "yyyy-MM-dd' 'HH:mm:ss", "HH:mm:ss")

def todayMailTime = date + " "+ time
log.info todayMailTime

//todayMailTime should be more than current time+15 min
Calendar calendar = Calendar.getInstance();

calendar.setTime(new SimpleDateFormat("yyyy-MM-dd' 'HH:mm:ss").parse(todayMailTime));
calendar.add(Calendar.MINUTE, 15);
		
boolean before = new Date().after(calendar.getTime());
log.info before
if(before) {
	log.info "Mail is generated"
	
	def expectedSubject = "COIN COMP cancel warning : "+javaHandle.convertDateFormat(now, "yyyy-MM-dd'T'HH:mm:ss", "dd-MM-yyyy")+" for provider "+donorName
	log.info expectedSubject

	def verification = javaHandle.checkInUnreadMails(expectedSubject, todayMailTime, "yyyy-MM-dd' 'HH:mm:ss")

	if(!verification) {
		testRunner.fail("No mail is displayed")
	} else {
		log.info "mail displayed with the given preconditions"
	}
} else {
	log.info "Mail is not yest genarated"
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="CheckMail" id="c0c758d4-1c34-4d81-a668-40a982934a3d" disabled="true">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.SampleTest;
import nl.coin.Selenium.SeleniumActions;
import nl.coin.Selenium.JavaActions;
import java.text.SimpleDateFormat;

def seleniumHandle = new SeleniumActions()
def javaHandle = new JavaActions();
def now = testRunner.testCase.getPropertyValue("Now")
def requestedDateTime = testRunner.testCase.getPropertyValue("requestedDateTime")
def donorName = testRunner.testCase.getPropertyValue("donorName")
def switchId = testRunner.testCase.getPropertyValue("switchId")

def date = javaHandle.convertDateFormat(now, "yyyy-MM-dd'T'HH:mm:ss", "yyyy-MM-dd")
def time = javaHandle.convertDateFormat(requestedDateTime, "yyyy-MM-dd' 'HH:mm:ss", "HH:mm:ss")

def todayMailTime = date + " "+ time
log.info todayMailTime

//todayMailTime should be more than current time+15 min
Calendar calendar = Calendar.getInstance();

calendar.setTime(new SimpleDateFormat("yyyy-MM-dd' 'HH:mm:ss").parse(todayMailTime));
calendar.add(Calendar.MINUTE, 15);
		
boolean before = new Date().after(calendar.getTime());
if(before) {
	log.info "Mail is generated"
	
	def expectedSubject = "COIN COMP cancel warning : "+javaHandle.convertDateFormat(now, "yyyy-MM-dd'T'HH:mm:ss", "dd-MM-yyyy")+" for provider "+donorName
	log.info expectedSubject

	def verification = javaHandle.verifyMailContent(expectedSubject, todayMailTime, "yyyy-MM-dd' 'HH:mm:ss", switchId)

	if(!verification) {
		testRunner.fail("No mail is displayed")
	} else {
		log.info "mail displayed with the given preconditions"
	}
} else {
	log.info "Mail is not yest genarated"
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_EL Table_CTCH" id="e83a1ec2-b1aa-42d3-ad5b-c41b7e7b02a0">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.email_logging el join overstappen.email_logging_detail eld on el.el_detail_id = eld.id 
where el_reason='CancelScript' 
and el_subject like 'COIN COMP cancel warning : ${#TestSuite#todaydate}%'
and el_body like '%Change%'
order by el.id desc limit 100</con:query>
          <con:assertion type="JDBC Status" id="5b056277-e6ec-404a-99fc-8472b329b9f9" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="08c804f2-1638-4310-89c5-8ddef67cc36e" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_Body">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_BODY/text()</path>
              <content>*Functional Error 216 - Invalid Switch Id for the request recieved*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_SUBJECT">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_SUBJECT/text()</path>
              <content>*Functional Error 216*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_REASON">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_REASON/text()</path>
              <content>Notification</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="68473dbd-5cb3-4914-92f6-1f226e130c54" name="Xpath: assert Receiver">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_RECEIVER_ID/text()</path>
              <content>${#TestSuite#donorId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.time.TimeCategory
import nl.coin.Selenium.JavaActions;
def javaHandle = new JavaActions();
def today = new Date() 
def now = today.format("yyyy-MM-dd'T'HH:mm:ss")
testRunner.testCase.setPropertyValue("Now",now)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase id="1bd025a6-51cc-4f24-a4ed-eb2bdfe46370" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Change_16Days" searchProperties="true">
      <con:settings/>
      <con:testStep type="jdbc" name="JDBC_CTD Table_CTR" id="2b048233-6798-4c3a-9e1b-bc4463e23778">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select ctd.* from overstappen.service_provider sp 
inner join overstappen.contract_termination_dossier ctd 
on sp.id =ctd.ctd_spr_recipient_id 
where spr_cancel_automatic=true 
and ctd.ctd_process_status = 'Change' 
and extract(year from ctd.ctd_requesteddatetime)= ${#TestSuite#past16thWorkingDayYear} 
and extract(month from ctd.ctd_requesteddatetime)= ${#TestSuite#past16thWorkingDayMonth} 
and extract(day from ctd.ctd_requesteddatetime)= ${#TestSuite#past16thWorkingDayDay} 
order by ctd.CTD_REQUESTEDDATETIME asc</con:query>
          <con:assertion type="JDBC Status" id="6b7fa186-01ea-4b41-ade7-6132cd7f23d0" name="JDBC Status"/>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: assert ion ctd_id">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def ctdid = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctdId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: Save SwitchId">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def switchId = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/CTD_SWITCHID[1]", "switchId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: Save RequestedDateTime">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def requestedDateTime = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/CTD_REQUESTEDDATETIME[1]", "requestedDateTime");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: Save DonorName">
            <con:configuration>
              <scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def DonorId = holder.getNodeValue("//Results[1]/ResultSet[1]/Row[1]/CTD_SPR_DONOR_ID[1]")
def dbhostname = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("DBHostname")
def dbport = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("DBPort")
def dbuser = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("DBUser")
def dbpassword = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("DBPassword")
def dbdatabase = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("DBDatabase")
import groovy.sql.Sql;
import com.mysql.jdbc.*
//Establish JDBC Connection to the DB
def  con = Sql.newInstance("jdbc:postgresql://"+dbhostname+":"+dbport+"/"+dbdatabase+"?user="+dbuser+"&amp;password="+dbpassword);
def query = con.rows("select spr_name from overstappen.service_provider where id="+ DonorId)
log.info ("Query result: "+ query)
log.info query.get(0).getProperty("spr_name")
messageExchange.modelItem.testStep.testCase.setPropertyValue( "donorName", query.get(0).getProperty("spr_name").toString() )</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Wait For mail" id="2e788c9a-b8d0-4be5-92e6-c145a33b87b1">
        <con:settings/>
        <con:config>
          <delay>${#TestSuite#PollTime}</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="CheckMail" id="222f41e3-6749-4001-b49b-582b848c3d50" disabled="true">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.SampleTest;
import nl.coin.Selenium.SeleniumActions;
import nl.coin.Selenium.JavaActions;
import java.text.SimpleDateFormat;

def seleniumHandle = new SeleniumActions()
def javaHandle = new JavaActions();
def now = testRunner.testCase.getPropertyValue("Now")
def requestedDateTime = testRunner.testCase.getPropertyValue("requestedDateTime")
def donorName = testRunner.testCase.getPropertyValue("donorName")

def date = javaHandle.convertDateFormat(now, "yyyy-MM-dd'T'HH:mm:ss", "yyyy-MM-dd")
def time = javaHandle.convertDateFormat(requestedDateTime, "yyyy-MM-dd' 'HH:mm:ss", "HH:mm:ss")

def todayMailTime = date + " "+ time
log.info todayMailTime

//todayMailTime should be more than current time+15 min
Calendar calendar = Calendar.getInstance();

calendar.setTime(new SimpleDateFormat("yyyy-MM-dd' 'HH:mm:ss").parse(todayMailTime));
calendar.add(Calendar.MINUTE, 15);
		
boolean before = new Date().after(calendar.getTime());
log.info before
if(before) {
	log.info "Mail is generated"
	
	def expectedSubject = "COIN COMP cancel confirmation : "+javaHandle.convertDateFormat(now, "yyyy-MM-dd'T'HH:mm:ss", "dd-MM-yyyy")+" for provider "+donorName
	log.info expectedSubject

	def verification = javaHandle.checkInUnreadMails(expectedSubject, todayMailTime, "yyyy-MM-dd' 'HH:mm:ss")

	if(!verification) {
		testRunner.fail("No mail is displayed")
	} else {
		log.info "mail displayed with the given preconditions"
	}
} else {
	log.info "Mail is not yest genarated"
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="CheckMail" id="314bd33e-cd17-43da-ab36-2f71aa160457" disabled="true">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.SampleTest;
import nl.coin.Selenium.SeleniumActions;
import nl.coin.Selenium.JavaActions;
import java.text.SimpleDateFormat;

def seleniumHandle = new SeleniumActions()
def javaHandle = new JavaActions();
def now = testRunner.testCase.getPropertyValue("Now")
def requestedDateTime = testRunner.testCase.getPropertyValue("requestedDateTime")
def donorName = testRunner.testCase.getPropertyValue("donorName")
def switchId = testRunner.testCase.getPropertyValue("switchId")

def date = javaHandle.convertDateFormat(now, "yyyy-MM-dd'T'HH:mm:ss", "yyyy-MM-dd")
def time = javaHandle.convertDateFormat(requestedDateTime, "yyyy-MM-dd' 'HH:mm:ss", "HH:mm:ss")

def todayMailTime = date + " "+ time
log.info todayMailTime

//todayMailTime should be more than current time+15 min
Calendar calendar = Calendar.getInstance();

calendar.setTime(new SimpleDateFormat("yyyy-MM-dd' 'HH:mm:ss").parse(todayMailTime));
calendar.add(Calendar.MINUTE, 15);
		
boolean before = new Date().after(calendar.getTime());
if(before) {
	log.info "Mail is generated"
	
	def expectedSubject = "COIN COMP cancel confirmation : "+javaHandle.convertDateFormat(now, "yyyy-MM-dd'T'HH:mm:ss", "dd-MM-yyyy")+" for provider "+donorName
	log.info expectedSubject

	def verification = javaHandle.verifyMailContent(expectedSubject, todayMailTime, "yyyy-MM-dd' 'HH:mm:ss", switchId)

	if(!verification) {
		testRunner.fail("No mail is displayed")
	} else {
		log.info "mail displayed with the given preconditions"
	}
} else {
	log.info "Mail is not yest genarated"
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_EL Table_CTCHA" id="a3038570-61f5-4c7b-b177-af692ef79373">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.email_logging el join overstappen.email_logging_detail eld on el.el_detail_id = eld.id 
where el_reason='CancelScript' 
and el_subject like 'COIN COMP cancel confirmation : ${#TestSuite#todaydate}%'
and el_body like '%Change%'
order by el.id desc limit 100</con:query>
          <con:assertion type="JDBC Status" id="5b056277-e6ec-404a-99fc-8472b329b9f9" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="08c804f2-1638-4310-89c5-8ddef67cc36e" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_Body">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_BODY/text()</path>
              <content>*Functional Error 216 - Invalid Switch Id for the request recieved*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_SUBJECT">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_SUBJECT/text()</path>
              <content>*Functional Error 216*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_REASON">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_REASON/text()</path>
              <content>Notification</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="68473dbd-5cb3-4914-92f6-1f226e130c54" name="Xpath: assert Receiver">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_RECEIVER_ID/text()</path>
              <content>${#TestSuite#donorId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.time.TimeCategory
import nl.coin.Selenium.JavaActions;
def javaHandle = new JavaActions();
def today = new Date() 
def now = today.format("yyyy-MM-dd'T'HH:mm:ss")
testRunner.testCase.setPropertyValue("Now",now)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase id="4dcdbd7e-73d7-4bb4-8838-c1e71270bf72" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ChangeAnswerOK_14Days" searchProperties="true">
      <con:settings/>
      <con:testStep type="jdbc" name="JDBC_CTD Table_CTR" id="ef4b7559-8826-4f4e-9005-7be3120ca0af">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select ctd.* from overstappen.service_provider sp 
inner join overstappen.contract_termination_dossier ctd 
on sp.id =ctd.ctd_spr_recipient_id 
where spr_cancel_automatic=true 
and ctd.ctd_process_status = 'Change Answer OK' 
and extract(year from ctd.ctd_requesteddatetime)= ${#TestSuite#past14thWorkingDayYear} 
and extract(month from ctd.ctd_requesteddatetime)= ${#TestSuite#past14thWorkingDayMonth} 
and extract(day from ctd.ctd_requesteddatetime)= ${#TestSuite#past14thWorkingDayDay} 
order by ctd.CTD_REQUESTEDDATETIME asc</con:query>
          <con:assertion type="JDBC Status" id="6b7fa186-01ea-4b41-ade7-6132cd7f23d0" name="JDBC Status"/>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: assert ion ctd_id">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def ctdid = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctdId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: Save SwitchId">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def switchId = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/CTD_SWITCHID[1]", "switchId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: Save RequestedDateTime">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def requestedDateTime = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/CTD_REQUESTEDDATETIME[1]", "requestedDateTime");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: Save DonorName">
            <con:configuration>
              <scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def DonorId = holder.getNodeValue("//Results[1]/ResultSet[1]/Row[1]/CTD_SPR_DONOR_ID[1]")
def dbhostname = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("DBHostname")
def dbport = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("DBPort")
def dbuser = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("DBUser")
def dbpassword = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("DBPassword")
def dbdatabase = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("DBDatabase")
import groovy.sql.Sql;
import com.mysql.jdbc.*
//Establish JDBC Connection to the DB
def  con = Sql.newInstance("jdbc:postgresql://"+dbhostname+":"+dbport+"/"+dbdatabase+"?user="+dbuser+"&amp;password="+dbpassword);
def query = con.rows("select spr_name from overstappen.service_provider where id="+ DonorId)
log.info ("Query result: "+ query)
log.info query.get(0).getProperty("spr_name")
messageExchange.modelItem.testStep.testCase.setPropertyValue( "donorName", query.get(0).getProperty("spr_name").toString() )</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Wait For mail" id="207a093c-70dd-41a3-b6eb-f8ee35a24038">
        <con:settings/>
        <con:config>
          <delay>${#TestSuite#PollTime}</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="CheckMail" id="87775d95-0900-4ff7-840d-139187df0c91" disabled="true">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.SampleTest;
import nl.coin.Selenium.SeleniumActions;
import nl.coin.Selenium.JavaActions;
import java.text.SimpleDateFormat;

def seleniumHandle = new SeleniumActions()
def javaHandle = new JavaActions();
def now = testRunner.testCase.getPropertyValue("Now")
def requestedDateTime = testRunner.testCase.getPropertyValue("requestedDateTime")
def donorName = testRunner.testCase.getPropertyValue("donorName")

def date = javaHandle.convertDateFormat(now, "yyyy-MM-dd'T'HH:mm:ss", "yyyy-MM-dd")
def time = javaHandle.convertDateFormat(requestedDateTime, "yyyy-MM-dd' 'HH:mm:ss", "HH:mm:ss")

def todayMailTime = date + " "+ time
log.info todayMailTime

//todayMailTime should be more than current time+15 min
Calendar calendar = Calendar.getInstance();

calendar.setTime(new SimpleDateFormat("yyyy-MM-dd' 'HH:mm:ss").parse(todayMailTime));
calendar.add(Calendar.MINUTE, 15);
		
boolean before = new Date().after(calendar.getTime());
log.info before
if(before) {
	log.info "Mail is generated"
	
	def expectedSubject = "COIN COMP cancel warning : "+javaHandle.convertDateFormat(now, "yyyy-MM-dd'T'HH:mm:ss", "dd-MM-yyyy")+" for provider "+donorName
	log.info expectedSubject

	def verification = javaHandle.checkInUnreadMails(expectedSubject, todayMailTime, "yyyy-MM-dd' 'HH:mm:ss")

	if(!verification) {
		testRunner.fail("No mail is displayed")
	} else {
		log.info "mail displayed with the given preconditions"
	}
} else {
	log.info "Mail is not yest genarated"
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="CheckMail" id="7ff9b038-4c7e-4212-8c13-1d3cede0f356" disabled="true">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.SampleTest;
import nl.coin.Selenium.SeleniumActions;
import nl.coin.Selenium.JavaActions;
import java.text.SimpleDateFormat;

def seleniumHandle = new SeleniumActions()
def javaHandle = new JavaActions();
def now = testRunner.testCase.getPropertyValue("Now")
def requestedDateTime = testRunner.testCase.getPropertyValue("requestedDateTime")
def donorName = testRunner.testCase.getPropertyValue("donorName")
def switchId = testRunner.testCase.getPropertyValue("switchId")

def date = javaHandle.convertDateFormat(now, "yyyy-MM-dd'T'HH:mm:ss", "yyyy-MM-dd")
def time = javaHandle.convertDateFormat(requestedDateTime, "yyyy-MM-dd' 'HH:mm:ss", "HH:mm:ss")

def todayMailTime = date + " "+ time
log.info todayMailTime

//todayMailTime should be more than current time+15 min
Calendar calendar = Calendar.getInstance();

calendar.setTime(new SimpleDateFormat("yyyy-MM-dd' 'HH:mm:ss").parse(todayMailTime));
calendar.add(Calendar.MINUTE, 15);
		
boolean before = new Date().after(calendar.getTime());
if(before) {
	log.info "Mail is generated"
	
	def expectedSubject = "COIN COMP cancel warning : "+javaHandle.convertDateFormat(now, "yyyy-MM-dd'T'HH:mm:ss", "dd-MM-yyyy")+" for provider "+donorName
	log.info expectedSubject

	def verification = javaHandle.verifyMailContent(expectedSubject, todayMailTime, "yyyy-MM-dd' 'HH:mm:ss", switchId)

	if(!verification) {
		testRunner.fail("No mail is displayed")
	} else {
		log.info "mail displayed with the given preconditions"
	}
} else {
	log.info "Mail is not yest genarated"
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_EL Table_CTCHA" id="86f132d3-590c-417e-b37d-de6eb633dd44">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.email_logging el join overstappen.email_logging_detail eld on el.el_detail_id = eld.id 
where el_reason='CancelScript' 
and el_subject like 'COIN COMP cancel warning : ${#TestSuite#todaydate}%'
and el_body like '%Change Answer OK%'
order by el.id desc limit 100</con:query>
          <con:assertion type="JDBC Status" id="5b056277-e6ec-404a-99fc-8472b329b9f9" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="08c804f2-1638-4310-89c5-8ddef67cc36e" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_Body">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_BODY/text()</path>
              <content>*Functional Error 216 - Invalid Switch Id for the request recieved*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_SUBJECT">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_SUBJECT/text()</path>
              <content>*Functional Error 216*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_REASON">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_REASON/text()</path>
              <content>Notification</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="68473dbd-5cb3-4914-92f6-1f226e130c54" name="Xpath: assert Receiver">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_RECEIVER_ID/text()</path>
              <content>${#TestSuite#donorId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.time.TimeCategory
import nl.coin.Selenium.JavaActions;
def javaHandle = new JavaActions();
def today = new Date() 
def now = today.format("yyyy-MM-dd'T'HH:mm:ss")
testRunner.testCase.setPropertyValue("Now",now)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase id="47aea373-7fc2-41f8-bbbc-6bd64a1174f1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ChangeAnswerOK_15Days" searchProperties="true">
      <con:settings/>
      <con:testStep type="jdbc" name="JDBC_CTD Table_CTR" id="09284346-88d2-4b4d-a31b-acd8751b5796">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select ctd.* from overstappen.service_provider sp 
inner join overstappen.contract_termination_dossier ctd 
on sp.id =ctd.ctd_spr_recipient_id 
where spr_cancel_automatic=true 
and ctd.ctd_process_status = 'Change Answer OK' 
and extract(year from ctd.ctd_requesteddatetime)= ${#TestSuite#past15thWorkingDayYear} 
and extract(month from ctd.ctd_requesteddatetime)= ${#TestSuite#past15thWorkingDayMonth} 
and extract(day from ctd.ctd_requesteddatetime)= ${#TestSuite#past15thWorkingDayDay} 
order by ctd.CTD_REQUESTEDDATETIME asc</con:query>
          <con:assertion type="JDBC Status" id="6b7fa186-01ea-4b41-ade7-6132cd7f23d0" name="JDBC Status"/>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: assert ion ctd_id">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def ctdid = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctdId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: Save SwitchId">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def switchId = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/CTD_SWITCHID[1]", "switchId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: Save RequestedDateTime">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def requestedDateTime = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/CTD_REQUESTEDDATETIME[1]", "requestedDateTime");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: Save DonorName">
            <con:configuration>
              <scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def DonorId = holder.getNodeValue("//Results[1]/ResultSet[1]/Row[1]/CTD_SPR_DONOR_ID[1]")
def dbhostname = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("DBHostname")
def dbport = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("DBPort")
def dbuser = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("DBUser")
def dbpassword = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("DBPassword")
def dbdatabase = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("DBDatabase")
import groovy.sql.Sql;
import com.mysql.jdbc.*
//Establish JDBC Connection to the DB
def  con = Sql.newInstance("jdbc:postgresql://"+dbhostname+":"+dbport+"/"+dbdatabase+"?user="+dbuser+"&amp;password="+dbpassword);
def query = con.rows("select spr_name from overstappen.service_provider where id="+ DonorId)
log.info ("Query result: "+ query)
log.info query.get(0).getProperty("spr_name")
messageExchange.modelItem.testStep.testCase.setPropertyValue( "donorName", query.get(0).getProperty("spr_name").toString() )</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Wait For mail" id="a37393b3-01a0-491b-8c90-ffde6cc12369">
        <con:settings/>
        <con:config>
          <delay>${#TestSuite#PollTime}</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="CheckMail" id="97b40ff9-6ba0-4435-9264-6e37e7d37b39" disabled="true">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.SampleTest;
import nl.coin.Selenium.SeleniumActions;
import nl.coin.Selenium.JavaActions;
import java.text.SimpleDateFormat;

def seleniumHandle = new SeleniumActions()
def javaHandle = new JavaActions();
def now = testRunner.testCase.getPropertyValue("Now")
def requestedDateTime = testRunner.testCase.getPropertyValue("requestedDateTime")
def donorName = testRunner.testCase.getPropertyValue("donorName")

def date = javaHandle.convertDateFormat(now, "yyyy-MM-dd'T'HH:mm:ss", "yyyy-MM-dd")
def time = javaHandle.convertDateFormat(requestedDateTime, "yyyy-MM-dd' 'HH:mm:ss", "HH:mm:ss")

def todayMailTime = date + " "+ time
log.info todayMailTime

//todayMailTime should be more than current time+15 min
Calendar calendar = Calendar.getInstance();

calendar.setTime(new SimpleDateFormat("yyyy-MM-dd' 'HH:mm:ss").parse(todayMailTime));
calendar.add(Calendar.MINUTE, 15);
		
boolean before = new Date().after(calendar.getTime());
log.info before
if(before) {
	log.info "Mail is generated"
	
	def expectedSubject = "COIN COMP cancel warning : "+javaHandle.convertDateFormat(now, "yyyy-MM-dd'T'HH:mm:ss", "dd-MM-yyyy")+" for provider "+donorName
	log.info expectedSubject

	def verification = javaHandle.checkInUnreadMails(expectedSubject, todayMailTime, "yyyy-MM-dd' 'HH:mm:ss")

	if(!verification) {
		testRunner.fail("No mail is displayed")
	} else {
		log.info "mail displayed with the given preconditions"
	}
} else {
	log.info "Mail is not yest genarated"
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="CheckMail" id="5702df50-0f1f-49a0-8f66-f1902d6d1400" disabled="true">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.SampleTest;
import nl.coin.Selenium.SeleniumActions;
import nl.coin.Selenium.JavaActions;
import java.text.SimpleDateFormat;

def seleniumHandle = new SeleniumActions()
def javaHandle = new JavaActions();
def now = testRunner.testCase.getPropertyValue("Now")
def requestedDateTime = testRunner.testCase.getPropertyValue("requestedDateTime")
def donorName = testRunner.testCase.getPropertyValue("donorName")
def switchId = testRunner.testCase.getPropertyValue("switchId")

def date = javaHandle.convertDateFormat(now, "yyyy-MM-dd'T'HH:mm:ss", "yyyy-MM-dd")
def time = javaHandle.convertDateFormat(requestedDateTime, "yyyy-MM-dd' 'HH:mm:ss", "HH:mm:ss")

def todayMailTime = date + " "+ time
log.info todayMailTime

//todayMailTime should be more than current time+15 min
Calendar calendar = Calendar.getInstance();

calendar.setTime(new SimpleDateFormat("yyyy-MM-dd' 'HH:mm:ss").parse(todayMailTime));
calendar.add(Calendar.MINUTE, 15);
		
boolean before = new Date().after(calendar.getTime());
if(before) {
	log.info "Mail is generated"
	
	def expectedSubject = "COIN COMP cancel warning : "+javaHandle.convertDateFormat(now, "yyyy-MM-dd'T'HH:mm:ss", "dd-MM-yyyy")+" for provider "+donorName
	log.info expectedSubject

	def verification = javaHandle.verifyMailContent(expectedSubject, todayMailTime, "yyyy-MM-dd' 'HH:mm:ss", switchId)

	if(!verification) {
		testRunner.fail("No mail is displayed")
	} else {
		log.info "mail displayed with the given preconditions"
	}
} else {
	log.info "Mail is not yest genarated"
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_EL Table_CTCHA" id="494f9fc0-7fa8-48a7-8680-12ab295fa63e">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.email_logging el join overstappen.email_logging_detail eld on el.el_detail_id = eld.id 
where el_reason='CancelScript' 
and el_subject like 'COIN COMP cancel warning : ${#TestSuite#todaydate}%'
and el_body like '%Change Answer OK%'
order by el.id desc limit 100</con:query>
          <con:assertion type="JDBC Status" id="5b056277-e6ec-404a-99fc-8472b329b9f9" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="08c804f2-1638-4310-89c5-8ddef67cc36e" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_Body">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_BODY/text()</path>
              <content>*Functional Error 216 - Invalid Switch Id for the request recieved*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_SUBJECT">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_SUBJECT/text()</path>
              <content>*Functional Error 216*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_REASON">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_REASON/text()</path>
              <content>Notification</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="68473dbd-5cb3-4914-92f6-1f226e130c54" name="Xpath: assert Receiver">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_RECEIVER_ID/text()</path>
              <content>${#TestSuite#donorId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.time.TimeCategory
import nl.coin.Selenium.JavaActions;
def javaHandle = new JavaActions();
def today = new Date() 
def now = today.format("yyyy-MM-dd'T'HH:mm:ss")
testRunner.testCase.setPropertyValue("Now",now)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase id="296a4293-13a9-47ba-9bd7-3c43759963e3" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ChangeAnswerOK_16Days" searchProperties="true">
      <con:settings/>
      <con:testStep type="jdbc" name="JDBC_CTD Table_CTR" id="81ec3dc7-114c-49a8-a9e4-d7762c2c04d3">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select ctd.* from overstappen.service_provider sp 
inner join overstappen.contract_termination_dossier ctd 
on sp.id =ctd.ctd_spr_recipient_id 
where spr_cancel_automatic=true 
and ctd.ctd_process_status = 'Change Answer OK' 
and extract(year from ctd.ctd_requesteddatetime)= ${#TestSuite#past16thWorkingDayYear} 
and extract(month from ctd.ctd_requesteddatetime)= ${#TestSuite#past16thWorkingDayMonth} 
and extract(day from ctd.ctd_requesteddatetime)= ${#TestSuite#past16thWorkingDayDay} 
order by ctd.CTD_REQUESTEDDATETIME asc</con:query>
          <con:assertion type="JDBC Status" id="6b7fa186-01ea-4b41-ade7-6132cd7f23d0" name="JDBC Status"/>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: assert ion ctd_id">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def ctdid = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctdId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: Save SwitchId">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def switchId = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/CTD_SWITCHID[1]", "switchId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: Save RequestedDateTime">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def requestedDateTime = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/CTD_REQUESTEDDATETIME[1]", "requestedDateTime");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: Save DonorName">
            <con:configuration>
              <scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def DonorId = holder.getNodeValue("//Results[1]/ResultSet[1]/Row[1]/CTD_SPR_DONOR_ID[1]")
def dbhostname = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("DBHostname")
def dbport = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("DBPort")
def dbuser = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("DBUser")
def dbpassword = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("DBPassword")
def dbdatabase = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("DBDatabase")
import groovy.sql.Sql;
import com.mysql.jdbc.*
//Establish JDBC Connection to the DB
def  con = Sql.newInstance("jdbc:postgresql://"+dbhostname+":"+dbport+"/"+dbdatabase+"?user="+dbuser+"&amp;password="+dbpassword);
def query = con.rows("select spr_name from overstappen.service_provider where id="+ DonorId)
log.info ("Query result: "+ query)
log.info query.get(0).getProperty("spr_name")
messageExchange.modelItem.testStep.testCase.setPropertyValue( "donorName", query.get(0).getProperty("spr_name").toString() )</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Wait For mail" id="1898145f-f27b-46ce-98fc-7bf9d4cc5611">
        <con:settings/>
        <con:config>
          <delay>${#TestSuite#PollTime}</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="CheckMail" id="fba4904b-e122-4a70-9f81-49c23d5f761d" disabled="true">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.SampleTest;
import nl.coin.Selenium.SeleniumActions;
import nl.coin.Selenium.JavaActions;
import java.text.SimpleDateFormat;

def seleniumHandle = new SeleniumActions()
def javaHandle = new JavaActions();
def now = testRunner.testCase.getPropertyValue("Now")
def requestedDateTime = testRunner.testCase.getPropertyValue("requestedDateTime")
def donorName = testRunner.testCase.getPropertyValue("donorName")

def date = javaHandle.convertDateFormat(now, "yyyy-MM-dd'T'HH:mm:ss", "yyyy-MM-dd")
def time = javaHandle.convertDateFormat(requestedDateTime, "yyyy-MM-dd' 'HH:mm:ss", "HH:mm:ss")

def todayMailTime = date + " "+ time
log.info todayMailTime

//todayMailTime should be more than current time+15 min
Calendar calendar = Calendar.getInstance();

calendar.setTime(new SimpleDateFormat("yyyy-MM-dd' 'HH:mm:ss").parse(todayMailTime));
calendar.add(Calendar.MINUTE, 15);
		
boolean before = new Date().after(calendar.getTime());
log.info before
if(before) {
	log.info "Mail is generated"
	
	def expectedSubject = "COIN COMP cancel confirmation : "+javaHandle.convertDateFormat(now, "yyyy-MM-dd'T'HH:mm:ss", "dd-MM-yyyy")+" for provider "+donorName
	log.info expectedSubject

	def verification = javaHandle.checkInUnreadMails(expectedSubject, todayMailTime, "yyyy-MM-dd' 'HH:mm:ss")

	if(!verification) {
		testRunner.fail("No mail is displayed")
	} else {
		log.info "mail displayed with the given preconditions"
	}
} else {
	log.info "Mail is not yest genarated"
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="CheckMail" id="3fa513ea-8c11-4264-8e60-f722c1e318fb" disabled="true">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.SampleTest;
import nl.coin.Selenium.SeleniumActions;
import nl.coin.Selenium.JavaActions;
import java.text.SimpleDateFormat;

def seleniumHandle = new SeleniumActions()
def javaHandle = new JavaActions();
def now = testRunner.testCase.getPropertyValue("Now")
def requestedDateTime = testRunner.testCase.getPropertyValue("requestedDateTime")
def donorName = testRunner.testCase.getPropertyValue("donorName")
def switchId = testRunner.testCase.getPropertyValue("switchId")

def date = javaHandle.convertDateFormat(now, "yyyy-MM-dd'T'HH:mm:ss", "yyyy-MM-dd")
def time = javaHandle.convertDateFormat(requestedDateTime, "yyyy-MM-dd' 'HH:mm:ss", "HH:mm:ss")

def todayMailTime = date + " "+ time
log.info todayMailTime

//todayMailTime should be more than current time+15 min
Calendar calendar = Calendar.getInstance();

calendar.setTime(new SimpleDateFormat("yyyy-MM-dd' 'HH:mm:ss").parse(todayMailTime));
calendar.add(Calendar.MINUTE, 15);
		
boolean before = new Date().after(calendar.getTime());
if(before) {
	log.info "Mail is generated"
	
	def expectedSubject = "COIN COMP cancel confirmation : "+javaHandle.convertDateFormat(now, "yyyy-MM-dd'T'HH:mm:ss", "dd-MM-yyyy")+" for provider "+donorName
	log.info expectedSubject

	def verification = javaHandle.verifyMailContent(expectedSubject, todayMailTime, "yyyy-MM-dd' 'HH:mm:ss", switchId)

	if(!verification) {
		testRunner.fail("No mail is displayed")
	} else {
		log.info "mail displayed with the given preconditions"
	}
} else {
	log.info "Mail is not yest genarated"
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_EL Table_CTCHA" id="3620326f-fadd-4150-b24a-31ac09c91547">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.email_logging el join overstappen.email_logging_detail eld on el.el_detail_id = eld.id 
where el_reason='CancelScript' 
and el_subject like 'COIN COMP cancel confirmation : ${#TestSuite#todaydate}%'
and el_body like '%Change Answer OK%'
order by el.id desc limit 100</con:query>
          <con:assertion type="JDBC Status" id="5b056277-e6ec-404a-99fc-8472b329b9f9" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="08c804f2-1638-4310-89c5-8ddef67cc36e" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_Body">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_BODY/text()</path>
              <content>*Functional Error 216 - Invalid Switch Id for the request recieved*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_SUBJECT">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_SUBJECT/text()</path>
              <content>*Functional Error 216*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_REASON">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_REASON/text()</path>
              <content>Notification</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="68473dbd-5cb3-4914-92f6-1f226e130c54" name="Xpath: assert Receiver">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_RECEIVER_ID/text()</path>
              <content>${#TestSuite#donorId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.time.TimeCategory
import nl.coin.Selenium.JavaActions;
def javaHandle = new JavaActions();
def today = new Date() 
def now = today.format("yyyy-MM-dd'T'HH:mm:ss")
testRunner.testCase.setPropertyValue("Now",now)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase id="34951225-7e9a-4526-8090-d14a5b7bc778" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ChangeAnswerBlocking_14Days" searchProperties="true">
      <con:settings/>
      <con:testStep type="jdbc" name="JDBC_CTD Table_CTR" id="9bb876bc-5ab4-4b53-a7a4-54dfd45d181e">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select ctd.* from overstappen.service_provider sp 
inner join overstappen.contract_termination_dossier ctd 
on sp.id =ctd.ctd_spr_recipient_id 
where spr_cancel_automatic=true 
and ctd.ctd_process_status = 'Change Answer Blocking' 
and extract(year from ctd.ctd_requesteddatetime)= ${#TestSuite#past14thWorkingDayYear} 
and extract(month from ctd.ctd_requesteddatetime)= ${#TestSuite#past14thWorkingDayMonth} 
and extract(day from ctd.ctd_requesteddatetime)= ${#TestSuite#past14thWorkingDayDay} 
order by ctd.CTD_REQUESTEDDATETIME asc</con:query>
          <con:assertion type="JDBC Status" id="6b7fa186-01ea-4b41-ade7-6132cd7f23d0" name="JDBC Status"/>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: assert ion ctd_id">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def ctdid = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctdId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: Save SwitchId">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def switchId = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/CTD_SWITCHID[1]", "switchId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: Save RequestedDateTime">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def requestedDateTime = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/CTD_REQUESTEDDATETIME[1]", "requestedDateTime");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: Save DonorName">
            <con:configuration>
              <scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def DonorId = holder.getNodeValue("//Results[1]/ResultSet[1]/Row[1]/CTD_SPR_DONOR_ID[1]")
def dbhostname = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("DBHostname")
def dbport = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("DBPort")
def dbuser = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("DBUser")
def dbpassword = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("DBPassword")
def dbdatabase = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("DBDatabase")
import groovy.sql.Sql;
import com.mysql.jdbc.*
//Establish JDBC Connection to the DB
def  con = Sql.newInstance("jdbc:postgresql://"+dbhostname+":"+dbport+"/"+dbdatabase+"?user="+dbuser+"&amp;password="+dbpassword);
def query = con.rows("select spr_name from overstappen.service_provider where id="+ DonorId)
log.info ("Query result: "+ query)
log.info query.get(0).getProperty("spr_name")
messageExchange.modelItem.testStep.testCase.setPropertyValue( "donorName", query.get(0).getProperty("spr_name").toString() )</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Wait For mail" id="bd9eca21-de4c-4d85-a8af-7ac484751c19">
        <con:settings/>
        <con:config>
          <delay>${#TestSuite#PollTime}</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="CheckMail" id="8d3e1d21-124a-48f7-8892-6a40d9c2181b" disabled="true">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.SampleTest;
import nl.coin.Selenium.SeleniumActions;
import nl.coin.Selenium.JavaActions;
import java.text.SimpleDateFormat;

def seleniumHandle = new SeleniumActions()
def javaHandle = new JavaActions();
def now = testRunner.testCase.getPropertyValue("Now")
def requestedDateTime = testRunner.testCase.getPropertyValue("requestedDateTime")
def donorName = testRunner.testCase.getPropertyValue("donorName")

def date = javaHandle.convertDateFormat(now, "yyyy-MM-dd'T'HH:mm:ss", "yyyy-MM-dd")
def time = javaHandle.convertDateFormat(requestedDateTime, "yyyy-MM-dd' 'HH:mm:ss", "HH:mm:ss")

def todayMailTime = date + " "+ time
log.info todayMailTime

//todayMailTime should be more than current time+15 min
Calendar calendar = Calendar.getInstance();

calendar.setTime(new SimpleDateFormat("yyyy-MM-dd' 'HH:mm:ss").parse(todayMailTime));
calendar.add(Calendar.MINUTE, 15);
		
boolean before = new Date().after(calendar.getTime());
log.info before
if(before) {
	log.info "Mail is generated"
	
	def expectedSubject = "COIN COMP cancel warning : "+javaHandle.convertDateFormat(now, "yyyy-MM-dd'T'HH:mm:ss", "dd-MM-yyyy")+" for provider "+donorName
	log.info expectedSubject

	def verification = javaHandle.checkInUnreadMails(expectedSubject, todayMailTime, "yyyy-MM-dd' 'HH:mm:ss")

	if(!verification) {
		testRunner.fail("No mail is displayed")
	} else {
		log.info "mail displayed with the given preconditions"
	}
} else {
	log.info "Mail is not yest genarated"
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="CheckMail" id="eb3fec15-175f-42c7-8989-fa8f1059c5ee" disabled="true">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.SampleTest;
import nl.coin.Selenium.SeleniumActions;
import nl.coin.Selenium.JavaActions;
import java.text.SimpleDateFormat;

def seleniumHandle = new SeleniumActions()
def javaHandle = new JavaActions();
def now = testRunner.testCase.getPropertyValue("Now")
def requestedDateTime = testRunner.testCase.getPropertyValue("requestedDateTime")
def donorName = testRunner.testCase.getPropertyValue("donorName")
def switchId = testRunner.testCase.getPropertyValue("switchId")

def date = javaHandle.convertDateFormat(now, "yyyy-MM-dd'T'HH:mm:ss", "yyyy-MM-dd")
def time = javaHandle.convertDateFormat(requestedDateTime, "yyyy-MM-dd' 'HH:mm:ss", "HH:mm:ss")

def todayMailTime = date + " "+ time
log.info todayMailTime

//todayMailTime should be more than current time+15 min
Calendar calendar = Calendar.getInstance();

calendar.setTime(new SimpleDateFormat("yyyy-MM-dd' 'HH:mm:ss").parse(todayMailTime));
calendar.add(Calendar.MINUTE, 15);
		
boolean before = new Date().after(calendar.getTime());
if(before) {
	log.info "Mail is generated"
	
	def expectedSubject = "COIN COMP cancel warning : "+javaHandle.convertDateFormat(now, "yyyy-MM-dd'T'HH:mm:ss", "dd-MM-yyyy")+" for provider "+donorName
	log.info expectedSubject

	def verification = javaHandle.verifyMailContent(expectedSubject, todayMailTime, "yyyy-MM-dd' 'HH:mm:ss", switchId)

	if(!verification) {
		testRunner.fail("No mail is displayed")
	} else {
		log.info "mail displayed with the given preconditions"
	}
} else {
	log.info "Mail is not yest genarated"
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_EL Table_CTCHA" id="5e8e5e86-2e09-4c28-84db-5ac14495c907">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.email_logging el join overstappen.email_logging_detail eld on el.el_detail_id = eld.id 
where el_reason='CancelScript' 
and el_subject like 'COIN COMP cancel warning : ${#TestSuite#todaydate}%'
and el_body like '%Change Answer Blocking%'
order by el.id desc limit 100</con:query>
          <con:assertion type="JDBC Status" id="5b056277-e6ec-404a-99fc-8472b329b9f9" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="08c804f2-1638-4310-89c5-8ddef67cc36e" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_Body">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_BODY/text()</path>
              <content>*Functional Error 216 - Invalid Switch Id for the request recieved*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_SUBJECT">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_SUBJECT/text()</path>
              <content>*Functional Error 216*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_REASON">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_REASON/text()</path>
              <content>Notification</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="68473dbd-5cb3-4914-92f6-1f226e130c54" name="Xpath: assert Receiver">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_RECEIVER_ID/text()</path>
              <content>${#TestSuite#donorId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.time.TimeCategory
import nl.coin.Selenium.JavaActions;
def javaHandle = new JavaActions();
def today = new Date() 
def now = today.format("yyyy-MM-dd'T'HH:mm:ss")
testRunner.testCase.setPropertyValue("Now",now)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase id="8bde9e24-4790-450e-bf17-dd59e4e8b92d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ChangeAnswerBlocking_15Days" searchProperties="true">
      <con:settings/>
      <con:testStep type="jdbc" name="JDBC_CTD Table_CTR" id="103c7223-a315-426e-96f3-47b90f7540da">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select ctd.* from overstappen.service_provider sp 
inner join overstappen.contract_termination_dossier ctd 
on sp.id =ctd.ctd_spr_recipient_id 
where spr_cancel_automatic=true 
and ctd.ctd_process_status = 'Change Answer Blocking' 
and extract(year from ctd.ctd_requesteddatetime)= ${#TestSuite#past15thWorkingDayYear} 
and extract(month from ctd.ctd_requesteddatetime)= ${#TestSuite#past15thWorkingDayMonth} 
and extract(day from ctd.ctd_requesteddatetime)= ${#TestSuite#past15thWorkingDayDay} 
order by ctd.CTD_REQUESTEDDATETIME asc</con:query>
          <con:assertion type="JDBC Status" id="6b7fa186-01ea-4b41-ade7-6132cd7f23d0" name="JDBC Status"/>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: assert ion ctd_id">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def ctdid = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctdId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: Save SwitchId">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def switchId = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/CTD_SWITCHID[1]", "switchId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: Save RequestedDateTime">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def requestedDateTime = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/CTD_REQUESTEDDATETIME[1]", "requestedDateTime");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: Save DonorName">
            <con:configuration>
              <scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def DonorId = holder.getNodeValue("//Results[1]/ResultSet[1]/Row[1]/CTD_SPR_DONOR_ID[1]")
def dbhostname = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("DBHostname")
def dbport = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("DBPort")
def dbuser = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("DBUser")
def dbpassword = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("DBPassword")
def dbdatabase = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("DBDatabase")
import groovy.sql.Sql;
import com.mysql.jdbc.*
//Establish JDBC Connection to the DB
def  con = Sql.newInstance("jdbc:postgresql://"+dbhostname+":"+dbport+"/"+dbdatabase+"?user="+dbuser+"&amp;password="+dbpassword);
def query = con.rows("select spr_name from overstappen.service_provider where id="+ DonorId)
log.info ("Query result: "+ query)
log.info query.get(0).getProperty("spr_name")
messageExchange.modelItem.testStep.testCase.setPropertyValue( "donorName", query.get(0).getProperty("spr_name").toString() )</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Wait For mail" id="e880c2e0-8442-4afb-ad24-f51e8c3d3196">
        <con:settings/>
        <con:config>
          <delay>${#TestSuite#PollTime}</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="CheckMail" id="6fd4913d-6611-492c-8b3c-f044afcd1164" disabled="true">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.SampleTest;
import nl.coin.Selenium.SeleniumActions;
import nl.coin.Selenium.JavaActions;
import java.text.SimpleDateFormat;

def seleniumHandle = new SeleniumActions()
def javaHandle = new JavaActions();
def now = testRunner.testCase.getPropertyValue("Now")
def requestedDateTime = testRunner.testCase.getPropertyValue("requestedDateTime")
def donorName = testRunner.testCase.getPropertyValue("donorName")

def date = javaHandle.convertDateFormat(now, "yyyy-MM-dd'T'HH:mm:ss", "yyyy-MM-dd")
def time = javaHandle.convertDateFormat(requestedDateTime, "yyyy-MM-dd' 'HH:mm:ss", "HH:mm:ss")

def todayMailTime = date + " "+ time
log.info todayMailTime

//todayMailTime should be more than current time+15 min
Calendar calendar = Calendar.getInstance();

calendar.setTime(new SimpleDateFormat("yyyy-MM-dd' 'HH:mm:ss").parse(todayMailTime));
calendar.add(Calendar.MINUTE, 15);
		
boolean before = new Date().after(calendar.getTime());
log.info before
if(before) {
	log.info "Mail is generated"
	
	def expectedSubject = "COIN COMP cancel warning : "+javaHandle.convertDateFormat(now, "yyyy-MM-dd'T'HH:mm:ss", "dd-MM-yyyy")+" for provider "+donorName
	log.info expectedSubject

	def verification = javaHandle.checkInUnreadMails(expectedSubject, todayMailTime, "yyyy-MM-dd' 'HH:mm:ss")

	if(!verification) {
		testRunner.fail("No mail is displayed")
	} else {
		log.info "mail displayed with the given preconditions"
	}
} else {
	log.info "Mail is not yest genarated"
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="CheckMail" id="5eb460f8-f104-4ced-9250-db0e25e1ed8e" disabled="true">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.SampleTest;
import nl.coin.Selenium.SeleniumActions;
import nl.coin.Selenium.JavaActions;
import java.text.SimpleDateFormat;

def seleniumHandle = new SeleniumActions()
def javaHandle = new JavaActions();
def now = testRunner.testCase.getPropertyValue("Now")
def requestedDateTime = testRunner.testCase.getPropertyValue("requestedDateTime")
def donorName = testRunner.testCase.getPropertyValue("donorName")
def switchId = testRunner.testCase.getPropertyValue("switchId")

def date = javaHandle.convertDateFormat(now, "yyyy-MM-dd'T'HH:mm:ss", "yyyy-MM-dd")
def time = javaHandle.convertDateFormat(requestedDateTime, "yyyy-MM-dd' 'HH:mm:ss", "HH:mm:ss")

def todayMailTime = date + " "+ time
log.info todayMailTime

//todayMailTime should be more than current time+15 min
Calendar calendar = Calendar.getInstance();

calendar.setTime(new SimpleDateFormat("yyyy-MM-dd' 'HH:mm:ss").parse(todayMailTime));
calendar.add(Calendar.MINUTE, 15);
		
boolean before = new Date().after(calendar.getTime());
if(before) {
	log.info "Mail is generated"
	
	def expectedSubject = "COIN COMP cancel warning : "+javaHandle.convertDateFormat(now, "yyyy-MM-dd'T'HH:mm:ss", "dd-MM-yyyy")+" for provider "+donorName
	log.info expectedSubject

	def verification = javaHandle.verifyMailContent(expectedSubject, todayMailTime, "yyyy-MM-dd' 'HH:mm:ss", switchId)

	if(!verification) {
		testRunner.fail("No mail is displayed")
	} else {
		log.info "mail displayed with the given preconditions"
	}
} else {
	log.info "Mail is not yest genarated"
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_EL Table_CTCHA" id="411d6c48-7320-4c7d-8aa9-f4291d5a967a">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.email_logging el join overstappen.email_logging_detail eld on el.el_detail_id = eld.id 
where el_reason='CancelScript' 
and el_subject like 'COIN COMP cancel warning : ${#TestSuite#todaydate}%'
and el_body like '%Change Answer Blocking%'
order by el.id desc limit 100</con:query>
          <con:assertion type="JDBC Status" id="5b056277-e6ec-404a-99fc-8472b329b9f9" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="08c804f2-1638-4310-89c5-8ddef67cc36e" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_Body">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_BODY/text()</path>
              <content>*Functional Error 216 - Invalid Switch Id for the request recieved*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_SUBJECT">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_SUBJECT/text()</path>
              <content>*Functional Error 216*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_REASON">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_REASON/text()</path>
              <content>Notification</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="68473dbd-5cb3-4914-92f6-1f226e130c54" name="Xpath: assert Receiver">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_RECEIVER_ID/text()</path>
              <content>${#TestSuite#donorId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.time.TimeCategory
import nl.coin.Selenium.JavaActions;
def javaHandle = new JavaActions();
def today = new Date() 
def now = today.format("yyyy-MM-dd'T'HH:mm:ss")
testRunner.testCase.setPropertyValue("Now",now)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:testCase id="bf5b6023-fe74-4bb7-9e88-d165d955a4ab" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ChangeAnswerBlocking_16Days" searchProperties="true">
      <con:settings/>
      <con:testStep type="jdbc" name="JDBC_CTD Table_CTR" id="62143f69-4d3d-41eb-a383-0d57845bf094">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select ctd.* from overstappen.service_provider sp 
inner join overstappen.contract_termination_dossier ctd 
on sp.id =ctd.ctd_spr_recipient_id 
where spr_cancel_automatic=true 
and ctd.ctd_process_status = 'Change Answer Blocking' 
and extract(year from ctd.ctd_requesteddatetime)= ${#TestSuite#past16thWorkingDayYear} 
and extract(month from ctd.ctd_requesteddatetime)= ${#TestSuite#past16thWorkingDayMonth} 
and extract(day from ctd.ctd_requesteddatetime)= ${#TestSuite#past16thWorkingDayDay} 
order by ctd.CTD_REQUESTEDDATETIME asc</con:query>
          <con:assertion type="JDBC Status" id="6b7fa186-01ea-4b41-ade7-6132cd7f23d0" name="JDBC Status"/>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: assert ion ctd_id">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def ctdid = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/ID[1]", "ctdId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: Save SwitchId">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def switchId = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/CTD_SWITCHID[1]", "switchId");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: Save RequestedDateTime">
            <con:configuration>
              <scriptText>import nl.coin.Selenium.*;
def funcHandle = new ReadymadeFunctions();
import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def requestedDateTime = funcHandle.getValueAndSaveAsTestCaseProperty(holder, messageExchange, "//Results[1]/ResultSet[1]/Row[1]/CTD_REQUESTEDDATETIME[1]", "requestedDateTime");</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion type="GroovyScriptAssertion" id="d0dec4d0-2676-462d-8fb9-b01040bbf491" name="Script: Save DonorName">
            <con:configuration>
              <scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.responseContentAsXml )
def DonorId = holder.getNodeValue("//Results[1]/ResultSet[1]/Row[1]/CTD_SPR_DONOR_ID[1]")
def dbhostname = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("DBHostname")
def dbport = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("DBPort")
def dbuser = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("DBUser")
def dbpassword = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("DBPassword")
def dbdatabase = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue("DBDatabase")
import groovy.sql.Sql;
import com.mysql.jdbc.*
//Establish JDBC Connection to the DB
def  con = Sql.newInstance("jdbc:postgresql://"+dbhostname+":"+dbport+"/"+dbdatabase+"?user="+dbuser+"&amp;password="+dbpassword);
def query = con.rows("select spr_name from overstappen.service_provider where id="+ DonorId)
log.info ("Query result: "+ query)
log.info query.get(0).getProperty("spr_name")
messageExchange.modelItem.testStep.testCase.setPropertyValue( "donorName", query.get(0).getProperty("spr_name").toString() )</scriptText>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Wait For mail" id="48f00e72-c0e5-4fd1-8d4f-2e75b57fb981">
        <con:settings/>
        <con:config>
          <delay>${#TestSuite#PollTime}</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="CheckMail" id="564c4ccb-f18a-4157-aee6-2699f95b2bc1" disabled="true">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.SampleTest;
import nl.coin.Selenium.SeleniumActions;
import nl.coin.Selenium.JavaActions;
import java.text.SimpleDateFormat;

def seleniumHandle = new SeleniumActions()
def javaHandle = new JavaActions();
def now = testRunner.testCase.getPropertyValue("Now")
def requestedDateTime = testRunner.testCase.getPropertyValue("requestedDateTime")
def donorName = testRunner.testCase.getPropertyValue("donorName")

def date = javaHandle.convertDateFormat(now, "yyyy-MM-dd'T'HH:mm:ss", "yyyy-MM-dd")
def time = javaHandle.convertDateFormat(requestedDateTime, "yyyy-MM-dd' 'HH:mm:ss", "HH:mm:ss")

def todayMailTime = date + " "+ time
log.info todayMailTime

//todayMailTime should be more than current time+15 min
Calendar calendar = Calendar.getInstance();

calendar.setTime(new SimpleDateFormat("yyyy-MM-dd' 'HH:mm:ss").parse(todayMailTime));
calendar.add(Calendar.MINUTE, 15);
		
boolean before = new Date().after(calendar.getTime());
log.info before
if(before) {
	log.info "Mail is generated"
	
	def expectedSubject = "COIN COMP cancel confirmation : "+javaHandle.convertDateFormat(now, "yyyy-MM-dd'T'HH:mm:ss", "dd-MM-yyyy")+" for provider "+donorName
	log.info expectedSubject

	def verification = javaHandle.checkInUnreadMails(expectedSubject, todayMailTime, "yyyy-MM-dd' 'HH:mm:ss")

	if(!verification) {
		testRunner.fail("No mail is displayed")
	} else {
		log.info "mail displayed with the given preconditions"
	}
} else {
	log.info "Mail is not yest genarated"
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="CheckMail" id="2662a9d2-d2a0-4ee3-83d4-1f488beeb728" disabled="true">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.SampleTest;
import nl.coin.Selenium.SeleniumActions;
import nl.coin.Selenium.JavaActions;
import java.text.SimpleDateFormat;

def seleniumHandle = new SeleniumActions()
def javaHandle = new JavaActions();
def now = testRunner.testCase.getPropertyValue("Now")
def requestedDateTime = testRunner.testCase.getPropertyValue("requestedDateTime")
def donorName = testRunner.testCase.getPropertyValue("donorName")
def switchId = testRunner.testCase.getPropertyValue("switchId")

def date = javaHandle.convertDateFormat(now, "yyyy-MM-dd'T'HH:mm:ss", "yyyy-MM-dd")
def time = javaHandle.convertDateFormat(requestedDateTime, "yyyy-MM-dd' 'HH:mm:ss", "HH:mm:ss")

def todayMailTime = date + " "+ time
log.info todayMailTime

//todayMailTime should be more than current time+15 min
Calendar calendar = Calendar.getInstance();

calendar.setTime(new SimpleDateFormat("yyyy-MM-dd' 'HH:mm:ss").parse(todayMailTime));
calendar.add(Calendar.MINUTE, 15);
		
boolean before = new Date().after(calendar.getTime());
if(before) {
	log.info "Mail is generated"
	
	def expectedSubject = "COIN COMP cancel confirmation : "+javaHandle.convertDateFormat(now, "yyyy-MM-dd'T'HH:mm:ss", "dd-MM-yyyy")+" for provider "+donorName
	log.info expectedSubject

	def verification = javaHandle.verifyMailContent(expectedSubject, todayMailTime, "yyyy-MM-dd' 'HH:mm:ss", switchId)

	if(!verification) {
		testRunner.fail("No mail is displayed")
	} else {
		log.info "mail displayed with the given preconditions"
	}
} else {
	log.info "Mail is not yest genarated"
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_EL Table_CTCHA" id="e341a424-62f5-41e0-89ec-83e647113f33">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.email_logging el join overstappen.email_logging_detail eld on el.el_detail_id = eld.id 
where el_reason='CancelScript' 
and el_subject like 'COIN COMP cancel confirmation : ${#TestSuite#todaydate}%'
and el_body like '%Change Answer Blocking%'
order by el.id desc limit 100</con:query>
          <con:assertion type="JDBC Status" id="5b056277-e6ec-404a-99fc-8472b329b9f9" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="08c804f2-1638-4310-89c5-8ddef67cc36e" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_Body">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_BODY/text()</path>
              <content>*Functional Error 216 - Invalid Switch Id for the request recieved*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_SUBJECT">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_SUBJECT/text()</path>
              <content>*Functional Error 216*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_REASON">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_REASON/text()</path>
              <content>Notification</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="68473dbd-5cb3-4914-92f6-1f226e130c54" name="Xpath: assert Receiver">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_RECEIVER_ID/text()</path>
              <content>${#TestSuite#donorId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.time.TimeCategory
import nl.coin.Selenium.JavaActions;
def javaHandle = new JavaActions();
def today = new Date() 
def now = today.format("yyyy-MM-dd'T'HH:mm:ss")
testRunner.testCase.setPropertyValue("Now",now)</con:setupScript>
      <con:properties/>
    </con:testCase>
    <con:properties>
      <con:property>
        <con:name>TimestampNOW</con:name>
        <con:value>${=String.format('%tFT%&lt;tT', new Date())}</con:value>
      </con:property>
      <con:property>
        <con:name>PollTime</con:name>
        <con:value>10000</con:value>
      </con:property>
      <con:property>
        <con:name>browser</con:name>
        <con:value>firefox</con:value>
      </con:property>
    </con:properties>
    <con:setupScript>import org.apache.commons.lang.RandomStringUtils
import groovy.time.TimeCategory
import nl.coin.Selenium.JavaActions;
def javaHandle = new JavaActions();
def today = new Date() 
def now = today.format("yyyy-MM-dd'T'HH:mm:ss")
testSuite.setPropertyValue("Now",now)</con:setupScript>
    <con:tearDownScript/>
    <con:reportParameters/>
  </con:testSuite>
  <con:testSuite name="3.5.5_6_Status/NotificationMails" id="47847955-2998-4a8a-843f-93a5c88a4079" disabled="true">
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Status Mails" searchProperties="true" id="6d796bfa-a051-4598-97fc-71f62dae2129" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:settings>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">1000</con:setting>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting>
      </con:settings>
      <con:testStep type="groovy" name="Groovy Script" id="d9b436d8-909a-491f-8d9b-09f899b95fb5">
        <con:settings/>
        <con:config>
          <script>def updateEmailsTimeslots = testRunner.testCase.testSuite.getPropertyValue("updateEmailsTimeslots")
log.info updateEmailsTimeslots
if(updateEmailsTimeslots == "") {
	 testRunner.gotoStepByName( "Delay0")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="CheckMail" id="60071713-fd03-4f14-a1a4-dd0676be34fc" disabled="true">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.*;
import java.text.SimpleDateFormat;

def javaHandle = new JavaActions();
def now = testRunner.testCase.getPropertyValue("Now")
def updateEmailsTimeslots = testRunner.testCase.testSuite.getPropertyValue("resultantUpdateSlots")
def providerName = testRunner.testCase.testSuite.getPropertyValue("providerName")
if (updateEmailsTimeslots == "") {
	log.info "mails are not yet generated"
} else {
	def simpleDateFormat = new SimpleDateFormat("dd-MM-yyyy' 'HH:mm:ss")
	def date = javaHandle.convertDateFormat(now, "yyyy-MM-dd'T'HH:mm:ss", "dd-MM-yyyy")
	String[] propData = updateEmailsTimeslots.split(",")
	for (int i = 0; i &lt; propData.length; i++) {
		def todayMailTime = date + " "+propData[i]+":00"
	
		Date todayMailTime_Date = simpleDateFormat.parse(todayMailTime);
		todayMailTime_Date = new Date(todayMailTime_Date.getTime()+(3 * 60000));

		def expectedSubject = "COIN COMP status update "+date + " "+propData[i]+" for provider "+providerName
		log.info expectedSubject

		def verification = javaHandle.checkInUnreadMails(expectedSubject, simpleDateFormat.format(todayMailTime_Date).toString(), "dd-MM-yyyy' 'HH:mm:ss")

		if(!verification) {
			testRunner.fail("No mail is displayed")
		} else {
			log.info "mail displayed with the given preconditions"
		}
	}
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_EL Table_Notification" id="e71b8327-bd8f-42d8-8b79-78ff94a2504c">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.email_logging el join overstappen.email_logging_detail eld on el.el_detail_id = eld.id 
where el_reason='UpdateScript' 
and el_subject like 'COIN COMP status update %'
and el_receiver_id=${#TestSuite#sprId} 
and extract(year from el_msg_sent_datetime) = '${#TestCase#toDayYear}'
and extract(month from el_msg_sent_datetime) = '${#TestCase#toDayMonth}'
and extract(day from el_msg_sent_datetime) = '${#TestCase#toDayDate}'
order by el.id desc</con:query>
          <con:assertion type="JDBC Status" id="5b056277-e6ec-404a-99fc-8472b329b9f9" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="08c804f2-1638-4310-89c5-8ddef67cc36e" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>${#TestSuite#updateMailCount}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_Body" disabled="true">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_BODY/text()</path>
              <content>New Request received on COMP for ${#TestSuite#Recipient}-${#TestSuite#Donor}-${#TestCase#ContractId}-01. Please respond on this request within 24 working day hours with a Request Answer*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_SUBJECT" disabled="true">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_SUBJECT/text()</path>
              <content>*New Request received on COMP for ${#TestSuite#Recipient}-${#TestSuite#Donor}-${#TestCase#ContractId}-01</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_REASON" disabled="true">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_REASON/text()</path>
              <content>Request</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="4e4435dd-077d-4bf1-a0da-0ef46339bb12" name="Xpath: assert Receiver" disabled="true">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_RECEIVER_ID/text()</path>
              <content>${#TestSuite#donorId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Delay0" id="bdca923e-4b49-48ca-97a3-3b633431cd3a">
        <con:settings/>
        <con:config>
          <delay>0</delay>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.time.TimeCategory
import nl.coin.Selenium.*;
def javaHandle = new JavaActions();
def today = new Date();
def now = String.format('%tFT%&lt;tT', new Date() );
testRunner.testCase.setPropertyValue("Now",now);
testRunner.testCase.setPropertyValue("toDayYear", javaHandle.convertDateFormat(now, "yyyy-MM-dd'T'HH:mm:ss", "yyyy"));
testRunner.testCase.setPropertyValue("toDayMonth", javaHandle.convertDateFormat(now, "yyyy-MM-dd'T'HH:mm:ss", "MM"));
testRunner.testCase.setPropertyValue("toDayDate", javaHandle.convertDateFormat(now, "yyyy-MM-dd'T'HH:mm:ss", "dd"));</con:setupScript>
      <con:tearDownScript/>
      <con:properties/>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>122d3297-f22d-449f-ac52-c46f1bfb714e</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Notification Mails" searchProperties="true" id="b19fb375-0c19-485d-8bfb-0fa31c6c1d89" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:settings>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">1000</con:setting>
        <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting>
      </con:settings>
      <con:testStep type="groovy" name="Groovy Script" id="49ed197a-0fc8-4f59-ae63-0ace3be75157">
        <con:settings/>
        <con:config>
          <script>def notificationEmailsTimeslots = testRunner.testCase.testSuite.getPropertyValue("notificationEmailsTimeslots")
log.info notificationEmailsTimeslots
if(notificationEmailsTimeslots == "") {
	 testRunner.gotoStepByName( "Delay0")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="CheckMail" id="58bde5d6-9bb2-40f1-9c9d-80531706997e" disabled="true">
        <con:settings/>
        <con:config>
          <script>import nl.coin.Selenium.*;
import java.text.SimpleDateFormat;

def javaHandle = new JavaActions();
def now = testRunner.testCase.getPropertyValue("Now")
def notificationEmailsTimeslots = testRunner.testCase.testSuite.getPropertyValue("resultantNotificationSlots")
def providerName = testRunner.testCase.testSuite.getPropertyValue("providerName")
if (notificationEmailsTimeslots == "") {
	log.info "mails are not yet generated"
} else {
	def simpleDateFormat = new SimpleDateFormat("dd-MM-yyyy' 'HH:mm:ss")
	def date = javaHandle.convertDateFormat(now, "yyyy-MM-dd'T'HH:mm:ss", "dd-MM-yyyy")
	String[] propData = notificationEmailsTimeslots.split(",")
	for (int i = 0; i &lt; propData.length; i++) {
		def todayMailTime = date + " "+propData[i]+":00"
	
		Date todayMailTime_Date = simpleDateFormat.parse(todayMailTime);
		todayMailTime_Date = new Date(todayMailTime_Date.getTime()+(3 * 60000));
	
		def expectedSubject = "COIN COMP notification update "+date + " "+propData[i]+" for provider: "+providerName
		log.info expectedSubject

		def verification = javaHandle.checkInUnreadMails(expectedSubject, simpleDateFormat.format(todayMailTime_Date).toString(), "dd-MM-yyyy' 'HH:mm:ss")

		if(!verification) {
			testRunner.fail("No mail is displayed")
		} else {
			log.info "mail displayed with the given preconditions"
		}
	}
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC_EL Table_Notification" id="ac336a4b-4ad6-4052-b5e3-c22b505bbd50">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName>JDBC</con:dbConnectionName>
          <con:driver>org.postgresql.Driver</con:driver>
          <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
          <con:password>${#Project#DBPassword}</con:password>
          <con:query>select * from overstappen.email_logging el join overstappen.email_logging_detail eld on el.el_detail_id = eld.id 
where el_reason='Notification' 
and el_subject like 'COIN COMP notification update %' 
and el_receiver_id=${#TestSuite#sprId} 
and extract(year from el_msg_sent_datetime) = '${#TestCase#toDayYear}'
and extract(month from el_msg_sent_datetime) = '${#TestCase#toDayMonth}'
and extract(day from el_msg_sent_datetime) = '${#TestCase#toDayDate}'
order by el.id desc</con:query>
          <con:assertion type="JDBC Status" id="5b056277-e6ec-404a-99fc-8472b329b9f9" name="JDBC Status"/>
          <con:assertion type="XPath Match" id="08c804f2-1638-4310-89c5-8ddef67cc36e" name="Xpath: assert RowCount">
            <con:configuration>
              <path>count(/Results/ResultSet/Row)</path>
              <content>${#TestSuite#notificationMailCount}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_Body" disabled="true">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_BODY/text()</path>
              <content>New Request received on COMP for ${#TestSuite#Recipient}-${#TestSuite#Donor}-${#TestCase#ContractId}-01. Please respond on this request within 24 working day hours with a Request Answer*</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_SUBJECT" disabled="true">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_SUBJECT/text()</path>
              <content>*New Request received on COMP for ${#TestSuite#Recipient}-${#TestSuite#Donor}-${#TestCase#ContractId}-01</content>
              <allowWildcards>true</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="b10e84a2-2551-4999-aaad-97a2edfc5032" name="Xpath: assert EL_REASON" disabled="true">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_REASON/text()</path>
              <content>Request</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="4e4435dd-077d-4bf1-a0da-0ef46339bb12" name="Xpath: assert Receiver" disabled="true">
            <con:configuration>
              <path>/Results/ResultSet/Row/EL_RECEIVER_ID/text()</path>
              <content>${#TestSuite#donorId}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Delay0" id="a852105e-d97e-4a89-a0b5-3a54e946c7f1">
        <con:settings/>
        <con:config>
          <delay>0</delay>
        </con:config>
      </con:testStep>
      <con:setupScript>import groovy.time.TimeCategory
import nl.coin.Selenium.*;
def javaHandle = new JavaActions();
def today = new Date();
def now = String.format('%tFT%&lt;tT', new Date() );
testRunner.testCase.setPropertyValue("Now",now);
testRunner.testCase.setPropertyValue("toDayYear", javaHandle.convertDateFormat(now, "yyyy-MM-dd'T'HH:mm:ss", "yyyy"));
testRunner.testCase.setPropertyValue("toDayMonth", javaHandle.convertDateFormat(now, "yyyy-MM-dd'T'HH:mm:ss", "MM"));
testRunner.testCase.setPropertyValue("toDayDate", javaHandle.convertDateFormat(now, "yyyy-MM-dd'T'HH:mm:ss", "dd"));</con:setupScript>
      <con:tearDownScript/>
      <con:properties/>
      <con:reportParameters/>
      <con:breakPoints>
        <con:testStepId>122d3297-f22d-449f-ac52-c46f1bfb714e</con:testStepId>
        <con:status>NONE</con:status>
        <con:properties/>
      </con:breakPoints>
    </con:testCase>
    <con:properties>
      <con:property>
        <con:name>TimestampNOW</con:name>
        <con:value>${=String.format('%tFT%&lt;tT', new Date())}</con:value>
      </con:property>
      <con:property>
        <con:name>PollTime</con:name>
        <con:value>10000</con:value>
      </con:property>
      <con:property>
        <con:name>lineNumber</con:name>
        <con:value>0</con:value>
      </con:property>
      <con:property>
        <con:name>testdatafile</con:name>
        <con:value>serviceProviders.csv</con:value>
      </con:property>
      <con:property>
        <con:name>browser</con:name>
        <con:value>firefox</con:value>
      </con:property>
    </con:properties>
    <con:setupScript>import org.apache.commons.lang.RandomStringUtils
import groovy.time.TimeCategory
import nl.coin.Selenium.*;
def javaHandle = new JavaActions();
def today = new Date();
def now = String.format('%tFT%&lt;tT', new Date() );
testSuite.setPropertyValue("Now",now);
testSuite.setPropertyValue("toDayYear", javaHandle.convertDateFormat(now, "yyyy-MM-dd'T'HH:mm:ss", "yyyy"));
testSuite.setPropertyValue("toDayMonth", javaHandle.convertDateFormat(now, "yyyy-MM-dd'T'HH:mm:ss", "MM"));
testSuite.setPropertyValue("toDayDate", javaHandle.convertDateFormat(now, "yyyy-MM-dd'T'HH:mm:ss", "dd"));</con:setupScript>
    <con:tearDownScript/>
    <con:reportParameters/>
  </con:testSuite>
  <con:endpointStrategy xsi:type="con:DefaultEndpointStrategy" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:endpoint mode="COMPLEMENT" username="Bert" password="Ernie" wssType="PasswordText">http://testcomp.coin.nl/compv3/MessageService</con:endpoint>
    <con:endpoint mode="COMPLEMENT" username="Bert" password="Ernie" wssType="PasswordText" domain="" outgoingWss="" incomingWss="">http://210.7.69.28:8080/compv3/MessageService</con:endpoint>
    <con:endpoint mode="COMPLEMENT" username="Bert" password="Ernie">http://192.168.100.28:8080/compv3/MessageService</con:endpoint>
  </con:endpointStrategy>
  <con:requirements/>
  <con:properties>
    <con:property>
      <con:name>directory</con:name>
      <con:value/>
    </con:property>
    <con:property>
      <con:name>SoapUrl</con:name>
      <con:value/>
    </con:property>
    <con:property>
      <con:name>DBHostname</con:name>
      <con:value/>
    </con:property>
    <con:property>
      <con:name>DBPort</con:name>
      <con:value/>
    </con:property>
    <con:property>
      <con:name>DBUser</con:name>
      <con:value/>
    </con:property>
    <con:property>
      <con:name>DBPassword</con:name>
      <con:value/>
    </con:property>
    <con:property>
      <con:name>DBDatabase</con:name>
      <con:value/>
    </con:property>
    <con:property>
      <con:name>GUIUrl</con:name>
      <con:value/>
    </con:property>
    <con:property>
      <con:name>UserIP</con:name>
      <con:value/>
    </con:property>
  </con:properties>
  <con:afterLoadScript/>
  <con:wssContainer/>
  <con:databaseConnectionContainer>
    <con:databaseConnection>
      <con:name>JDBC</con:name>
      <con:driver>org.postgresql.Driver</con:driver>
      <con:connectionString>jdbc:postgresql://${#Project#DBHostname}:${#Project#DBPort}/${#Project#DBDatabase}?user=${#Project#DBUser}&amp;password=PASS_VALUE</con:connectionString>
      <con:password>${#Project#DBPassword}</con:password>
    </con:databaseConnection>
  </con:databaseConnectionContainer>
  <con:oAuth2ProfileContainer/>
  <con:oAuth1ProfileContainer/>
  <con:reporting>
    <con:xmlTemplates/>
    <con:parameters/>
  </con:reporting>
  <con:sensitiveInformation/>
</con:soapui-project>
